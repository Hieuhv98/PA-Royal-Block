%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: -777816280, guid: da00e2ebace4072468f4b29582633b7e, type: 3}
  m_Name: SVC_Luna
  m_EditorClassIdentifier: 
  _svcLunaVersion: 3
  _shaderVariants:
  - shaderCompilerPlatform: 5
    shader: {fileID: 66, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 66, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 17, guid: 0000000000000000e000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 17, guid: 0000000000000000e000000000000000, type: 0}
    passType: 0
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 17, guid: 0000000000000000e000000000000000, type: 0}
    passType: 0
    passId: 2
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 10723, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 10723, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: fa95b0fb6983c0f40a152e6f9aa82bfb, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: fa95b0fb6983c0f40a152e6f9aa82bfb, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: fa95b0fb6983c0f40a152e6f9aa82bfb, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: fa95b0fb6983c0f40a152e6f9aa82bfb, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: 1e8a610c9e01c3648bac42585e5fc676, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: 1e8a610c9e01c3648bac42585e5fc676, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: 1e8a610c9e01c3648bac42585e5fc676, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _STRAIGHT_ALPHA_INPUT
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: 1e8a610c9e01c3648bac42585e5fc676, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _STRAIGHT_ALPHA_INPUT
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: 53efa1d97f5d9f74285d4330cda14e36, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: 53efa1d97f5d9f74285d4330cda14e36, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: a1e4ab34b07f81e4e94f0d241c416669, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: a1e4ab34b07f81e4e94f0d241c416669, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: a1e4ab34b07f81e4e94f0d241c416669, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: a1e4ab34b07f81e4e94f0d241c416669, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: cfbf95ed0fe6c554c8c2ee6c8325937c, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: cfbf95ed0fe6c554c8c2ee6c8325937c, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: cfbf95ed0fe6c554c8c2ee6c8325937c, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: cfbf95ed0fe6c554c8c2ee6c8325937c, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: c61244023592f95479fddd71b5067683, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: c61244023592f95479fddd71b5067683, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: c61244023592f95479fddd71b5067683, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: c61244023592f95479fddd71b5067683, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 5
    shader: {fileID: 10721, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 10721, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 4
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 4
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 4
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _ALPHABLEND_ON
  - shaderCompilerPlatform: 9
    shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 4
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _ALPHABLEND_ON
  - shaderCompilerPlatform: 5
    shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
    passType: 1
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
    passType: 1
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
    passType: 2
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
    passType: 2
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNDERLAY_ON
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNDERLAY_ON
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNDERLAY_ON
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNDERLAY_ON
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNDERLAY_ON
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNDERLAY_ON
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNDERLAY_ON
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNDERLAY_ON
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - OUTLINE_ON
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - OUTLINE_ON
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - OUTLINE_ON
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - OUTLINE_ON
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - OUTLINE_ON
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - OUTLINE_ON
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - OUTLINE_ON
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - OUTLINE_ON
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 5
    shader: {fileID: 200, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 200, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 202, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 202, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _NORMALMAP
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _NORMALMAP
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _NORMALMAP
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _NORMALMAP
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _NORMALMAP
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _NORMALMAP
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - _NORMALMAP
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - _NORMALMAP
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _NORMALMAP
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _NORMALMAP
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - _NORMALMAP
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - _NORMALMAP
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RAMP_BANDS
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RAMP_BANDS
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_RAMP_BANDS
    - TCP2_RIM_LIGHTING
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_RAMP_BANDS
    - TCP2_RIM_LIGHTING
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_RAMP_BANDS
    - TCP2_RIM_LIGHTING
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_RAMP_BANDS
    - TCP2_RIM_LIGHTING
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_RAMP_BANDS
    - TCP2_RIM_LIGHTING
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_RAMP_BANDS
    - TCP2_RIM_LIGHTING
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_RAMP_BANDS
    - TCP2_RIM_LIGHTING
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_RAMP_BANDS
    - TCP2_RIM_LIGHTING
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_RAMP_BANDS
    - TCP2_RIM_LIGHTING
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_RAMP_BANDS
    - TCP2_RIM_LIGHTING
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _NORMALMAP
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _NORMALMAP
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _NORMALMAP
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _NORMALMAP
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - _NORMALMAP
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - _NORMALMAP
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
    - _EMISSION
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_RAMP_BANDS
    - TCP2_RIM_LIGHTING
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_RAMP_BANDS
    - TCP2_RIM_LIGHTING
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_RAMP_BANDS
    - TCP2_RIM_LIGHTING
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _RECEIVE_SHADOWS_OFF
    - TCP2_RAMP_BANDS
    - TCP2_RIM_LIGHTING
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_RAMP_BANDS
    - TCP2_RIM_LIGHTING
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - TCP2_MOBILE
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - _NORMALMAP
    - TCP2_RAMP_BANDS
    - TCP2_RIM_LIGHTING
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: 10752, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 10752, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
  - shaderCompilerPlatform: 9
    shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
  - shaderCompilerPlatform: 5
    shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
  - shaderCompilerPlatform: 9
    shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
  - shaderCompilerPlatform: 5
    shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
  - shaderCompilerPlatform: 9
    shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
    passType: 5
    passId: 1
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
  - shaderCompilerPlatform: 5
    shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _SUNDISK_NONE
  - shaderCompilerPlatform: 9
    shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _SUNDISK_NONE
  - shaderCompilerPlatform: 5
    shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _SUNDISK_SIMPLE
  - shaderCompilerPlatform: 9
    shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _SUNDISK_SIMPLE
  - shaderCompilerPlatform: 5
    shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _SUNDISK_HIGH_QUALITY
  - shaderCompilerPlatform: 9
    shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _SUNDISK_HIGH_QUALITY
  - shaderCompilerPlatform: 5
    shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _SUNDISK_NONE
    - _SUNDISK_SIMPLE
  - shaderCompilerPlatform: 9
    shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _SUNDISK_NONE
    - _SUNDISK_SIMPLE
  - shaderCompilerPlatform: 5
    shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _SUNDISK_HIGH_QUALITY
    - _SUNDISK_SIMPLE
  - shaderCompilerPlatform: 9
    shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _SUNDISK_HIGH_QUALITY
    - _SUNDISK_SIMPLE
  - shaderCompilerPlatform: 5
    shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 9
    shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 5
    shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 9
    shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 5
    shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 9
    shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 5
    shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shaderCompilerPlatform: 9
    shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  _usedByLunaBuild:
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_RAMP_BANDS
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_RAMP_BANDS
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SPECULAR
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _RECEIVE_SHADOWS_OFF
  - shaderCompilerPlatform: 5
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _NORMALMAP
  - shaderCompilerPlatform: 9
    shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    passType: 4
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - DIRECTIONAL
    - LIGHTPROBE_SH
    - TCP2_MOBILE
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - _NORMALMAP
  - shaderCompilerPlatform: 5
    shader: {fileID: 10721, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 10721, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 5
    shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 4
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _ALPHABLEND_ON
  - shaderCompilerPlatform: 9
    shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 4
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _ALPHABLEND_ON
  - shaderCompilerPlatform: 5
    shader: {fileID: 200, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shaderCompilerPlatform: 9
    shader: {fileID: 200, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  _includedShaderVariants: []
  _excludedShaderVariants: []
  version: 978
  _shaderParsedShaders:
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 66, guid: 0000000000000000f000000000000000, type: 0}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Color;\nuniform highp sampler2D _MainTex;\nvarying
            highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid
            main()\n{\n    u_xlat0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0
            = u_xlat0 * _Color;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags: []
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nout
            highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec4 _Color;\nUNITY_LOCATION(0) uniform
            highp sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n   
            u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0
            * _Color;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags: []
        DefinedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        KeywordGroups: []
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 66, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 9
          shader: {fileID: 66, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags: []
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 66, guid: 0000000000000000f000000000000000, type: 0}
      Tags: []
    Shader: {fileID: 66, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 66, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 9
      shader: {fileID: 66, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 17, guid: 0000000000000000e000000000000000, type: 0}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\r\n                    #version 100\r\n                   
            // This is a VP stub\r\n                    attribute vec3 _glesVertex;\r\n                   
            uniform mat4 matrix_model;\r\n                    uniform mat4 matrix_viewProjection;\r\n                   
            void main() { \r\n                        gl_Position = matrix_viewProjection
            * matrix_model * vec4(_glesVertex, 1.0); \r\n                    }"
          FragmentProgram: "\r\n                    #version 100\r\n                   
            // This is a VP stub\r\n                    precision mediump float;\r\n                   
            void main(void) { \r\n                        gl_FragColor = vec4(1,
            0, 1, 1); \r\n                    }"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: LIGHTMODE
            Value: ALWAYS
        DefinedKeywords: []
        KeywordGroups: []
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 17, guid: 0000000000000000e000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags: []
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: 512
      - Shader: {fileID: 17, guid: 0000000000000000e000000000000000, type: 0}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\r\n                    #version 100\r\n                   
            // This is a VP stub\r\n                    attribute vec3 _glesVertex;\r\n                   
            uniform mat4 matrix_model;\r\n                    uniform mat4 matrix_viewProjection;\r\n                   
            void main() { \r\n                        gl_Position = matrix_viewProjection
            * matrix_model * vec4(_glesVertex, 1.0); \r\n                    }"
          FragmentProgram: "\r\n                    #version 100\r\n                   
            // This is a VP stub\r\n                    precision mediump float;\r\n                   
            void main(void) { \r\n                        gl_FragColor = vec4(1,
            0, 1, 1); \r\n                    }"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: LIGHTMODE
            Value: ALWAYS
        DefinedKeywords: []
        KeywordGroups: []
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 17, guid: 0000000000000000e000000000000000, type: 0}
          passType: 0
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        CompilationErrors: []
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 0
        SerializedObjectId: 1
        Tags:
        - Key: LIGHTMODE
          Value: DepthNormalsOnly
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: 512
      - Shader: {fileID: 17, guid: 0000000000000000e000000000000000, type: 0}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\r\n                    #version 100\r\n                   
            // This is a VP stub\r\n                    attribute vec3 _glesVertex;\r\n                   
            uniform mat4 matrix_model;\r\n                    uniform mat4 matrix_viewProjection;\r\n                   
            void main() { \r\n                        gl_Position = matrix_viewProjection
            * matrix_model * vec4(_glesVertex, 1.0); \r\n                    }"
          FragmentProgram: "\r\n                    #version 100\r\n                   
            // This is a VP stub\r\n                    precision mediump float;\r\n                   
            void main(void) { \r\n                        gl_FragColor = vec4(1,
            0, 1, 1); \r\n                    }"
          LOD: 0
          readDepth: 0
          PassId: 2
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: LIGHTMODE
            Value: ALWAYS
        DefinedKeywords: []
        KeywordGroups: []
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 17, guid: 0000000000000000e000000000000000, type: 0}
          passType: 0
          passId: 2
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        CompilationErrors: []
        HasDepthReader: 0
        Id: 2
        SubShaderIndex: 0
        SerializedObjectId: 2
        Tags:
        - Key: LIGHTMODE
          Value: DepthOnly
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: 512
      Shader: {fileID: 17, guid: 0000000000000000e000000000000000, type: 0}
      Tags: []
    Shader: {fileID: 17, guid: 0000000000000000e000000000000000, type: 0}
    ShaderPath: Library/unity default resources
    ShaderDefinedKeywords: []
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 17, guid: 0000000000000000e000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 5
      shader: {fileID: 17, guid: 0000000000000000e000000000000000, type: 0}
      passType: 0
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 5
      shader: {fileID: 17, guid: 0000000000000000e000000000000000, type: 0}
      passType: 0
      passId: 2
      subShaderIndex: 0
      upToDate: 0
      keywords: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2
            vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n   
            u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x =
            dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD5 = vec4(0.0,
            0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D
            _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump
            vec3 u_xlat16_1;\nmediump float u_xlat16_7;\nvoid main()\n{\n    u_xlat10_0.xyz
            = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat0.xyz = u_xlat10_0.xyz
            * _Color.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * _LightColor0.xyz;\n   
            u_xlat16_7 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_7
            = max(u_xlat16_7, 0.0);\n    SV_Target0.xyz = vec3(u_xlat16_7) * u_xlat16_1.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3
            vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n   
            u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x =
            dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD5 = vec4(0.0,
            0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nin
            highp vec3 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nmediump
            float u_xlat16_7;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex,
            vs_TEXCOORD0.xy).xyz;\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n   
            u_xlat16_1.xyz = u_xlat0.xyz * _LightColor0.xyz;\n    u_xlat16_7 = dot(vs_TEXCOORD1.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat16_7 = max(u_xlat16_7, 0.0);\n   
            SV_Target0.xyz = vec3(u_xlat16_7) * u_xlat16_1.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump
            vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www
            + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n   
            gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n   
            u_xlat16_2.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2.x = u_xlat0.x *
            u_xlat0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;\n   
            u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg,
            u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz
            = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n   
            u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg,
            u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    vs_TEXCOORD3.xyz = max(u_xlat16_2.xyz,
            vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D
            _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nmediump
            float u_xlat16_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nmediump vec3
            u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat16_0
            = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_0 =
            max(u_xlat16_0, 0.0);\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_3.xyz = u_xlat1.xyz
            * _LightColor0.xyz;\n    u_xlat16_2.xyz = u_xlat1.xyz * vs_TEXCOORD3.xyz;\n   
            SV_Target0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_0) + u_xlat16_2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec3
            vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nout
            highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4
            u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n   
            u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x =
            dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n   
            u_xlat16_2.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2.x = u_xlat0.x *
            u_xlat0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat0.yzzx * u_xlat0.xyzz;\n   
            u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg,
            u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_2.xyz
            = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n    u_xlat0.w = 1.0;\n   
            u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg,
            u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    vs_TEXCOORD3.xyz = max(u_xlat16_2.xyz,
            vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nin
            highp vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD3;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nvec3 u_xlat1;\nmediump
            vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvoid
            main()\n{\n    u_xlat16_0 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat16_0 = max(u_xlat16_0, 0.0);\n    u_xlat16_1.xyz = texture(_MainTex,
            vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n   
            u_xlat16_3.xyz = u_xlat1.xyz * _LightColor0.xyz;\n    u_xlat16_2.xyz
            = u_xlat1.xyz * vs_TEXCOORD3.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz
            * vec3(u_xlat16_0) + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        DefinedKeywords:
        - DIRECTIONAL
        - DIRLIGHTMAP_COMBINED
        - DYNAMICLIGHTMAP_ON
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - INSTANCING_ON
        - LIGHTMAP_ON
        - LIGHTMAP_SHADOW_MIXING
        - LIGHTPROBE_SH
        - SHADOWS_SCREEN
        - SHADOWS_SHADOWMASK
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - VERTEXLIGHT_ON
        - __
        KeywordGroups:
        - Keywords:
          - __
          - INSTANCING_ON
          hasDiscard: 1
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
          hasDiscard: 1
        - Keywords:
          - DIRECTIONAL
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SHADOWMASK
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DYNAMICLIGHTMAP_ON
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        KeywordsMinimalCardinality: 83
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
        - shaderCompilerPlatform: 9
          shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
        - shaderCompilerPlatform: 5
          shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
        - shaderCompilerPlatform: 9
          shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: LIGHTMODE
          Value: FORWARDBASE
        - Key: RenderType
          Value: Opaque
        - Key: SHADOWSUPPORT
          Value: true
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      - Shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2
            vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD4;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n   
            u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x =
            dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4 = vec4(0.0,
            0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D
            _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump
            vec3 u_xlat16_1;\nmediump float u_xlat16_7;\nvoid main()\n{\n    u_xlat10_0.xyz
            = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat0.xyz = u_xlat10_0.xyz
            * _Color.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * _LightColor0.xyz;\n   
            u_xlat16_7 = dot(vs_TEXCOORD1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_7
            = max(u_xlat16_7, 0.0);\n    SV_Target0.xyz = vec3(u_xlat16_7) * u_xlat16_1.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: RenderType
            Value: Opaque
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3
            vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD4;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n   
            u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x =
            dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4 = vec4(0.0,
            0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nin
            highp vec3 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nmediump
            float u_xlat16_7;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex,
            vs_TEXCOORD0.xy).xyz;\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n   
            u_xlat16_1.xyz = u_xlat0.xyz * _LightColor0.xyz;\n    u_xlat16_7 = dot(vs_TEXCOORD1.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat16_7 = max(u_xlat16_7, 0.0);\n   
            SV_Target0.xyz = vec3(u_xlat16_7) * u_xlat16_1.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          Tags:
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: RenderType
            Value: Opaque
        DefinedKeywords:
        - DIRECTIONAL
        - DIRECTIONAL_COOKIE
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - POINT
        - POINT_COOKIE
        - SPOT
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - __
        KeywordGroups:
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
          hasDiscard: 1
        - Keywords:
          - POINT
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          hasDiscard: 0
        - Keywords:
          - SPOT
          hasDiscard: 0
        - Keywords:
          - POINT_COOKIE
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL_COOKIE
          hasDiscard: 0
        KeywordsMinimalCardinality: 5
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
        - shaderCompilerPlatform: 9
          shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
        CompilationErrors: []
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 0
        SerializedObjectId: 1
        Tags:
        - Key: LIGHTMODE
          Value: FORWARDADD
        - Key: RenderType
          Value: Opaque
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
      Tags:
      - Key: RenderType
        Value: Opaque
    Shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - DIRECTIONAL
    - DIRLIGHTMAP_COMBINED
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - LIGHTMAP_ON
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - SHADOWS_SHADOWMASK
    - VERTEXLIGHT_ON
    - DIRECTIONAL_COOKIE
    - POINT
    - POINT_COOKIE
    - SPOT
    - DYNAMICLIGHTMAP_ON
    - INSTANCING_ON
    - LIGHTMAP_SHADOW_MIXING
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
    - shaderCompilerPlatform: 9
      shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
    - shaderCompilerPlatform: 5
      shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
    - shaderCompilerPlatform: 9
      shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
    - shaderCompilerPlatform: 5
      shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
    - shaderCompilerPlatform: 9
      shader: {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 200, guid: 0000000000000000f000000000000000, type: 0}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TintColor;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_1;\nvoid
            main()\n{\n    u_xlat0 = vs_COLOR0 + vs_COLOR0;\n    u_xlat0 = u_xlat0
            * _TintColor;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n   
            u_xlat0 = u_xlat0 * u_xlat10_1;\n    SV_Target0.w = u_xlat0.w;\n    SV_Target0.w
            = clamp(SV_Target0.w, 0.0, 1.0);\n    SV_Target0.xyz = u_xlat0.xyz;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin
            highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2
            vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TintColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp
            vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlat0 = vs_COLOR0
            + vs_COLOR0;\n    u_xlat0 = u_xlat0 * _TintColor;\n    u_xlat16_1 = texture(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0 * u_xlat16_1;\n    SV_Target0.w
            = u_xlat0.w;\n    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);\n   
            SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        DefinedKeywords:
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - SOFTPARTICLES_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - __
        KeywordGroups:
        - Keywords:
          - __
          - SOFTPARTICLES_ON
          hasDiscard: 1
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
          hasDiscard: 1
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 200, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 9
          shader: {fileID: 200, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 200, guid: 0000000000000000f000000000000000, type: 0}
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
    Shader: {fileID: 200, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - SOFTPARTICLES_ON
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 200, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 9
      shader: {fileID: 200, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 202, guid: 0000000000000000f000000000000000, type: 0}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat10_0 * vs_COLOR0;\n    SV_Target0.xyz
            = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin
            highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2
            vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvoid
            main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n   
            u_xlat0 = u_xlat16_0 * vs_COLOR0;\n    SV_Target0.xyz = u_xlat0.www *
            u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        DefinedKeywords:
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - SOFTPARTICLES_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - __
        KeywordGroups:
        - Keywords:
          - __
          - SOFTPARTICLES_ON
          hasDiscard: 1
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
          hasDiscard: 1
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 202, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 9
          shader: {fileID: 202, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 202, guid: 0000000000000000f000000000000000, type: 0}
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
    Shader: {fileID: 202, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - SOFTPARTICLES_ON
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 202, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 9
      shader: {fileID: 202, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tmediump vec4 unity_LightColor[8];\nuniform
            \tvec4 unity_LightPosition[8];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 glstate_lightmodel_ambient;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Emission;\nuniform
            \tmediump float _Shininess;\nuniform \tvec4 _MainTex_ST;\nattribute highp
            vec3 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp
            vec3 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec3 vs_COLOR1;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3
            u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump
            vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat
            u_xlat36;\nint u_xlati37;\nmediump float u_xlat16_43;\nmediump float
            u_xlat16_44;\nvoid main()\n{\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy
            * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz
            * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz *
            hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz *
            hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www
            + u_xlat1.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy
            * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz
            * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz
            + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz *
            hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;\n    u_xlat3.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx
            + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz *
            hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;\n    u_xlat3.xyz
            = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www
            + u_xlat3.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz
            = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz
            + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat5.xyz
            = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n   
            u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx
            + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz
            = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www
            + u_xlat5.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;\n    u_xlat6.xyz
            = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz
            + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;\n    u_xlat1.xyz
            = u_xlat1.xyz * in_POSITION0.yyy;\n    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;\n   
            u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz,
            in_NORMAL0.xyz);\n    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n   
            u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);\n    u_xlat36 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz
            = vec3(u_xlat36) * u_xlat1.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat16_7.xyz = _Color.xyz *
            glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_43 = _Shininess
            * 128.0;\n    u_xlat16_8.xyz = u_xlat16_7.xyz;\n    u_xlat16_9.x = float(0.0);\n   
            u_xlat16_9.y = float(0.0);\n    u_xlat16_9.z = float(0.0);\n    for(int
            u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n    {\n       
            u_xlat16_44 = dot(u_xlat1.xyz, unity_LightPosition[u_xlati_loop_1].xyz);\n       
            u_xlat16_44 = max(u_xlat16_44, 0.0);\n        u_xlat16_10.xyz = vec3(u_xlat16_44)
            * _Color.xyz;\n        u_xlat16_10.xyz = u_xlat16_10.xyz * unity_LightColor[u_xlati_loop_1].xyz;\n       
            u_xlatb2 = 0.0<u_xlat16_44;\n        if(u_xlatb2){\n            u_xlat16_11.xyz
            = (-u_xlat0.xyz) * vec3(u_xlat36) + unity_LightPosition[u_xlati_loop_1].xyz;\n           
            u_xlat16_44 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n            u_xlat16_44
            = inversesqrt(u_xlat16_44);\n            u_xlat16_11.xyz = vec3(u_xlat16_44)
            * u_xlat16_11.xyz;\n            u_xlat16_44 = dot(u_xlat1.xyz, u_xlat16_11.xyz);\n           
            u_xlat16_44 = max(u_xlat16_44, 0.0);\n            u_xlat16_44 = log2(u_xlat16_44);\n           
            u_xlat16_44 = u_xlat16_43 * u_xlat16_44;\n            u_xlat16_44 = exp2(u_xlat16_44);\n           
            u_xlat16_44 = min(u_xlat16_44, 1.0);\n            u_xlat16_44 = u_xlat16_44
            * 0.5;\n            u_xlat16_9.xyz = vec3(u_xlat16_44) * unity_LightColor[u_xlati_loop_1].xyz
            + u_xlat16_9.xyz;\n        }\n        u_xlat16_10.xyz = u_xlat16_10.xyz
            * vec3(0.5, 0.5, 0.5);\n        u_xlat16_10.xyz = min(u_xlat16_10.xyz,
            vec3(1.0, 1.0, 1.0));\n        u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;\n   
            }\n    vs_COLOR1.xyz = u_xlat16_9.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz
            = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_COLOR0.xyz = u_xlat16_8.xyz;\n   
            vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n   
            vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            mediump vec3 vs_COLOR1;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0
            gl_FragData[0]\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid
            main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n   
            u_xlat16_1.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz
            = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vs_COLOR1.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: LIGHTMODE
            Value: Vertex
          - Key: RenderType
            Value: Opaque
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tmediump vec4 unity_LightColor[8];\nuniform \tvec4 unity_LightPosition[8];\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tmediump vec4 glstate_lightmodel_ambient;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump
            vec4 _Emission;\nuniform \tmediump float _Shininess;\nuniform \tivec4
            unity_VertexLightParams;\nuniform \tvec4 _MainTex_ST;\nin highp vec3
            in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec3 in_TEXCOORD0;\nout
            mediump vec4 vs_COLOR0;\nout mediump vec3 vs_COLOR1;\nout highp vec2
            vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3
            u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump
            vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump
            vec3 u_xlat16_11;\nfloat u_xlat36;\nint u_xlati37;\nmediump float u_xlat16_43;\nmediump
            float u_xlat16_44;\nvoid main()\n{\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy
            * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz
            * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz *
            hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz *
            hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www
            + u_xlat1.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy
            * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz
            * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz
            + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz *
            hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;\n    u_xlat3.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx
            + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz *
            hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;\n    u_xlat3.xyz
            = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www
            + u_xlat3.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz
            = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz
            + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat5.xyz
            = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n   
            u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx
            + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz
            = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www
            + u_xlat5.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;\n    u_xlat6.xyz
            = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz
            + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz
            * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;\n    u_xlat1.xyz
            = u_xlat1.xyz * in_POSITION0.yyy;\n    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx
            + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;\n   
            u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz,
            in_NORMAL0.xyz);\n    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n   
            u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);\n    u_xlat36 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz
            = vec3(u_xlat36) * u_xlat1.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat16_7.xyz = _Color.xyz *
            glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_43 = _Shininess
            * 128.0;\n    u_xlat16_8.xyz = u_xlat16_7.xyz;\n    u_xlat16_9.x = float(0.0);\n   
            u_xlat16_9.y = float(0.0);\n    u_xlat16_9.z = float(0.0);\n    for(int
            u_xlati_loop_1 = 0 ; u_xlati_loop_1<unity_VertexLightParams.x ; u_xlati_loop_1++)\n   
            {\n        u_xlat16_44 = dot(u_xlat1.xyz, unity_LightPosition[u_xlati_loop_1].xyz);\n       
            u_xlat16_44 = max(u_xlat16_44, 0.0);\n        u_xlat16_10.xyz = vec3(u_xlat16_44)
            * _Color.xyz;\n        u_xlat16_10.xyz = u_xlat16_10.xyz * unity_LightColor[u_xlati_loop_1].xyz;\n       
            u_xlatb2 = 0.0<u_xlat16_44;\n        if(u_xlatb2){\n            u_xlat16_11.xyz
            = (-u_xlat0.xyz) * vec3(u_xlat36) + unity_LightPosition[u_xlati_loop_1].xyz;\n           
            u_xlat16_44 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n            u_xlat16_44
            = inversesqrt(u_xlat16_44);\n            u_xlat16_11.xyz = vec3(u_xlat16_44)
            * u_xlat16_11.xyz;\n            u_xlat16_44 = dot(u_xlat1.xyz, u_xlat16_11.xyz);\n           
            u_xlat16_44 = max(u_xlat16_44, 0.0);\n            u_xlat16_44 = log2(u_xlat16_44);\n           
            u_xlat16_44 = u_xlat16_43 * u_xlat16_44;\n            u_xlat16_44 = exp2(u_xlat16_44);\n           
            u_xlat16_44 = min(u_xlat16_44, 1.0);\n            u_xlat16_44 = u_xlat16_44
            * 0.5;\n            u_xlat16_9.xyz = vec3(u_xlat16_44) * unity_LightColor[u_xlati_loop_1].xyz
            + u_xlat16_9.xyz;\n        }\n        u_xlat16_10.xyz = u_xlat16_10.xyz
            * vec3(0.5, 0.5, 0.5);\n        u_xlat16_10.xyz = min(u_xlat16_10.xyz,
            vec3(1.0, 1.0, 1.0));\n        u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;\n   
            }\n    vs_COLOR1.xyz = u_xlat16_9.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz
            = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_COLOR0.xyz = u_xlat16_8.xyz;\n   
            vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n   
            vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin mediump vec3 vs_COLOR1;\nin highp vec2 vs_TEXCOORD0;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nmediump
            vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex,
            vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz;\n   
            SV_Target0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vs_COLOR1.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: LIGHTMODE
            Value: Vertex
          - Key: RenderType
            Value: Opaque
        DefinedKeywords:
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - POINT
        - SPOT
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _
        KeywordGroups:
        - Keywords:
          - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
          hasDiscard: 1
        - Keywords:
          - _
          - POINT
          - SPOT
          hasDiscard: 1
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
          passType: 1
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 9
          shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
          passType: 1
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: LIGHTMODE
          Value: Vertex
        - Key: RenderType
          Value: Opaque
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      - Shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_LightmapST;\nuniform
            \tvec4 unity_Lightmap_ST;\nuniform \tvec4 _MainTex_ST;\nattribute highp
            vec3 in_POSITION0;\nattribute highp vec3 in_TEXCOORD1;\nattribute highp
            vec3 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2
            vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy
            + unity_LightmapST.zw;\n    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_Lightmap_ST.xy
            + unity_Lightmap_ST.zw;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 unity_Lightmap_HDR;\nuniform \tmediump
            vec4 _Color;\nuniform lowp sampler2D _MainTex;\nuniform mediump sampler2D
            unity_Lightmap;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2
            vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp
            vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0
            = texture2D(unity_Lightmap, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = log2(u_xlat16_0.w);\n   
            u_xlat16_1.x = u_xlat16_1.x * unity_Lightmap_HDR.y;\n    u_xlat16_1.x
            = exp2(u_xlat16_1.x);\n    u_xlat16_1.x = u_xlat16_1.x * unity_Lightmap_HDR.x;\n   
            u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;\n    u_xlat16_1.xyz
            = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex,
            vs_TEXCOORD2.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat10_0.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: LIGHTMODE
            Value: VertexLM
          - Key: RenderType
            Value: Opaque
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 unity_LightmapST;\nuniform \tvec4 unity_Lightmap_ST;\nuniform
            \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin highp vec3 in_TEXCOORD1;\nin
            highp vec3 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec2
            vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid
            main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy
            + unity_LightmapST.zw;\n    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_Lightmap_ST.xy
            + unity_Lightmap_ST.zw;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 unity_Lightmap_HDR;\nuniform
            \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1)
            uniform mediump sampler2D unity_Lightmap;\nin highp vec2 vs_TEXCOORD0;\nin
            highp vec2 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump
            vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0
            = texture(unity_Lightmap, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = log2(u_xlat16_0.w);\n   
            u_xlat16_1.x = u_xlat16_1.x * unity_Lightmap_HDR.y;\n    u_xlat16_1.x
            = exp2(u_xlat16_1.x);\n    u_xlat16_1.x = u_xlat16_1.x * unity_Lightmap_HDR.x;\n   
            u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;\n    u_xlat16_1.xyz
            = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_0.xyz = texture(_MainTex,
            vs_TEXCOORD2.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_0.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: LIGHTMODE
            Value: VertexLM
          - Key: RenderType
            Value: Opaque
        DefinedKeywords:
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - __
        KeywordGroups:
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
          hasDiscard: 1
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
          passType: 2
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 9
          shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
          passType: 2
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        CompilationErrors: []
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 0
        SerializedObjectId: 1
        Tags:
        - Key: LIGHTMODE
          Value: VertexLM
        - Key: RenderType
          Value: Opaque
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      - Shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
        ShaderVariants: []
        DefinedKeywords:
        - INSTANCING_ON
        - SHADOWS_CUBE
        - SHADOWS_DEPTH
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - __
        KeywordGroups:
        - Keywords:
          - __
          - INSTANCING_ON
          hasDiscard: 1
        - Keywords:
          - SHADOWS_DEPTH
          hasDiscard: 0
        - Keywords:
          - SHADOWS_CUBE
          hasDiscard: 0
        KeywordsMinimalCardinality: 2
        ContainsInvalidVariant: 0
        VariantStructures: []
        CompilationErrors: []
        HasDepthReader: 0
        Id: 2
        SubShaderIndex: 0
        SerializedObjectId: 2
        Tags:
        - Key: LIGHTMODE
          Value: SHADOWCASTER
        - Key: RenderType
          Value: Opaque
        - Key: SHADOWSUPPORT
          Value: true
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
      Tags:
      - Key: RenderType
        Value: Opaque
    Shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - POINT
    - SPOT
    - SHADOWS_DEPTH
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - _
    - __
    - INSTANCING_ON
    - SHADOWS_CUBE
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
      passType: 1
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 9
      shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
      passType: 1
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 5
      shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
      passType: 2
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 9
      shader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
      passType: 2
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 10721, guid: 0000000000000000f000000000000000, type: 0}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec3 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec3 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            vs_COLOR0 = in_COLOR0;\n    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nlowp vec4
            u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n   
            SV_Target0 = u_xlat10_0 * vs_COLOR0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin
            highp vec3 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2
            vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_COLOR0
            = in_COLOR0;\n    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n   
            u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    SV_Target0 = u_xlat16_0
            * vs_COLOR0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        DefinedKeywords:
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _
        KeywordGroups:
        - Keywords:
          - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
          hasDiscard: 1
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 10721, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 9
          shader: {fileID: 10721, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 10721, guid: 0000000000000000f000000000000000, type: 0}
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
    Shader: {fileID: 10721, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - _
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 10721, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 9
      shader: {fileID: 10721, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 10723, guid: 0000000000000000f000000000000000, type: 0}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec3 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec3 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nhighp  vec4 phase0_Output0_1;\nvarying highp vec2
            vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_COLOR0
            = in_COLOR0;\n    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);\n    phase0_Output0_1
            = in_TEXCOORD0.xyxy * _MainTex_ST.xyxy + _MainTex_ST.zwzw;\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\nvs_TEXCOORD0 = phase0_Output0_1.xy;\nvs_TEXCOORD1
            = phase0_Output0_1.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nmediump
            vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvoid
            main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n   
            u_xlat16_1 = u_xlat10_0.w * vs_COLOR0.w;\n    u_xlat16_0 = u_xlat10_0
            * vs_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);\n    SV_Target0 = vec4(u_xlat16_1)
            * u_xlat16_0 + vec4(1.0, 1.0, 1.0, 1.0);\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin
            highp vec3 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2
            vs_TEXCOORD0;\nhighp  vec4 phase0_Output0_1;\nout highp vec2 vs_TEXCOORD1;\nvec4
            u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_COLOR0 = in_COLOR0;\n   
            vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);\n    phase0_Output0_1 = in_TEXCOORD0.xyxy
            * _MainTex_ST.xyxy + _MainTex_ST.zwzw;\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\nvs_TEXCOORD0
            = phase0_Output0_1.xy;\nvs_TEXCOORD1 = phase0_Output0_1.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nmediump
            float u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat16_0.w * vs_COLOR0.w;\n   
            u_xlat16_0 = u_xlat16_0 * vs_COLOR0 + vec4(-1.0, -1.0, -1.0, -1.0);\n   
            SV_Target0 = vec4(u_xlat16_1) * u_xlat16_0 + vec4(1.0, 1.0, 1.0, 1.0);\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        DefinedKeywords:
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _
        KeywordGroups:
        - Keywords:
          - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
          hasDiscard: 1
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 10723, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 9
          shader: {fileID: 10723, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 10723, guid: 0000000000000000f000000000000000, type: 0}
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
    Shader: {fileID: 10723, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - _
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 10723, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 9
      shader: {fileID: 10723, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
        ShaderVariants: []
        DefinedKeywords: []
        KeywordGroups: []
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures: []
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: LIGHTMODE
          Value: GRABPASS
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: _GrabTexture
        PlatformMask: 512
      - Shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
        ShaderVariants: []
        DefinedKeywords:
        - INSTANCING_ON
        - PROCEDURAL_INSTANCING_ON
        - SHADOWS_CUBE
        - SHADOWS_DEPTH
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _ALPHABLEND_ON
        - _ALPHAMODULATE_ON
        - _ALPHAPREMULTIPLY_ON
        - _ALPHATEST_ON
        - _REQUIRE_UV2
        - __
        - _
        KeywordGroups:
        - Keywords:
          - __
          - INSTANCING_ON
          - PROCEDURAL_INSTANCING_ON
          hasDiscard: 1
        - Keywords:
          - _
          - _ALPHATEST_ON
          - _ALPHABLEND_ON
          - _ALPHAPREMULTIPLY_ON
          - _ALPHAMODULATE_ON
          hasDiscard: 1
        - Keywords:
          - _
          - _REQUIRE_UV2
          hasDiscard: 1
        - Keywords:
          - SHADOWS_DEPTH
          hasDiscard: 0
        - Keywords:
          - SHADOWS_CUBE
          hasDiscard: 0
        KeywordsMinimalCardinality: 2
        ContainsInvalidVariant: 0
        VariantStructures: []
        CompilationErrors: []
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 0
        SerializedObjectId: 1
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: LIGHTMODE
          Value: SHADOWCASTER
        - Key: PerformanceChecks
          Value: False
        - Key: PreviewType
          Value: Plane
        - Key: RenderType
          Value: Opaque
        - Key: SHADOWSUPPORT
          Value: true
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      - Shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nvarying
            highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid
            main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat0.xyz = u_xlat16_1.xyz
            * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 4
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PerformanceChecks
            Value: False
          - Key: PreviewType
            Value: Plane
          - Key: RenderType
            Value: Opaque
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin
            highp vec2 in_TEXCOORD0;\nout highp vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD1;\nvec4
            u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _MainTex;\nin highp vec4 vs_COLOR0;\nin highp
            vec2 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n   
            u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_1.xyz
            = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;\n   
            SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 4
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PerformanceChecks
            Value: False
          - Key: PreviewType
            Value: Plane
          - Key: RenderType
            Value: Opaque
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nvarying
            highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvoid
            main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy);\n   
            u_xlat16_0 = u_xlat10_0 * _Color;\n    u_xlat0 = u_xlat16_0 * vs_COLOR0;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 4
          SubShaderIndex: 0
          Keywords:
          - _ALPHABLEND_ON
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PerformanceChecks
            Value: False
          - Key: PreviewType
            Value: Plane
          - Key: RenderType
            Value: Opaque
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin
            highp vec2 in_TEXCOORD0;\nout highp vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD1;\nvec4
            u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _MainTex;\nin highp vec4 vs_COLOR0;\nin highp
            vec2 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 =
            texture(_MainTex, vs_TEXCOORD1.xy);\n    u_xlat16_0 = u_xlat16_0 * _Color;\n   
            u_xlat0 = u_xlat16_0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 4
          SubShaderIndex: 0
          Keywords:
          - _ALPHABLEND_ON
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PerformanceChecks
            Value: False
          - Key: PreviewType
            Value: Plane
          - Key: RenderType
            Value: Opaque
        DefinedKeywords:
        - EFFECT_BUMP
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - INSTANCING_ON
        - PROCEDURAL_INSTANCING_ON
        - SOFTPARTICLES_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _ALPHABLEND_ON
        - _ALPHAMODULATE_ON
        - _ALPHAPREMULTIPLY_ON
        - _ALPHATEST_ON
        - _COLORADDSUBDIFF_ON
        - _COLORCOLOR_ON
        - _COLOROVERLAY_ON
        - _EMISSION
        - _FADING_ON
        - _NORMALMAP
        - _REQUIRE_UV2
        - __
        - _
        KeywordGroups:
        - Keywords:
          - __
          - SOFTPARTICLES_ON
          hasDiscard: 1
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
          hasDiscard: 1
        - Keywords:
          - __
          - INSTANCING_ON
          - PROCEDURAL_INSTANCING_ON
          hasDiscard: 1
        - Keywords:
          - _
          - _NORMALMAP
          hasDiscard: 1
        - Keywords:
          - _
          - _FADING_ON
          hasDiscard: 1
        - Keywords:
          - _
          - _REQUIRE_UV2
          hasDiscard: 1
        - Keywords:
          - _
          - EFFECT_BUMP
          hasDiscard: 1
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 4
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 9
          shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 4
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 5
          shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 4
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - _ALPHABLEND_ON
        - shaderCompilerPlatform: 9
          shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 4
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - _ALPHABLEND_ON
        CompilationErrors: []
        HasDepthReader: 0
        Id: 4
        SubShaderIndex: 0
        SerializedObjectId: 4
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PerformanceChecks
          Value: False
        - Key: PreviewType
          Value: Plane
        - Key: RenderType
          Value: Opaque
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PerformanceChecks
        Value: False
      - Key: PreviewType
        Value: Plane
      - Key: RenderType
        Value: Opaque
    Shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - SHADOWS_DEPTH
    - _ALPHABLEND_ON
    - _ALPHAMODULATE_ON
    - _ALPHAPREMULTIPLY_ON
    - _ALPHATEST_ON
    - _REQUIRE_UV2
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - _COLORADDSUBDIFF_ON
    - _COLORCOLOR_ON
    - _COLOROVERLAY_ON
    - _EMISSION
    - _FADING_ON
    - _NORMALMAP
    - INSTANCING_ON
    - PROCEDURAL_INSTANCING_ON
    - SHADOWS_CUBE
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    - _
    - EFFECT_BUMP
    - SOFTPARTICLES_ON
    fallbackShader: {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 4
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 9
      shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 4
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 5
      shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 4
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - _ALPHABLEND_ON
    - shaderCompilerPlatform: 9
      shader: {fileID: 211, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 4
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - _ALPHABLEND_ON
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform
            \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nattribute
            highp vec4 in_POSITION0;\nvarying mediump float vs_TEXCOORD0;\nvarying
            mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump
            vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3
            u_xlat5;\nmediump vec3 u_xlat16_5;\nvec4 u_xlat6;\nvec3 u_xlat7;\nfloat
            u_xlat8;\nvec2 u_xlat14;\nfloat u_xlat16;\nfloat u_xlat24;\nfloat u_xlat26;\nfloat
            u_xlat28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat16_1
            = log2(vec4(_SkyTint.x, _SkyTint.y, _SkyTint.z, _AtmosphereThickness));\n   
            u_xlat16_1 = u_xlat16_1 * vec4(0.454545468, 0.454545468, 0.454545468,
            2.5);\n    u_xlat16_1 = exp2(u_xlat16_1);\n    u_xlat2.xyz = (-u_xlat16_1.xyz)
            + vec3(1.0, 1.0, 1.0);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(0.300000012,
            0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n   
            u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz
            * u_xlat2.xyz;\n    u_xlat2.xyz = vec3(1.0, 1.0, 1.0) / u_xlat2.xyz;\n   
            u_xlat16_3.xy = u_xlat16_1.ww * vec2(0.049999997, 0.0314159282);\n   
            u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n   
            u_xlat4.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n    u_xlatb0 = u_xlat4.y>=0.0;\n   
            if(u_xlatb0){\n        u_xlat0.x = u_xlat4.y * u_xlat4.y + 0.0506249666;\n       
            u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat24
            + u_xlat0.x;\n        u_xlat8 = (-u_xlat0.y) * u_xlat24 + 1.0;\n       
            u_xlat16 = u_xlat8 * 5.25 + -6.80000019;\n        u_xlat16 = u_xlat8
            * u_xlat16 + 3.82999992;\n        u_xlat16 = u_xlat8 * u_xlat16 + 0.458999991;\n       
            u_xlat8 = u_xlat8 * u_xlat16 + -0.00286999997;\n        u_xlat8 = u_xlat8
            * 1.44269502;\n        u_xlat0.y = exp2(u_xlat8);\n        u_xlat0.xyz
            = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat5.xyz =
            u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat24 = dot(u_xlat5.xyz,
            u_xlat5.xyz);\n        u_xlat24 = sqrt(u_xlat24);\n        u_xlat26 =
            (-u_xlat24) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat24;\n        u_xlat29
            = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat24 = u_xlat29 / u_xlat24;\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat29 = u_xlat28 * 5.25 + -6.80000019;\n       
            u_xlat29 = u_xlat28 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat28
            * u_xlat29 + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat29 + -0.00286999997;\n       
            u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n       
            u_xlat24 = (-u_xlat24) + 1.0;\n        u_xlat29 = u_xlat24 * 5.25 + -6.80000019;\n       
            u_xlat29 = u_xlat24 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat24
            * u_xlat29 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat29 + -0.00286999997;\n       
            u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n       
            u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat28 * 0.25 + (-u_xlat24);\n       
            u_xlat24 = u_xlat26 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24,
            0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat6.xyz =
            u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat7.xyz = (-vec3(u_xlat24)) * u_xlat6.xyz;\n        u_xlat7.xyz =
            u_xlat7.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat7.xyz
            = exp2(u_xlat7.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat26;\n       
            u_xlat5.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat5.xyz;\n        u_xlat0.x
            = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat26 = (-u_xlat0.x) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat0.x;\n        u_xlat5.x
            = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat0.x = u_xlat5.x / u_xlat0.x;\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat5.x = u_xlat28 * 5.25 +
            -6.80000019;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 3.82999992;\n       
            u_xlat5.x = u_xlat28 * u_xlat5.x + 0.458999991;\n        u_xlat28 = u_xlat28
            * u_xlat5.x + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat5.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat0.x
            * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat5.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat28 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat26 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat5.xyz = u_xlat6.xyz * (-u_xlat0.xxx);\n       
            u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat5.xyz = exp2(u_xlat5.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat26;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat7.xyz
            * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat5.xyz = u_xlat2.xyz *
            u_xlat16_3.xxx;\n        u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat26 = min(u_xlat4.y, -0.00100000005);\n       
            u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat6.xyz = vec3(u_xlat26)
            * u_xlat4.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat28 = dot((-u_xlat4.xyz),
            u_xlat6.xyz);\n        u_xlat6.x = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat14.x = u_xlat28 * 5.25 +
            -6.80000019;\n        u_xlat14.x = u_xlat28 * u_xlat14.x + 3.82999992;\n       
            u_xlat14.x = u_xlat28 * u_xlat14.x + 0.458999991;\n        u_xlat28 =
            u_xlat28 * u_xlat14.x + -0.00286999997;\n        u_xlat28 = u_xlat28
            * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat6.x
            = (-u_xlat6.x) + 1.0;\n        u_xlat14.x = u_xlat6.x * 5.25 + -6.80000019;\n       
            u_xlat14.x = u_xlat6.x * u_xlat14.x + 3.82999992;\n        u_xlat14.x
            = u_xlat6.x * u_xlat14.x + 0.458999991;\n        u_xlat6.x = u_xlat6.x
            * u_xlat14.x + -0.00286999997;\n        u_xlat6.x = u_xlat6.x * 1.44269502;\n       
            u_xlat6.x = exp2(u_xlat6.x);\n        u_xlat14.xy = vec2(u_xlat28) *
            vec2(0.25, 0.249900013);\n        u_xlat28 = u_xlat6.x * 0.25 + u_xlat14.x;\n       
            u_xlat6.xy = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat7.xyz =
            u_xlat4.xyz * u_xlat6.xxx;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat7.xyz,
            u_xlat7.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 =
            (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = u_xlat26 * u_xlat28 +
            (-u_xlat14.y);\n        u_xlat28 = max(u_xlat28, 0.0);\n        u_xlat28
            = min(u_xlat28, 50.0);\n        u_xlat6.xzw = u_xlat2.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xzw
            = (-vec3(u_xlat28)) * u_xlat6.xzw;\n        u_xlat6.xzw = u_xlat6.xzw
            * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat6.xzw);\n       
            u_xlat26 = u_xlat6.y * u_xlat26;\n        u_xlat6.xyz = u_xlat0.xyz *
            vec3(u_xlat26);\n        u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx +
            vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat5.xyz
            = u_xlat2.xyz * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat2.x = u_xlat4.y * -50.0;\n   
            u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z)
            * u_xlat16_0.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD1.xyz = u_xlat16_3.xyz
            * vec3(_Exposure);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz,
            (-u_xlat4.xyz));\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n   
            u_xlat16_3.x = u_xlat16_3.x * 0.75 + 0.75;\n    u_xlat16_3.xyz = u_xlat16_3.xxx
            * u_xlat16_5.xyz;\n    vs_TEXCOORD2.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n   
            vs_TEXCOORD0 = u_xlat2.x;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nvarying mediump float vs_TEXCOORD0;\nvarying mediump vec3
            vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nmediump float u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid
            main()\n{\n    u_xlat16_0 = vs_TEXCOORD0;\n    u_xlat16_0 = clamp(u_xlat16_0,
            0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n   
            SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_NONE
          Tags:
          - Key: PreviewType
            Value: Skybox
          - Key: QUEUE
            Value: Background
          - Key: RenderType
            Value: Background
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump float _Exposure;\nuniform
            \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform
            \tmediump float _AtmosphereThickness;\nin highp vec4 in_POSITION0;\nout
            mediump float vs_TEXCOORD0;\nout mediump vec3 vs_TEXCOORD1;\nout mediump
            vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3
            u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec4 u_xlat6;\nvec3
            u_xlat7;\nfloat u_xlat8;\nvec2 u_xlat14;\nfloat u_xlat16;\nfloat u_xlat24;\nfloat
            u_xlat26;\nfloat u_xlat28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat16_1 = log2(vec4(_SkyTint.x, _SkyTint.y,
            _SkyTint.z, _AtmosphereThickness));\n    u_xlat16_1 = u_xlat16_1 * vec4(0.454545468,
            0.454545468, 0.454545468, 2.5);\n    u_xlat16_1 = exp2(u_xlat16_1);\n   
            u_xlat2.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat2.xyz
            = u_xlat2.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5,
            0.419999987, 0.324999988);\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n   
            u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = vec3(1.0,
            1.0, 1.0) / u_xlat2.xyz;\n    u_xlat16_3.xy = u_xlat16_1.ww * vec2(0.049999997,
            0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24
            = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n   
            u_xlatb0 = u_xlat4.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat4.y
            * u_xlat4.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n        u_xlat8 = (-u_xlat0.y)
            * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8 * 5.25 + -6.80000019;\n       
            u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n        u_xlat16 = u_xlat8
            * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8 * u_xlat16 + -0.00286999997;\n       
            u_xlat8 = u_xlat8 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat8);\n       
            u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat5.xyz
            = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat24 = dot(u_xlat5.xyz,
            u_xlat5.xyz);\n        u_xlat24 = sqrt(u_xlat24);\n        u_xlat26 =
            (-u_xlat24) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat24;\n        u_xlat29
            = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat24 = u_xlat29 / u_xlat24;\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat29 = u_xlat28 * 5.25 + -6.80000019;\n       
            u_xlat29 = u_xlat28 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat28
            * u_xlat29 + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat29 + -0.00286999997;\n       
            u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n       
            u_xlat24 = (-u_xlat24) + 1.0;\n        u_xlat29 = u_xlat24 * 5.25 + -6.80000019;\n       
            u_xlat29 = u_xlat24 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat24
            * u_xlat29 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat29 + -0.00286999997;\n       
            u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n       
            u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat28 * 0.25 + (-u_xlat24);\n       
            u_xlat24 = u_xlat26 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24,
            0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat6.xyz =
            u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat7.xyz = (-vec3(u_xlat24)) * u_xlat6.xyz;\n        u_xlat7.xyz =
            u_xlat7.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat7.xyz
            = exp2(u_xlat7.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat26;\n       
            u_xlat5.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat5.xyz;\n        u_xlat0.x
            = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat26 = (-u_xlat0.x) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat0.x;\n        u_xlat5.x
            = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat0.x = u_xlat5.x / u_xlat0.x;\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat5.x = u_xlat28 * 5.25 +
            -6.80000019;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 3.82999992;\n       
            u_xlat5.x = u_xlat28 * u_xlat5.x + 0.458999991;\n        u_xlat28 = u_xlat28
            * u_xlat5.x + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat5.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat0.x
            * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat5.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat28 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat26 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat5.xyz = u_xlat6.xyz * (-u_xlat0.xxx);\n       
            u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat5.xyz = exp2(u_xlat5.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat26;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat7.xyz
            * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat5.xyz = u_xlat2.xyz *
            u_xlat16_3.xxx;\n        u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat26 = min(u_xlat4.y, -0.00100000005);\n       
            u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat6.xyz = vec3(u_xlat26)
            * u_xlat4.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat28 = dot((-u_xlat4.xyz),
            u_xlat6.xyz);\n        u_xlat6.x = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat14.x = u_xlat28 * 5.25 +
            -6.80000019;\n        u_xlat14.x = u_xlat28 * u_xlat14.x + 3.82999992;\n       
            u_xlat14.x = u_xlat28 * u_xlat14.x + 0.458999991;\n        u_xlat28 =
            u_xlat28 * u_xlat14.x + -0.00286999997;\n        u_xlat28 = u_xlat28
            * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat6.x
            = (-u_xlat6.x) + 1.0;\n        u_xlat14.x = u_xlat6.x * 5.25 + -6.80000019;\n       
            u_xlat14.x = u_xlat6.x * u_xlat14.x + 3.82999992;\n        u_xlat14.x
            = u_xlat6.x * u_xlat14.x + 0.458999991;\n        u_xlat6.x = u_xlat6.x
            * u_xlat14.x + -0.00286999997;\n        u_xlat6.x = u_xlat6.x * 1.44269502;\n       
            u_xlat6.x = exp2(u_xlat6.x);\n        u_xlat14.xy = vec2(u_xlat28) *
            vec2(0.25, 0.249900013);\n        u_xlat28 = u_xlat6.x * 0.25 + u_xlat14.x;\n       
            u_xlat6.xy = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat7.xyz =
            u_xlat4.xyz * u_xlat6.xxx;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat7.xyz,
            u_xlat7.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 =
            (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = u_xlat26 * u_xlat28 +
            (-u_xlat14.y);\n        u_xlat28 = max(u_xlat28, 0.0);\n        u_xlat28
            = min(u_xlat28, 50.0);\n        u_xlat6.xzw = u_xlat2.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xzw
            = (-vec3(u_xlat28)) * u_xlat6.xzw;\n        u_xlat6.xzw = u_xlat6.xzw
            * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat6.xzw);\n       
            u_xlat26 = u_xlat6.y * u_xlat26;\n        u_xlat6.xyz = u_xlat0.xyz *
            vec3(u_xlat26);\n        u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx +
            vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat5.xyz
            = u_xlat2.xyz * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat2.x = u_xlat4.y * -50.0;\n   
            u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z)
            * u_xlat16_0.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD1.xyz = u_xlat16_3.xyz
            * vec3(_Exposure);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz,
            (-u_xlat4.xyz));\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n   
            u_xlat16_3.x = u_xlat16_3.x * 0.75 + 0.75;\n    u_xlat16_3.xyz = u_xlat16_3.xxx
            * u_xlat16_5.xyz;\n    vs_TEXCOORD2.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n   
            vs_TEXCOORD0 = u_xlat2.x;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\nin mediump float vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin
            mediump vec3 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump
            float u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0
            = vs_TEXCOORD0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_1.xyz
            = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    SV_Target0.xyz = vec3(u_xlat16_0)
            * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_NONE
          Tags:
          - Key: PreviewType
            Value: Skybox
          - Key: QUEUE
            Value: Background
          - Key: RenderType
            Value: Background
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform
            \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform
            \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying
            mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump
            vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3
            u_xlat5;\nmediump vec3 u_xlat16_5;\nvec4 u_xlat6;\nvec3 u_xlat7;\nfloat
            u_xlat8;\nmediump vec3 u_xlat16_11;\nvec2 u_xlat14;\nfloat u_xlat16;\nfloat
            u_xlat24;\nfloat u_xlat26;\nfloat u_xlat28;\nfloat u_xlat29;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat16_1 = log2(vec4(_SkyTint.x, _SkyTint.y,
            _SkyTint.z, _AtmosphereThickness));\n    u_xlat16_1 = u_xlat16_1 * vec4(0.454545468,
            0.454545468, 0.454545468, 2.5);\n    u_xlat16_1 = exp2(u_xlat16_1);\n   
            u_xlat2.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat2.xyz
            = u_xlat2.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5,
            0.419999987, 0.324999988);\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n   
            u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = vec3(1.0,
            1.0, 1.0) / u_xlat2.xyz;\n    u_xlat16_3.xy = u_xlat16_1.ww * vec2(0.049999997,
            0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24
            = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n   
            u_xlatb0 = u_xlat4.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat4.y
            * u_xlat4.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n        u_xlat8 = (-u_xlat0.y)
            * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8 * 5.25 + -6.80000019;\n       
            u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n        u_xlat16 = u_xlat8
            * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8 * u_xlat16 + -0.00286999997;\n       
            u_xlat8 = u_xlat8 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat8);\n       
            u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat5.xyz
            = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat24 = dot(u_xlat5.xyz,
            u_xlat5.xyz);\n        u_xlat24 = sqrt(u_xlat24);\n        u_xlat26 =
            (-u_xlat24) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat24;\n        u_xlat29
            = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat24 = u_xlat29 / u_xlat24;\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat29 = u_xlat28 * 5.25 + -6.80000019;\n       
            u_xlat29 = u_xlat28 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat28
            * u_xlat29 + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat29 + -0.00286999997;\n       
            u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n       
            u_xlat24 = (-u_xlat24) + 1.0;\n        u_xlat29 = u_xlat24 * 5.25 + -6.80000019;\n       
            u_xlat29 = u_xlat24 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat24
            * u_xlat29 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat29 + -0.00286999997;\n       
            u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n       
            u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat28 * 0.25 + (-u_xlat24);\n       
            u_xlat24 = u_xlat26 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24,
            0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat6.xyz =
            u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat7.xyz = (-vec3(u_xlat24)) * u_xlat6.xyz;\n        u_xlat7.xyz =
            u_xlat7.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat7.xyz
            = exp2(u_xlat7.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat26;\n       
            u_xlat5.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat5.xyz;\n        u_xlat0.x
            = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat26 = (-u_xlat0.x) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat0.x;\n        u_xlat5.x
            = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat0.x = u_xlat5.x / u_xlat0.x;\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat5.x = u_xlat28 * 5.25 +
            -6.80000019;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 3.82999992;\n       
            u_xlat5.x = u_xlat28 * u_xlat5.x + 0.458999991;\n        u_xlat28 = u_xlat28
            * u_xlat5.x + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat5.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat0.x
            * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat5.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat28 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat26 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat5.xyz = u_xlat6.xyz * (-u_xlat0.xxx);\n       
            u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat5.xyz = exp2(u_xlat5.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat26;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat7.xyz
            * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat5.xyz = u_xlat2.xyz *
            u_xlat16_3.xxx;\n        u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat26 = min(u_xlat4.y, -0.00100000005);\n       
            u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat6.xyz = vec3(u_xlat26)
            * u_xlat4.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat28 = dot((-u_xlat4.xyz),
            u_xlat6.xyz);\n        u_xlat6.x = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat14.x = u_xlat28 * 5.25 +
            -6.80000019;\n        u_xlat14.x = u_xlat28 * u_xlat14.x + 3.82999992;\n       
            u_xlat14.x = u_xlat28 * u_xlat14.x + 0.458999991;\n        u_xlat28 =
            u_xlat28 * u_xlat14.x + -0.00286999997;\n        u_xlat28 = u_xlat28
            * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat6.x
            = (-u_xlat6.x) + 1.0;\n        u_xlat14.x = u_xlat6.x * 5.25 + -6.80000019;\n       
            u_xlat14.x = u_xlat6.x * u_xlat14.x + 3.82999992;\n        u_xlat14.x
            = u_xlat6.x * u_xlat14.x + 0.458999991;\n        u_xlat6.x = u_xlat6.x
            * u_xlat14.x + -0.00286999997;\n        u_xlat6.x = u_xlat6.x * 1.44269502;\n       
            u_xlat6.x = exp2(u_xlat6.x);\n        u_xlat14.xy = vec2(u_xlat28) *
            vec2(0.25, 0.249900013);\n        u_xlat28 = u_xlat6.x * 0.25 + u_xlat14.x;\n       
            u_xlat6.xy = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat7.xyz =
            u_xlat4.xyz * u_xlat6.xxx;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat7.xyz,
            u_xlat7.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 =
            (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = u_xlat26 * u_xlat28 +
            (-u_xlat14.y);\n        u_xlat28 = max(u_xlat28, 0.0);\n        u_xlat28
            = min(u_xlat28, 50.0);\n        u_xlat6.xzw = u_xlat2.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xzw
            = (-vec3(u_xlat28)) * u_xlat6.xzw;\n        u_xlat6.xzw = u_xlat6.xzw
            * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat6.xzw);\n       
            u_xlat26 = u_xlat6.y * u_xlat26;\n        u_xlat6.xyz = u_xlat0.xyz *
            vec3(u_xlat26);\n        u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx +
            vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat5.xyz
            = u_xlat2.xyz * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x,
            _GroundColor.y, _GroundColor.z) * u_xlat16_0.xyz + u_xlat16_5.xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x
            = dot(_WorldSpaceLightPos0.xyz, (-u_xlat4.xyz));\n    u_xlat16_3.x =
            u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * 0.75
            + 0.75;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_5.xyz;\n    vs_TEXCOORD2.xyz
            = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x = dot(_LightColor0.xyz,
            _LightColor0.xyz);\n    u_xlat16_3.x = sqrt(u_xlat16_3.x);\n    u_xlat16_3.x
            = max(u_xlat16_3.x, 0.25);\n    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);\n   
            u_xlat16_11.xyz = u_xlat16_0.xyz * vec3(8000.0, 8000.0, 8000.0);\n   
            u_xlat16_11.xyz = clamp(u_xlat16_11.xyz, 0.0, 1.0);\n    u_xlat16_11.xyz
            = u_xlat16_11.xyz * _LightColor0.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz
            * vec3(27.0, 27.0, 27.0);\n    vs_TEXCOORD3.xyz = u_xlat16_11.xyz / u_xlat16_3.xxx;\n   
            vs_TEXCOORD0.xyz = (-u_xlat4.xyz);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float
            _SunSize;\nvarying mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define
            SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nbool
            u_xlatb2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat16_0.xyz
            = vs_TEXCOORD0.xyz + _WorldSpaceLightPos0.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz,
            u_xlat16_0.xyz);\n    u_xlat16_0.x = sqrt(u_xlat16_0.x);\n    u_xlat16_3.x
            = float(1.0) / _SunSize;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x;\n   
            u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_0.x
            * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x
            = (-u_xlat16_3.x) * u_xlat16_0.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x
            * u_xlat16_0.x;\n    u_xlat16_3.x = vs_TEXCOORD0.y * 50.0;\n    u_xlat16_3.x
            = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz
            + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_1.xyz
            + vs_TEXCOORD2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx
            + u_xlat16_3.xyz;\n    u_xlatb2 = vs_TEXCOORD0.y<0.0;\n    SV_Target0.xyz
            = (bool(u_xlatb2)) ? u_xlat16_1.xyz : u_xlat16_3.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_SIMPLE
          Tags:
          - Key: PreviewType
            Value: Skybox
          - Key: QUEUE
            Value: Background
          - Key: RenderType
            Value: Background
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform
            \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nin
            highp vec4 in_POSITION0;\nout mediump vec3 vs_TEXCOORD0;\nout mediump
            vec3 vs_TEXCOORD1;\nout mediump vec3 vs_TEXCOORD2;\nout mediump vec3
            vs_TEXCOORD3;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3
            u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec4 u_xlat6;\nvec3
            u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_11;\nvec2 u_xlat14;\nfloat
            u_xlat16;\nfloat u_xlat24;\nfloat u_xlat26;\nfloat u_xlat28;\nfloat u_xlat29;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat16_1 = log2(vec4(_SkyTint.x, _SkyTint.y,
            _SkyTint.z, _AtmosphereThickness));\n    u_xlat16_1 = u_xlat16_1 * vec4(0.454545468,
            0.454545468, 0.454545468, 2.5);\n    u_xlat16_1 = exp2(u_xlat16_1);\n   
            u_xlat2.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat2.xyz
            = u_xlat2.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5,
            0.419999987, 0.324999988);\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n   
            u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = vec3(1.0,
            1.0, 1.0) / u_xlat2.xyz;\n    u_xlat16_3.xy = u_xlat16_1.ww * vec2(0.049999997,
            0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24
            = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n   
            u_xlatb0 = u_xlat4.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat4.y
            * u_xlat4.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n        u_xlat8 = (-u_xlat0.y)
            * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8 * 5.25 + -6.80000019;\n       
            u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n        u_xlat16 = u_xlat8
            * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8 * u_xlat16 + -0.00286999997;\n       
            u_xlat8 = u_xlat8 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat8);\n       
            u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat5.xyz
            = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat24 = dot(u_xlat5.xyz,
            u_xlat5.xyz);\n        u_xlat24 = sqrt(u_xlat24);\n        u_xlat26 =
            (-u_xlat24) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat24;\n        u_xlat29
            = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat24 = u_xlat29 / u_xlat24;\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat29 = u_xlat28 * 5.25 + -6.80000019;\n       
            u_xlat29 = u_xlat28 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat28
            * u_xlat29 + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat29 + -0.00286999997;\n       
            u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n       
            u_xlat24 = (-u_xlat24) + 1.0;\n        u_xlat29 = u_xlat24 * 5.25 + -6.80000019;\n       
            u_xlat29 = u_xlat24 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat24
            * u_xlat29 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat29 + -0.00286999997;\n       
            u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n       
            u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat28 * 0.25 + (-u_xlat24);\n       
            u_xlat24 = u_xlat26 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24,
            0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat6.xyz =
            u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat7.xyz = (-vec3(u_xlat24)) * u_xlat6.xyz;\n        u_xlat7.xyz =
            u_xlat7.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat7.xyz
            = exp2(u_xlat7.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat26;\n       
            u_xlat5.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat5.xyz;\n        u_xlat0.x
            = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat26 = (-u_xlat0.x) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat0.x;\n        u_xlat5.x
            = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat0.x = u_xlat5.x / u_xlat0.x;\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat5.x = u_xlat28 * 5.25 +
            -6.80000019;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 3.82999992;\n       
            u_xlat5.x = u_xlat28 * u_xlat5.x + 0.458999991;\n        u_xlat28 = u_xlat28
            * u_xlat5.x + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat5.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat0.x
            * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat5.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat28 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat26 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat5.xyz = u_xlat6.xyz * (-u_xlat0.xxx);\n       
            u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat5.xyz = exp2(u_xlat5.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat26;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat7.xyz
            * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat5.xyz = u_xlat2.xyz *
            u_xlat16_3.xxx;\n        u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat26 = min(u_xlat4.y, -0.00100000005);\n       
            u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat6.xyz = vec3(u_xlat26)
            * u_xlat4.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat28 = dot((-u_xlat4.xyz),
            u_xlat6.xyz);\n        u_xlat6.x = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat14.x = u_xlat28 * 5.25 +
            -6.80000019;\n        u_xlat14.x = u_xlat28 * u_xlat14.x + 3.82999992;\n       
            u_xlat14.x = u_xlat28 * u_xlat14.x + 0.458999991;\n        u_xlat28 =
            u_xlat28 * u_xlat14.x + -0.00286999997;\n        u_xlat28 = u_xlat28
            * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat6.x
            = (-u_xlat6.x) + 1.0;\n        u_xlat14.x = u_xlat6.x * 5.25 + -6.80000019;\n       
            u_xlat14.x = u_xlat6.x * u_xlat14.x + 3.82999992;\n        u_xlat14.x
            = u_xlat6.x * u_xlat14.x + 0.458999991;\n        u_xlat6.x = u_xlat6.x
            * u_xlat14.x + -0.00286999997;\n        u_xlat6.x = u_xlat6.x * 1.44269502;\n       
            u_xlat6.x = exp2(u_xlat6.x);\n        u_xlat14.xy = vec2(u_xlat28) *
            vec2(0.25, 0.249900013);\n        u_xlat28 = u_xlat6.x * 0.25 + u_xlat14.x;\n       
            u_xlat6.xy = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat7.xyz =
            u_xlat4.xyz * u_xlat6.xxx;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat7.xyz,
            u_xlat7.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 =
            (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = u_xlat26 * u_xlat28 +
            (-u_xlat14.y);\n        u_xlat28 = max(u_xlat28, 0.0);\n        u_xlat28
            = min(u_xlat28, 50.0);\n        u_xlat6.xzw = u_xlat2.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xzw
            = (-vec3(u_xlat28)) * u_xlat6.xzw;\n        u_xlat6.xzw = u_xlat6.xzw
            * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat6.xzw);\n       
            u_xlat26 = u_xlat6.y * u_xlat26;\n        u_xlat6.xyz = u_xlat0.xyz *
            vec3(u_xlat26);\n        u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx +
            vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat5.xyz
            = u_xlat2.xyz * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x,
            _GroundColor.y, _GroundColor.z) * u_xlat16_0.xyz + u_xlat16_5.xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x
            = dot(_WorldSpaceLightPos0.xyz, (-u_xlat4.xyz));\n    u_xlat16_3.x =
            u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * 0.75
            + 0.75;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_5.xyz;\n    vs_TEXCOORD2.xyz
            = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x = dot(_LightColor0.xyz,
            _LightColor0.xyz);\n    u_xlat16_3.x = sqrt(u_xlat16_3.x);\n    u_xlat16_3.x
            = max(u_xlat16_3.x, 0.25);\n    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);\n   
            u_xlat16_11.xyz = u_xlat16_0.xyz * vec3(8000.0, 8000.0, 8000.0);\n   
            u_xlat16_11.xyz = clamp(u_xlat16_11.xyz, 0.0, 1.0);\n    u_xlat16_11.xyz
            = u_xlat16_11.xyz * _LightColor0.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz
            * vec3(27.0, 27.0, 27.0);\n    vs_TEXCOORD3.xyz = u_xlat16_11.xyz / u_xlat16_3.xxx;\n   
            vs_TEXCOORD0.xyz = (-u_xlat4.xyz);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tmediump float _SunSize;\nin mediump vec3 vs_TEXCOORD0;\nin mediump
            vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD2;\nin mediump vec3 vs_TEXCOORD3;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nmediump
            vec3 u_xlat16_1;\nbool u_xlatb2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n   
            u_xlat16_0.xyz = vs_TEXCOORD0.xyz + _WorldSpaceLightPos0.xyz;\n    u_xlat16_0.x
            = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);\n    u_xlat16_0.x = sqrt(u_xlat16_0.x);\n   
            u_xlat16_3.x = float(1.0) / _SunSize;\n    u_xlat16_0.x = u_xlat16_3.x
            * u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n   
            u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x
            * u_xlat16_0.x;\n    u_xlat16_0.x = (-u_xlat16_3.x) * u_xlat16_0.x +
            1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x
            = vs_TEXCOORD0.y * 50.0;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0,
            1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n   
            u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n   
            u_xlat16_1.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx + u_xlat16_3.xyz;\n   
            u_xlatb2 = vs_TEXCOORD0.y<0.0;\n    SV_Target0.xyz = (bool(u_xlatb2))
            ? u_xlat16_1.xyz : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_SIMPLE
          Tags:
          - Key: PreviewType
            Value: Skybox
          - Key: QUEUE
            Value: Background
          - Key: RenderType
            Value: Background
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform
            \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform
            \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump
            vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3
            u_xlat5;\nmediump vec3 u_xlat16_5;\nvec4 u_xlat6;\nvec3 u_xlat7;\nfloat
            u_xlat8;\nmediump vec3 u_xlat16_11;\nvec3 u_xlat14;\nfloat u_xlat16;\nfloat
            u_xlat22;\nfloat u_xlat24;\nfloat u_xlat26;\nfloat u_xlat28;\nfloat u_xlat29;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat16_1 = log2(vec4(_SkyTint.x, _SkyTint.y,
            _SkyTint.z, _AtmosphereThickness));\n    u_xlat16_1 = u_xlat16_1 * vec4(0.454545468,
            0.454545468, 0.454545468, 2.5);\n    u_xlat16_1 = exp2(u_xlat16_1);\n   
            u_xlat2.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat2.xyz
            = u_xlat2.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5,
            0.419999987, 0.324999988);\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n   
            u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = vec3(1.0,
            1.0, 1.0) / u_xlat2.xyz;\n    u_xlat16_3.xy = u_xlat16_1.ww * vec2(0.049999997,
            0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24
            = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n   
            u_xlatb0 = u_xlat4.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat4.y
            * u_xlat4.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n        u_xlat8 = (-u_xlat0.y)
            * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8 * 5.25 + -6.80000019;\n       
            u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n        u_xlat16 = u_xlat8
            * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8 * u_xlat16 + -0.00286999997;\n       
            u_xlat8 = u_xlat8 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat8);\n       
            u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat5.xyz
            = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat24 = dot(u_xlat5.xyz,
            u_xlat5.xyz);\n        u_xlat24 = sqrt(u_xlat24);\n        u_xlat26 =
            (-u_xlat24) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat24;\n        u_xlat29
            = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat24 = u_xlat29 / u_xlat24;\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat29 = u_xlat28 * 5.25 + -6.80000019;\n       
            u_xlat29 = u_xlat28 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat28
            * u_xlat29 + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat29 + -0.00286999997;\n       
            u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n       
            u_xlat24 = (-u_xlat24) + 1.0;\n        u_xlat29 = u_xlat24 * 5.25 + -6.80000019;\n       
            u_xlat29 = u_xlat24 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat24
            * u_xlat29 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat29 + -0.00286999997;\n       
            u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n       
            u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat28 * 0.25 + (-u_xlat24);\n       
            u_xlat24 = u_xlat26 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24,
            0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat6.xyz =
            u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat7.xyz = (-vec3(u_xlat24)) * u_xlat6.xyz;\n        u_xlat7.xyz =
            u_xlat7.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat7.xyz
            = exp2(u_xlat7.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat26;\n       
            u_xlat5.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat5.xyz;\n        u_xlat0.x
            = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat26 = (-u_xlat0.x) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat0.x;\n        u_xlat5.x
            = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat0.x = u_xlat5.x / u_xlat0.x;\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat5.x = u_xlat28 * 5.25 +
            -6.80000019;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 3.82999992;\n       
            u_xlat5.x = u_xlat28 * u_xlat5.x + 0.458999991;\n        u_xlat28 = u_xlat28
            * u_xlat5.x + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat5.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat0.x
            * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat5.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat28 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat26 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat5.xyz = u_xlat6.xyz * (-u_xlat0.xxx);\n       
            u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat5.xyz = exp2(u_xlat5.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat26;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat7.xyz
            * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat5.xyz = u_xlat2.xyz *
            u_xlat16_3.xxx;\n        u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat28 = min(u_xlat4.y, -0.00100000005);\n       
            u_xlat28 = -9.99999975e-05 / u_xlat28;\n        u_xlat6.xyz = vec3(u_xlat28)
            * u_xlat4.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat6.w = dot((-u_xlat4.xyz),
            u_xlat6.xyz);\n        u_xlat6.x = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n       
            u_xlat6.xy = (-u_xlat6.xw) + vec2(1.0, 1.0);\n        u_xlat22 = u_xlat6.y
            * 5.25 + -6.80000019;\n        u_xlat22 = u_xlat6.y * u_xlat22 + 3.82999992;\n       
            u_xlat22 = u_xlat6.y * u_xlat22 + 0.458999991;\n        u_xlat14.x =
            u_xlat6.y * u_xlat22 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x
            * 1.44269502;\n        u_xlat6.y = exp2(u_xlat14.x);\n        u_xlat22
            = u_xlat6.x * 5.25 + -6.80000019;\n        u_xlat22 = u_xlat6.x * u_xlat22
            + 3.82999992;\n        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;\n       
            u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;\n        u_xlat6.xyz
            = u_xlat6.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat6.x
            = exp2(u_xlat6.x);\n        u_xlat6.x = u_xlat6.x * 0.25 + u_xlat6.y;\n       
            u_xlat14.xz = vec2(u_xlat28) * vec2(0.5, 20.0);\n        u_xlat7.xyz
            = u_xlat4.xyz * u_xlat14.xxx;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat28 = dot(u_xlat7.xyz,
            u_xlat7.xyz);\n        u_xlat28 = sqrt(u_xlat28);\n        u_xlat28 =
            (-u_xlat28) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat6.x = u_xlat28 * u_xlat6.x
            + (-u_xlat6.z);\n        u_xlat6.x = max(u_xlat6.x, 0.0);\n        u_xlat6.x
            = min(u_xlat6.x, 50.0);\n        u_xlat7.xyz = u_xlat2.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xyz
            = (-u_xlat6.xxx) * u_xlat7.xyz;\n        u_xlat6.xyz = u_xlat6.xyz *
            vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat6.xyz);\n       
            u_xlat28 = u_xlat14.z * u_xlat28;\n        u_xlat6.xyz = u_xlat0.xyz
            * vec3(u_xlat28);\n        u_xlat7.xyz = u_xlat2.xyz * u_xlat16_3.xxx
            + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat5.xyz
            = u_xlat6.xyz * u_xlat7.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x,
            _GroundColor.y, _GroundColor.z) * u_xlat16_0.xyz + u_xlat16_5.xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x
            = dot(_WorldSpaceLightPos0.xyz, (-u_xlat4.xyz));\n    u_xlat16_3.x =
            u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * 0.75
            + 0.75;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_5.xyz;\n    vs_TEXCOORD2.xyz
            = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x = dot(_LightColor0.xyz,
            _LightColor0.xyz);\n    u_xlat16_3.x = sqrt(u_xlat16_3.x);\n    u_xlat16_3.x
            = max(u_xlat16_3.x, 0.25);\n    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);\n   
            u_xlat16_0.xyz = u_xlat16_0.xyz;\n    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz,
            0.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n   
            u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(15.0, 15.0, 15.0);\n    vs_TEXCOORD3.xyz
            = u_xlat16_11.xyz / u_xlat16_3.xxx;\n    vs_TEXCOORD0.xyz = (-u_xlat4.xyz);\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float
            _SunSize;\nuniform \tmediump float _SunSizeConvergence;\nvarying highp
            vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump
            vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nmediump vec2 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_6;\nvoid
            main()\n{\n    u_xlat16_0.x = log2(_SunSize);\n    u_xlat16_0.x = u_xlat16_0.x
            * 0.649999976;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat1.x
            = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n   
            u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD0.xyz;\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz,
            (-u_xlat1.xyz));\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n   
            u_xlat16_3.x = log2(u_xlat16_3.x);\n    u_xlat16_3.x = u_xlat16_3.x *
            _SunSizeConvergence;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_6
            = (-u_xlat16_3.x) * 1.98000002 + 1.98010004;\n    u_xlat16_0.y = u_xlat16_3.x
            * u_xlat16_3.x + 1.0;\n    u_xlat16_0.xy = u_xlat16_0.xy * vec2(10.0,
            0.0100164423);\n    u_xlat16_6 = log2(u_xlat16_6);\n    u_xlat16_0.x
            = u_xlat16_6 * u_xlat16_0.x;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n   
            u_xlat16_0.x = max(u_xlat16_0.x, 9.99999975e-05);\n    u_xlat16_0.x =
            u_xlat16_0.y / u_xlat16_0.x;\n    u_xlat16_3.x = u_xlat1.y * 50.0;\n   
            u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlatb1 = u_xlat1.y<0.0;\n   
            u_xlat16_2.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz
            = u_xlat16_3.xxx * u_xlat16_2.xyz + vs_TEXCOORD2.xyz;\n    u_xlat16_2.xyz
            = vs_TEXCOORD3.xyz * u_xlat16_0.xxx + u_xlat16_3.xyz;\n    SV_Target0.xyz
            = (bool(u_xlatb1)) ? u_xlat16_2.xyz : u_xlat16_3.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_HIGH_QUALITY
          Tags:
          - Key: PreviewType
            Value: Skybox
          - Key: QUEUE
            Value: Background
          - Key: RenderType
            Value: Background
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform
            \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nin
            highp vec4 in_POSITION0;\nout highp vec3 vs_TEXCOORD0;\nout mediump vec3
            vs_TEXCOORD1;\nout mediump vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump
            vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3
            u_xlat5;\nmediump vec3 u_xlat16_5;\nvec4 u_xlat6;\nvec3 u_xlat7;\nfloat
            u_xlat8;\nmediump vec3 u_xlat16_11;\nvec3 u_xlat14;\nfloat u_xlat16;\nfloat
            u_xlat22;\nfloat u_xlat24;\nfloat u_xlat26;\nfloat u_xlat28;\nfloat u_xlat29;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat16_1 = log2(vec4(_SkyTint.x, _SkyTint.y,
            _SkyTint.z, _AtmosphereThickness));\n    u_xlat16_1 = u_xlat16_1 * vec4(0.454545468,
            0.454545468, 0.454545468, 2.5);\n    u_xlat16_1 = exp2(u_xlat16_1);\n   
            u_xlat2.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat2.xyz
            = u_xlat2.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5,
            0.419999987, 0.324999988);\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n   
            u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = vec3(1.0,
            1.0, 1.0) / u_xlat2.xyz;\n    u_xlat16_3.xy = u_xlat16_1.ww * vec2(0.049999997,
            0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24
            = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n   
            u_xlatb0 = u_xlat4.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat4.y
            * u_xlat4.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n        u_xlat8 = (-u_xlat0.y)
            * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8 * 5.25 + -6.80000019;\n       
            u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n        u_xlat16 = u_xlat8
            * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8 * u_xlat16 + -0.00286999997;\n       
            u_xlat8 = u_xlat8 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat8);\n       
            u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat5.xyz
            = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat24 = dot(u_xlat5.xyz,
            u_xlat5.xyz);\n        u_xlat24 = sqrt(u_xlat24);\n        u_xlat26 =
            (-u_xlat24) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat24;\n        u_xlat29
            = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat24 = u_xlat29 / u_xlat24;\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat29 = u_xlat28 * 5.25 + -6.80000019;\n       
            u_xlat29 = u_xlat28 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat28
            * u_xlat29 + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat29 + -0.00286999997;\n       
            u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n       
            u_xlat24 = (-u_xlat24) + 1.0;\n        u_xlat29 = u_xlat24 * 5.25 + -6.80000019;\n       
            u_xlat29 = u_xlat24 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat24
            * u_xlat29 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat29 + -0.00286999997;\n       
            u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n       
            u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat28 * 0.25 + (-u_xlat24);\n       
            u_xlat24 = u_xlat26 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24,
            0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat6.xyz =
            u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat7.xyz = (-vec3(u_xlat24)) * u_xlat6.xyz;\n        u_xlat7.xyz =
            u_xlat7.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat7.xyz
            = exp2(u_xlat7.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat26;\n       
            u_xlat5.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat5.xyz;\n        u_xlat0.x
            = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat26 = (-u_xlat0.x) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat0.x;\n        u_xlat5.x
            = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat0.x = u_xlat5.x / u_xlat0.x;\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat5.x = u_xlat28 * 5.25 +
            -6.80000019;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 3.82999992;\n       
            u_xlat5.x = u_xlat28 * u_xlat5.x + 0.458999991;\n        u_xlat28 = u_xlat28
            * u_xlat5.x + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat5.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat0.x
            * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat5.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat28 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat26 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat5.xyz = u_xlat6.xyz * (-u_xlat0.xxx);\n       
            u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat5.xyz = exp2(u_xlat5.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat26;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat7.xyz
            * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat5.xyz = u_xlat2.xyz *
            u_xlat16_3.xxx;\n        u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat28 = min(u_xlat4.y, -0.00100000005);\n       
            u_xlat28 = -9.99999975e-05 / u_xlat28;\n        u_xlat6.xyz = vec3(u_xlat28)
            * u_xlat4.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat6.w = dot((-u_xlat4.xyz),
            u_xlat6.xyz);\n        u_xlat6.x = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n       
            u_xlat6.xy = (-u_xlat6.xw) + vec2(1.0, 1.0);\n        u_xlat22 = u_xlat6.y
            * 5.25 + -6.80000019;\n        u_xlat22 = u_xlat6.y * u_xlat22 + 3.82999992;\n       
            u_xlat22 = u_xlat6.y * u_xlat22 + 0.458999991;\n        u_xlat14.x =
            u_xlat6.y * u_xlat22 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x
            * 1.44269502;\n        u_xlat6.y = exp2(u_xlat14.x);\n        u_xlat22
            = u_xlat6.x * 5.25 + -6.80000019;\n        u_xlat22 = u_xlat6.x * u_xlat22
            + 3.82999992;\n        u_xlat22 = u_xlat6.x * u_xlat22 + 0.458999991;\n       
            u_xlat6.x = u_xlat6.x * u_xlat22 + -0.00286999997;\n        u_xlat6.xyz
            = u_xlat6.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat6.x
            = exp2(u_xlat6.x);\n        u_xlat6.x = u_xlat6.x * 0.25 + u_xlat6.y;\n       
            u_xlat14.xz = vec2(u_xlat28) * vec2(0.5, 20.0);\n        u_xlat7.xyz
            = u_xlat4.xyz * u_xlat14.xxx;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat28 = dot(u_xlat7.xyz,
            u_xlat7.xyz);\n        u_xlat28 = sqrt(u_xlat28);\n        u_xlat28 =
            (-u_xlat28) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat6.x = u_xlat28 * u_xlat6.x
            + (-u_xlat6.z);\n        u_xlat6.x = max(u_xlat6.x, 0.0);\n        u_xlat6.x
            = min(u_xlat6.x, 50.0);\n        u_xlat7.xyz = u_xlat2.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xyz
            = (-u_xlat6.xxx) * u_xlat7.xyz;\n        u_xlat6.xyz = u_xlat6.xyz *
            vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat6.xyz);\n       
            u_xlat28 = u_xlat14.z * u_xlat28;\n        u_xlat6.xyz = u_xlat0.xyz
            * vec3(u_xlat28);\n        u_xlat7.xyz = u_xlat2.xyz * u_xlat16_3.xxx
            + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat5.xyz
            = u_xlat6.xyz * u_xlat7.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x,
            _GroundColor.y, _GroundColor.z) * u_xlat16_0.xyz + u_xlat16_5.xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x
            = dot(_WorldSpaceLightPos0.xyz, (-u_xlat4.xyz));\n    u_xlat16_3.x =
            u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * 0.75
            + 0.75;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_5.xyz;\n    vs_TEXCOORD2.xyz
            = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x = dot(_LightColor0.xyz,
            _LightColor0.xyz);\n    u_xlat16_3.x = sqrt(u_xlat16_3.x);\n    u_xlat16_3.x
            = max(u_xlat16_3.x, 0.25);\n    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);\n   
            u_xlat16_0.xyz = u_xlat16_0.xyz;\n    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz,
            0.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n   
            u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(15.0, 15.0, 15.0);\n    vs_TEXCOORD3.xyz
            = u_xlat16_11.xyz / u_xlat16_3.xxx;\n    vs_TEXCOORD0.xyz = (-u_xlat4.xyz);\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tmediump float _SunSize;\nuniform \tmediump float _SunSizeConvergence;\nin
            highp vec3 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec3
            vs_TEXCOORD2;\nin mediump vec3 vs_TEXCOORD3;\nlayout(location = 0) out
            mediump vec4 SV_Target0;\nmediump vec2 u_xlat16_0;\nvec3 u_xlat1;\nbool
            u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            float u_xlat16_6;\nvoid main()\n{\n    u_xlat16_0.x = log2(_SunSize);\n   
            u_xlat16_0.x = u_xlat16_0.x * 0.649999976;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n   
            u_xlat1.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat1.x =
            inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD0.xyz;\n   
            u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, (-u_xlat1.xyz));\n    u_xlat16_3.x
            = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = log2(u_xlat16_3.x);\n   
            u_xlat16_3.x = u_xlat16_3.x * _SunSizeConvergence;\n    u_xlat16_3.x
            = exp2(u_xlat16_3.x);\n    u_xlat16_6 = (-u_xlat16_3.x) * 1.98000002
            + 1.98010004;\n    u_xlat16_0.y = u_xlat16_3.x * u_xlat16_3.x + 1.0;\n   
            u_xlat16_0.xy = u_xlat16_0.xy * vec2(10.0, 0.0100164423);\n    u_xlat16_6
            = log2(u_xlat16_6);\n    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;\n   
            u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat16_0.x = max(u_xlat16_0.x,
            9.99999975e-05);\n    u_xlat16_0.x = u_xlat16_0.y / u_xlat16_0.x;\n   
            u_xlat16_3.x = u_xlat1.y * 50.0;\n    u_xlat16_3.x = clamp(u_xlat16_3.x,
            0.0, 1.0);\n    u_xlatb1 = u_xlat1.y<0.0;\n    u_xlat16_2.xyz = vs_TEXCOORD1.xyz
            + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz
            + vs_TEXCOORD2.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx
            + u_xlat16_3.xyz;\n    SV_Target0.xyz = (bool(u_xlatb1)) ? u_xlat16_2.xyz
            : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_HIGH_QUALITY
          Tags:
          - Key: PreviewType
            Value: Skybox
          - Key: QUEUE
            Value: Background
          - Key: RenderType
            Value: Background
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform
            \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nattribute
            highp vec4 in_POSITION0;\nvarying mediump float vs_TEXCOORD0;\nvarying
            mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump
            vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3
            u_xlat5;\nmediump vec3 u_xlat16_5;\nvec4 u_xlat6;\nvec3 u_xlat7;\nfloat
            u_xlat8;\nvec2 u_xlat14;\nfloat u_xlat16;\nfloat u_xlat24;\nfloat u_xlat26;\nfloat
            u_xlat28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat16_1
            = log2(vec4(_SkyTint.x, _SkyTint.y, _SkyTint.z, _AtmosphereThickness));\n   
            u_xlat16_1 = u_xlat16_1 * vec4(0.454545468, 0.454545468, 0.454545468,
            2.5);\n    u_xlat16_1 = exp2(u_xlat16_1);\n    u_xlat2.xyz = (-u_xlat16_1.xyz)
            + vec3(1.0, 1.0, 1.0);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(0.300000012,
            0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n   
            u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat2.xyz
            * u_xlat2.xyz;\n    u_xlat2.xyz = vec3(1.0, 1.0, 1.0) / u_xlat2.xyz;\n   
            u_xlat16_3.xy = u_xlat16_1.ww * vec2(0.049999997, 0.0314159282);\n   
            u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n   
            u_xlat4.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n    u_xlatb0 = u_xlat4.y>=0.0;\n   
            if(u_xlatb0){\n        u_xlat0.x = u_xlat4.y * u_xlat4.y + 0.0506249666;\n       
            u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat24
            + u_xlat0.x;\n        u_xlat8 = (-u_xlat0.y) * u_xlat24 + 1.0;\n       
            u_xlat16 = u_xlat8 * 5.25 + -6.80000019;\n        u_xlat16 = u_xlat8
            * u_xlat16 + 3.82999992;\n        u_xlat16 = u_xlat8 * u_xlat16 + 0.458999991;\n       
            u_xlat8 = u_xlat8 * u_xlat16 + -0.00286999997;\n        u_xlat8 = u_xlat8
            * 1.44269502;\n        u_xlat0.y = exp2(u_xlat8);\n        u_xlat0.xyz
            = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat5.xyz =
            u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat24 = dot(u_xlat5.xyz,
            u_xlat5.xyz);\n        u_xlat24 = sqrt(u_xlat24);\n        u_xlat26 =
            (-u_xlat24) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat24;\n        u_xlat29
            = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat24 = u_xlat29 / u_xlat24;\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat29 = u_xlat28 * 5.25 + -6.80000019;\n       
            u_xlat29 = u_xlat28 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat28
            * u_xlat29 + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat29 + -0.00286999997;\n       
            u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n       
            u_xlat24 = (-u_xlat24) + 1.0;\n        u_xlat29 = u_xlat24 * 5.25 + -6.80000019;\n       
            u_xlat29 = u_xlat24 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat24
            * u_xlat29 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat29 + -0.00286999997;\n       
            u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n       
            u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat28 * 0.25 + (-u_xlat24);\n       
            u_xlat24 = u_xlat26 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24,
            0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat6.xyz =
            u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat7.xyz = (-vec3(u_xlat24)) * u_xlat6.xyz;\n        u_xlat7.xyz =
            u_xlat7.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat7.xyz
            = exp2(u_xlat7.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat26;\n       
            u_xlat5.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat5.xyz;\n        u_xlat0.x
            = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat26 = (-u_xlat0.x) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat0.x;\n        u_xlat5.x
            = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat0.x = u_xlat5.x / u_xlat0.x;\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat5.x = u_xlat28 * 5.25 +
            -6.80000019;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 3.82999992;\n       
            u_xlat5.x = u_xlat28 * u_xlat5.x + 0.458999991;\n        u_xlat28 = u_xlat28
            * u_xlat5.x + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat5.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat0.x
            * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat5.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat28 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat26 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat5.xyz = u_xlat6.xyz * (-u_xlat0.xxx);\n       
            u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat5.xyz = exp2(u_xlat5.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat26;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat7.xyz
            * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat5.xyz = u_xlat2.xyz *
            u_xlat16_3.xxx;\n        u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat26 = min(u_xlat4.y, -0.00100000005);\n       
            u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat6.xyz = vec3(u_xlat26)
            * u_xlat4.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat28 = dot((-u_xlat4.xyz),
            u_xlat6.xyz);\n        u_xlat6.x = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat14.x = u_xlat28 * 5.25 +
            -6.80000019;\n        u_xlat14.x = u_xlat28 * u_xlat14.x + 3.82999992;\n       
            u_xlat14.x = u_xlat28 * u_xlat14.x + 0.458999991;\n        u_xlat28 =
            u_xlat28 * u_xlat14.x + -0.00286999997;\n        u_xlat28 = u_xlat28
            * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat6.x
            = (-u_xlat6.x) + 1.0;\n        u_xlat14.x = u_xlat6.x * 5.25 + -6.80000019;\n       
            u_xlat14.x = u_xlat6.x * u_xlat14.x + 3.82999992;\n        u_xlat14.x
            = u_xlat6.x * u_xlat14.x + 0.458999991;\n        u_xlat6.x = u_xlat6.x
            * u_xlat14.x + -0.00286999997;\n        u_xlat6.x = u_xlat6.x * 1.44269502;\n       
            u_xlat6.x = exp2(u_xlat6.x);\n        u_xlat14.xy = vec2(u_xlat28) *
            vec2(0.25, 0.249900013);\n        u_xlat28 = u_xlat6.x * 0.25 + u_xlat14.x;\n       
            u_xlat6.xy = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat7.xyz =
            u_xlat4.xyz * u_xlat6.xxx;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat7.xyz,
            u_xlat7.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 =
            (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = u_xlat26 * u_xlat28 +
            (-u_xlat14.y);\n        u_xlat28 = max(u_xlat28, 0.0);\n        u_xlat28
            = min(u_xlat28, 50.0);\n        u_xlat6.xzw = u_xlat2.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xzw
            = (-vec3(u_xlat28)) * u_xlat6.xzw;\n        u_xlat6.xzw = u_xlat6.xzw
            * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat6.xzw);\n       
            u_xlat26 = u_xlat6.y * u_xlat26;\n        u_xlat6.xyz = u_xlat0.xyz *
            vec3(u_xlat26);\n        u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx +
            vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat5.xyz
            = u_xlat2.xyz * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat2.x = u_xlat4.y * -50.0;\n   
            u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z)
            * u_xlat16_0.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD1.xyz = u_xlat16_3.xyz
            * vec3(_Exposure);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz,
            (-u_xlat4.xyz));\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n   
            u_xlat16_3.x = u_xlat16_3.x * 0.75 + 0.75;\n    u_xlat16_3.xyz = u_xlat16_3.xxx
            * u_xlat16_5.xyz;\n    vs_TEXCOORD2.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n   
            vs_TEXCOORD0 = u_xlat2.x;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nvarying mediump float vs_TEXCOORD0;\nvarying mediump vec3
            vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nmediump float u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid
            main()\n{\n    u_xlat16_0 = vs_TEXCOORD0;\n    u_xlat16_0 = clamp(u_xlat16_0,
            0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n   
            SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_NONE
          - _SUNDISK_SIMPLE
          Tags:
          - Key: PreviewType
            Value: Skybox
          - Key: QUEUE
            Value: Background
          - Key: RenderType
            Value: Background
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump float _Exposure;\nuniform
            \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform
            \tmediump float _AtmosphereThickness;\nin highp vec4 in_POSITION0;\nout
            mediump float vs_TEXCOORD0;\nout mediump vec3 vs_TEXCOORD1;\nout mediump
            vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3
            u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec4 u_xlat6;\nvec3
            u_xlat7;\nfloat u_xlat8;\nvec2 u_xlat14;\nfloat u_xlat16;\nfloat u_xlat24;\nfloat
            u_xlat26;\nfloat u_xlat28;\nfloat u_xlat29;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat16_1 = log2(vec4(_SkyTint.x, _SkyTint.y,
            _SkyTint.z, _AtmosphereThickness));\n    u_xlat16_1 = u_xlat16_1 * vec4(0.454545468,
            0.454545468, 0.454545468, 2.5);\n    u_xlat16_1 = exp2(u_xlat16_1);\n   
            u_xlat2.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat2.xyz
            = u_xlat2.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5,
            0.419999987, 0.324999988);\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n   
            u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = vec3(1.0,
            1.0, 1.0) / u_xlat2.xyz;\n    u_xlat16_3.xy = u_xlat16_1.ww * vec2(0.049999997,
            0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24
            = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n   
            u_xlatb0 = u_xlat4.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat4.y
            * u_xlat4.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n        u_xlat8 = (-u_xlat0.y)
            * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8 * 5.25 + -6.80000019;\n       
            u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n        u_xlat16 = u_xlat8
            * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8 * u_xlat16 + -0.00286999997;\n       
            u_xlat8 = u_xlat8 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat8);\n       
            u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat5.xyz
            = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat24 = dot(u_xlat5.xyz,
            u_xlat5.xyz);\n        u_xlat24 = sqrt(u_xlat24);\n        u_xlat26 =
            (-u_xlat24) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat24;\n        u_xlat29
            = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat24 = u_xlat29 / u_xlat24;\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat29 = u_xlat28 * 5.25 + -6.80000019;\n       
            u_xlat29 = u_xlat28 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat28
            * u_xlat29 + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat29 + -0.00286999997;\n       
            u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n       
            u_xlat24 = (-u_xlat24) + 1.0;\n        u_xlat29 = u_xlat24 * 5.25 + -6.80000019;\n       
            u_xlat29 = u_xlat24 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat24
            * u_xlat29 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat29 + -0.00286999997;\n       
            u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n       
            u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat28 * 0.25 + (-u_xlat24);\n       
            u_xlat24 = u_xlat26 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24,
            0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat6.xyz =
            u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat7.xyz = (-vec3(u_xlat24)) * u_xlat6.xyz;\n        u_xlat7.xyz =
            u_xlat7.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat7.xyz
            = exp2(u_xlat7.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat26;\n       
            u_xlat5.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat5.xyz;\n        u_xlat0.x
            = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat26 = (-u_xlat0.x) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat0.x;\n        u_xlat5.x
            = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat0.x = u_xlat5.x / u_xlat0.x;\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat5.x = u_xlat28 * 5.25 +
            -6.80000019;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 3.82999992;\n       
            u_xlat5.x = u_xlat28 * u_xlat5.x + 0.458999991;\n        u_xlat28 = u_xlat28
            * u_xlat5.x + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat5.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat0.x
            * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat5.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat28 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat26 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat5.xyz = u_xlat6.xyz * (-u_xlat0.xxx);\n       
            u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat5.xyz = exp2(u_xlat5.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat26;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat7.xyz
            * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat5.xyz = u_xlat2.xyz *
            u_xlat16_3.xxx;\n        u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat26 = min(u_xlat4.y, -0.00100000005);\n       
            u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat6.xyz = vec3(u_xlat26)
            * u_xlat4.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat28 = dot((-u_xlat4.xyz),
            u_xlat6.xyz);\n        u_xlat6.x = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat14.x = u_xlat28 * 5.25 +
            -6.80000019;\n        u_xlat14.x = u_xlat28 * u_xlat14.x + 3.82999992;\n       
            u_xlat14.x = u_xlat28 * u_xlat14.x + 0.458999991;\n        u_xlat28 =
            u_xlat28 * u_xlat14.x + -0.00286999997;\n        u_xlat28 = u_xlat28
            * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat6.x
            = (-u_xlat6.x) + 1.0;\n        u_xlat14.x = u_xlat6.x * 5.25 + -6.80000019;\n       
            u_xlat14.x = u_xlat6.x * u_xlat14.x + 3.82999992;\n        u_xlat14.x
            = u_xlat6.x * u_xlat14.x + 0.458999991;\n        u_xlat6.x = u_xlat6.x
            * u_xlat14.x + -0.00286999997;\n        u_xlat6.x = u_xlat6.x * 1.44269502;\n       
            u_xlat6.x = exp2(u_xlat6.x);\n        u_xlat14.xy = vec2(u_xlat28) *
            vec2(0.25, 0.249900013);\n        u_xlat28 = u_xlat6.x * 0.25 + u_xlat14.x;\n       
            u_xlat6.xy = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat7.xyz =
            u_xlat4.xyz * u_xlat6.xxx;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat7.xyz,
            u_xlat7.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 =
            (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = u_xlat26 * u_xlat28 +
            (-u_xlat14.y);\n        u_xlat28 = max(u_xlat28, 0.0);\n        u_xlat28
            = min(u_xlat28, 50.0);\n        u_xlat6.xzw = u_xlat2.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xzw
            = (-vec3(u_xlat28)) * u_xlat6.xzw;\n        u_xlat6.xzw = u_xlat6.xzw
            * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat6.xzw);\n       
            u_xlat26 = u_xlat6.y * u_xlat26;\n        u_xlat6.xyz = u_xlat0.xyz *
            vec3(u_xlat26);\n        u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx +
            vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat5.xyz
            = u_xlat2.xyz * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat2.x = u_xlat4.y * -50.0;\n   
            u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z)
            * u_xlat16_0.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD1.xyz = u_xlat16_3.xyz
            * vec3(_Exposure);\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz,
            (-u_xlat4.xyz));\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n   
            u_xlat16_3.x = u_xlat16_3.x * 0.75 + 0.75;\n    u_xlat16_3.xyz = u_xlat16_3.xxx
            * u_xlat16_5.xyz;\n    vs_TEXCOORD2.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n   
            vs_TEXCOORD0 = u_xlat2.x;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\nin mediump float vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin
            mediump vec3 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump
            float u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0
            = vs_TEXCOORD0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_1.xyz
            = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    SV_Target0.xyz = vec3(u_xlat16_0)
            * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_NONE
          - _SUNDISK_SIMPLE
          Tags:
          - Key: PreviewType
            Value: Skybox
          - Key: QUEUE
            Value: Background
          - Key: RenderType
            Value: Background
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform
            \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform
            \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying
            mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump
            vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nvec3
            u_xlat5;\nmediump vec3 u_xlat16_5;\nvec4 u_xlat6;\nvec3 u_xlat7;\nfloat
            u_xlat8;\nmediump vec3 u_xlat16_11;\nvec2 u_xlat14;\nfloat u_xlat16;\nfloat
            u_xlat24;\nfloat u_xlat26;\nfloat u_xlat28;\nfloat u_xlat29;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat16_1 = log2(vec4(_SkyTint.x, _SkyTint.y,
            _SkyTint.z, _AtmosphereThickness));\n    u_xlat16_1 = u_xlat16_1 * vec4(0.454545468,
            0.454545468, 0.454545468, 2.5);\n    u_xlat16_1 = exp2(u_xlat16_1);\n   
            u_xlat2.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat2.xyz
            = u_xlat2.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5,
            0.419999987, 0.324999988);\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n   
            u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = vec3(1.0,
            1.0, 1.0) / u_xlat2.xyz;\n    u_xlat16_3.xy = u_xlat16_1.ww * vec2(0.049999997,
            0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24
            = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n   
            u_xlatb0 = u_xlat4.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat4.y
            * u_xlat4.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n        u_xlat8 = (-u_xlat0.y)
            * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8 * 5.25 + -6.80000019;\n       
            u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n        u_xlat16 = u_xlat8
            * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8 * u_xlat16 + -0.00286999997;\n       
            u_xlat8 = u_xlat8 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat8);\n       
            u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat5.xyz
            = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat24 = dot(u_xlat5.xyz,
            u_xlat5.xyz);\n        u_xlat24 = sqrt(u_xlat24);\n        u_xlat26 =
            (-u_xlat24) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat24;\n        u_xlat29
            = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat24 = u_xlat29 / u_xlat24;\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat29 = u_xlat28 * 5.25 + -6.80000019;\n       
            u_xlat29 = u_xlat28 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat28
            * u_xlat29 + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat29 + -0.00286999997;\n       
            u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n       
            u_xlat24 = (-u_xlat24) + 1.0;\n        u_xlat29 = u_xlat24 * 5.25 + -6.80000019;\n       
            u_xlat29 = u_xlat24 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat24
            * u_xlat29 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat29 + -0.00286999997;\n       
            u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n       
            u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat28 * 0.25 + (-u_xlat24);\n       
            u_xlat24 = u_xlat26 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24,
            0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat6.xyz =
            u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat7.xyz = (-vec3(u_xlat24)) * u_xlat6.xyz;\n        u_xlat7.xyz =
            u_xlat7.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat7.xyz
            = exp2(u_xlat7.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat26;\n       
            u_xlat5.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat5.xyz;\n        u_xlat0.x
            = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat26 = (-u_xlat0.x) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat0.x;\n        u_xlat5.x
            = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat0.x = u_xlat5.x / u_xlat0.x;\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat5.x = u_xlat28 * 5.25 +
            -6.80000019;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 3.82999992;\n       
            u_xlat5.x = u_xlat28 * u_xlat5.x + 0.458999991;\n        u_xlat28 = u_xlat28
            * u_xlat5.x + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat5.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat0.x
            * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat5.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat28 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat26 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat5.xyz = u_xlat6.xyz * (-u_xlat0.xxx);\n       
            u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat5.xyz = exp2(u_xlat5.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat26;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat7.xyz
            * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat5.xyz = u_xlat2.xyz *
            u_xlat16_3.xxx;\n        u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat26 = min(u_xlat4.y, -0.00100000005);\n       
            u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat6.xyz = vec3(u_xlat26)
            * u_xlat4.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat28 = dot((-u_xlat4.xyz),
            u_xlat6.xyz);\n        u_xlat6.x = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat14.x = u_xlat28 * 5.25 +
            -6.80000019;\n        u_xlat14.x = u_xlat28 * u_xlat14.x + 3.82999992;\n       
            u_xlat14.x = u_xlat28 * u_xlat14.x + 0.458999991;\n        u_xlat28 =
            u_xlat28 * u_xlat14.x + -0.00286999997;\n        u_xlat28 = u_xlat28
            * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat6.x
            = (-u_xlat6.x) + 1.0;\n        u_xlat14.x = u_xlat6.x * 5.25 + -6.80000019;\n       
            u_xlat14.x = u_xlat6.x * u_xlat14.x + 3.82999992;\n        u_xlat14.x
            = u_xlat6.x * u_xlat14.x + 0.458999991;\n        u_xlat6.x = u_xlat6.x
            * u_xlat14.x + -0.00286999997;\n        u_xlat6.x = u_xlat6.x * 1.44269502;\n       
            u_xlat6.x = exp2(u_xlat6.x);\n        u_xlat14.xy = vec2(u_xlat28) *
            vec2(0.25, 0.249900013);\n        u_xlat28 = u_xlat6.x * 0.25 + u_xlat14.x;\n       
            u_xlat6.xy = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat7.xyz =
            u_xlat4.xyz * u_xlat6.xxx;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat7.xyz,
            u_xlat7.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 =
            (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = u_xlat26 * u_xlat28 +
            (-u_xlat14.y);\n        u_xlat28 = max(u_xlat28, 0.0);\n        u_xlat28
            = min(u_xlat28, 50.0);\n        u_xlat6.xzw = u_xlat2.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xzw
            = (-vec3(u_xlat28)) * u_xlat6.xzw;\n        u_xlat6.xzw = u_xlat6.xzw
            * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat6.xzw);\n       
            u_xlat26 = u_xlat6.y * u_xlat26;\n        u_xlat6.xyz = u_xlat0.xyz *
            vec3(u_xlat26);\n        u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx +
            vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat5.xyz
            = u_xlat2.xyz * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x,
            _GroundColor.y, _GroundColor.z) * u_xlat16_0.xyz + u_xlat16_5.xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x
            = dot(_WorldSpaceLightPos0.xyz, (-u_xlat4.xyz));\n    u_xlat16_3.x =
            u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * 0.75
            + 0.75;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_5.xyz;\n    vs_TEXCOORD2.xyz
            = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x = dot(_LightColor0.xyz,
            _LightColor0.xyz);\n    u_xlat16_3.x = sqrt(u_xlat16_3.x);\n    u_xlat16_3.x
            = max(u_xlat16_3.x, 0.25);\n    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);\n   
            u_xlat16_11.xyz = u_xlat16_0.xyz * vec3(8000.0, 8000.0, 8000.0);\n   
            u_xlat16_11.xyz = clamp(u_xlat16_11.xyz, 0.0, 1.0);\n    u_xlat16_11.xyz
            = u_xlat16_11.xyz * _LightColor0.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz
            * vec3(27.0, 27.0, 27.0);\n    vs_TEXCOORD3.xyz = u_xlat16_11.xyz / u_xlat16_3.xxx;\n   
            vs_TEXCOORD0.xyz = (-u_xlat4.xyz);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float
            _SunSize;\nvarying mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define
            SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nbool
            u_xlatb2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat16_0.xyz
            = vs_TEXCOORD0.xyz + _WorldSpaceLightPos0.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz,
            u_xlat16_0.xyz);\n    u_xlat16_0.x = sqrt(u_xlat16_0.x);\n    u_xlat16_3.x
            = float(1.0) / _SunSize;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x;\n   
            u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_0.x
            * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x
            = (-u_xlat16_3.x) * u_xlat16_0.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x
            * u_xlat16_0.x;\n    u_xlat16_3.x = vs_TEXCOORD0.y * 50.0;\n    u_xlat16_3.x
            = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz
            + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_1.xyz
            + vs_TEXCOORD2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx
            + u_xlat16_3.xyz;\n    u_xlatb2 = vs_TEXCOORD0.y<0.0;\n    SV_Target0.xyz
            = (bool(u_xlatb2)) ? u_xlat16_1.xyz : u_xlat16_3.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_HIGH_QUALITY
          - _SUNDISK_SIMPLE
          Tags:
          - Key: PreviewType
            Value: Skybox
          - Key: QUEUE
            Value: Background
          - Key: RenderType
            Value: Background
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform
            \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nin
            highp vec4 in_POSITION0;\nout mediump vec3 vs_TEXCOORD0;\nout mediump
            vec3 vs_TEXCOORD1;\nout mediump vec3 vs_TEXCOORD2;\nout mediump vec3
            vs_TEXCOORD3;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3
            u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_5;\nvec4 u_xlat6;\nvec3
            u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_11;\nvec2 u_xlat14;\nfloat
            u_xlat16;\nfloat u_xlat24;\nfloat u_xlat26;\nfloat u_xlat28;\nfloat u_xlat29;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat16_1 = log2(vec4(_SkyTint.x, _SkyTint.y,
            _SkyTint.z, _AtmosphereThickness));\n    u_xlat16_1 = u_xlat16_1 * vec4(0.454545468,
            0.454545468, 0.454545468, 2.5);\n    u_xlat16_1 = exp2(u_xlat16_1);\n   
            u_xlat2.xyz = (-u_xlat16_1.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat2.xyz
            = u_xlat2.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5,
            0.419999987, 0.324999988);\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n   
            u_xlat2.xyz = u_xlat2.xyz * u_xlat2.xyz;\n    u_xlat2.xyz = vec3(1.0,
            1.0, 1.0) / u_xlat2.xyz;\n    u_xlat16_3.xy = u_xlat16_1.ww * vec2(0.049999997,
            0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24
            = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n   
            u_xlatb0 = u_xlat4.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat4.y
            * u_xlat4.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n        u_xlat8 = (-u_xlat0.y)
            * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8 * 5.25 + -6.80000019;\n       
            u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n        u_xlat16 = u_xlat8
            * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8 * u_xlat16 + -0.00286999997;\n       
            u_xlat8 = u_xlat8 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat8);\n       
            u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat5.xyz
            = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat24 = dot(u_xlat5.xyz,
            u_xlat5.xyz);\n        u_xlat24 = sqrt(u_xlat24);\n        u_xlat26 =
            (-u_xlat24) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat24;\n        u_xlat29
            = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat24 = u_xlat29 / u_xlat24;\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat29 = u_xlat28 * 5.25 + -6.80000019;\n       
            u_xlat29 = u_xlat28 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat28
            * u_xlat29 + 0.458999991;\n        u_xlat28 = u_xlat28 * u_xlat29 + -0.00286999997;\n       
            u_xlat28 = u_xlat28 * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n       
            u_xlat24 = (-u_xlat24) + 1.0;\n        u_xlat29 = u_xlat24 * 5.25 + -6.80000019;\n       
            u_xlat29 = u_xlat24 * u_xlat29 + 3.82999992;\n        u_xlat29 = u_xlat24
            * u_xlat29 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat29 + -0.00286999997;\n       
            u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n       
            u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat28 * 0.25 + (-u_xlat24);\n       
            u_xlat24 = u_xlat26 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24,
            0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat6.xyz =
            u_xlat2.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat7.xyz = (-vec3(u_xlat24)) * u_xlat6.xyz;\n        u_xlat7.xyz =
            u_xlat7.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat7.xyz
            = exp2(u_xlat7.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat26;\n       
            u_xlat5.xyz = u_xlat4.xyz * u_xlat0.xxx + u_xlat5.xyz;\n        u_xlat0.x
            = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat26 = (-u_xlat0.x) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat5.xyz);\n        u_xlat28 = u_xlat28 / u_xlat0.x;\n        u_xlat5.x
            = dot(u_xlat4.xyz, u_xlat5.xyz);\n        u_xlat0.x = u_xlat5.x / u_xlat0.x;\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat5.x = u_xlat28 * 5.25 +
            -6.80000019;\n        u_xlat5.x = u_xlat28 * u_xlat5.x + 3.82999992;\n       
            u_xlat5.x = u_xlat28 * u_xlat5.x + 0.458999991;\n        u_xlat28 = u_xlat28
            * u_xlat5.x + -0.00286999997;\n        u_xlat28 = u_xlat28 * 1.44269502;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat5.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat5.x = u_xlat0.x
            * u_xlat5.x + 3.82999992;\n        u_xlat5.x = u_xlat0.x * u_xlat5.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat5.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat28 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat26 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat5.xyz = u_xlat6.xyz * (-u_xlat0.xxx);\n       
            u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat5.xyz = exp2(u_xlat5.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat26;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n        u_xlat0.xyz = u_xlat7.xyz
            * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat5.xyz = u_xlat2.xyz *
            u_xlat16_3.xxx;\n        u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_5.xyz = u_xlat5.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat26 = min(u_xlat4.y, -0.00100000005);\n       
            u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat6.xyz = vec3(u_xlat26)
            * u_xlat4.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat28 = dot((-u_xlat4.xyz),
            u_xlat6.xyz);\n        u_xlat6.x = dot(_WorldSpaceLightPos0.xyz, u_xlat6.xyz);\n       
            u_xlat28 = (-u_xlat28) + 1.0;\n        u_xlat14.x = u_xlat28 * 5.25 +
            -6.80000019;\n        u_xlat14.x = u_xlat28 * u_xlat14.x + 3.82999992;\n       
            u_xlat14.x = u_xlat28 * u_xlat14.x + 0.458999991;\n        u_xlat28 =
            u_xlat28 * u_xlat14.x + -0.00286999997;\n        u_xlat28 = u_xlat28
            * 1.44269502;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat6.x
            = (-u_xlat6.x) + 1.0;\n        u_xlat14.x = u_xlat6.x * 5.25 + -6.80000019;\n       
            u_xlat14.x = u_xlat6.x * u_xlat14.x + 3.82999992;\n        u_xlat14.x
            = u_xlat6.x * u_xlat14.x + 0.458999991;\n        u_xlat6.x = u_xlat6.x
            * u_xlat14.x + -0.00286999997;\n        u_xlat6.x = u_xlat6.x * 1.44269502;\n       
            u_xlat6.x = exp2(u_xlat6.x);\n        u_xlat14.xy = vec2(u_xlat28) *
            vec2(0.25, 0.249900013);\n        u_xlat28 = u_xlat6.x * 0.25 + u_xlat14.x;\n       
            u_xlat6.xy = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat7.xyz =
            u_xlat4.xyz * u_xlat6.xxx;\n        u_xlat7.xyz = u_xlat7.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat7.xyz,
            u_xlat7.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 =
            (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat28 = u_xlat26 * u_xlat28 +
            (-u_xlat14.y);\n        u_xlat28 = max(u_xlat28, 0.0);\n        u_xlat28
            = min(u_xlat28, 50.0);\n        u_xlat6.xzw = u_xlat2.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xzw
            = (-vec3(u_xlat28)) * u_xlat6.xzw;\n        u_xlat6.xzw = u_xlat6.xzw
            * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat6.xzw);\n       
            u_xlat26 = u_xlat6.y * u_xlat26;\n        u_xlat6.xyz = u_xlat0.xyz *
            vec3(u_xlat26);\n        u_xlat2.xyz = u_xlat2.xyz * u_xlat16_3.xxx +
            vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat5.xyz
            = u_xlat2.xyz * u_xlat6.xyz;\n        u_xlat16_5.xyz = u_xlat5.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x,
            _GroundColor.y, _GroundColor.z) * u_xlat16_0.xyz + u_xlat16_5.xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x
            = dot(_WorldSpaceLightPos0.xyz, (-u_xlat4.xyz));\n    u_xlat16_3.x =
            u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * 0.75
            + 0.75;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_5.xyz;\n    vs_TEXCOORD2.xyz
            = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_3.x = dot(_LightColor0.xyz,
            _LightColor0.xyz);\n    u_xlat16_3.x = sqrt(u_xlat16_3.x);\n    u_xlat16_3.x
            = max(u_xlat16_3.x, 0.25);\n    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);\n   
            u_xlat16_11.xyz = u_xlat16_0.xyz * vec3(8000.0, 8000.0, 8000.0);\n   
            u_xlat16_11.xyz = clamp(u_xlat16_11.xyz, 0.0, 1.0);\n    u_xlat16_11.xyz
            = u_xlat16_11.xyz * _LightColor0.xyz;\n    u_xlat16_11.xyz = u_xlat16_11.xyz
            * vec3(27.0, 27.0, 27.0);\n    vs_TEXCOORD3.xyz = u_xlat16_11.xyz / u_xlat16_3.xxx;\n   
            vs_TEXCOORD0.xyz = (-u_xlat4.xyz);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tmediump float _SunSize;\nin mediump vec3 vs_TEXCOORD0;\nin mediump
            vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD2;\nin mediump vec3 vs_TEXCOORD3;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nmediump
            vec3 u_xlat16_1;\nbool u_xlatb2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n   
            u_xlat16_0.xyz = vs_TEXCOORD0.xyz + _WorldSpaceLightPos0.xyz;\n    u_xlat16_0.x
            = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);\n    u_xlat16_0.x = sqrt(u_xlat16_0.x);\n   
            u_xlat16_3.x = float(1.0) / _SunSize;\n    u_xlat16_0.x = u_xlat16_3.x
            * u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n   
            u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x
            * u_xlat16_0.x;\n    u_xlat16_0.x = (-u_xlat16_3.x) * u_xlat16_0.x +
            1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x
            = vs_TEXCOORD0.y * 50.0;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0,
            1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n   
            u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n   
            u_xlat16_1.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx + u_xlat16_3.xyz;\n   
            u_xlatb2 = vs_TEXCOORD0.y<0.0;\n    SV_Target0.xyz = (bool(u_xlatb2))
            ? u_xlat16_1.xyz : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_HIGH_QUALITY
          - _SUNDISK_SIMPLE
          Tags:
          - Key: PreviewType
            Value: Skybox
          - Key: QUEUE
            Value: Background
          - Key: RenderType
            Value: Background
        DefinedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _SUNDISK_HIGH_QUALITY
        - _SUNDISK_NONE
        - _SUNDISK_SIMPLE
        KeywordGroups:
        - Keywords:
          - _SUNDISK_NONE
          - _SUNDISK_SIMPLE
          - _SUNDISK_HIGH_QUALITY
          hasDiscard: 0
        KeywordsMinimalCardinality: 1
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - _SUNDISK_NONE
        - shaderCompilerPlatform: 9
          shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - _SUNDISK_NONE
        - shaderCompilerPlatform: 5
          shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - _SUNDISK_SIMPLE
        - shaderCompilerPlatform: 9
          shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - _SUNDISK_SIMPLE
        - shaderCompilerPlatform: 5
          shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - _SUNDISK_HIGH_QUALITY
        - shaderCompilerPlatform: 9
          shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - _SUNDISK_HIGH_QUALITY
        - shaderCompilerPlatform: 5
          shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - _SUNDISK_NONE
          - _SUNDISK_SIMPLE
        - shaderCompilerPlatform: 9
          shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - _SUNDISK_NONE
          - _SUNDISK_SIMPLE
        - shaderCompilerPlatform: 5
          shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - _SUNDISK_HIGH_QUALITY
          - _SUNDISK_SIMPLE
        - shaderCompilerPlatform: 9
          shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - _SUNDISK_HIGH_QUALITY
          - _SUNDISK_SIMPLE
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: PreviewType
          Value: Skybox
        - Key: QUEUE
          Value: Background
        - Key: RenderType
          Value: Background
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
      Tags:
      - Key: PreviewType
        Value: Skybox
      - Key: QUEUE
        Value: Background
      - Key: RenderType
        Value: Background
    Shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - _SUNDISK_HIGH_QUALITY
    - _SUNDISK_NONE
    - _SUNDISK_SIMPLE
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - _SUNDISK_NONE
    - shaderCompilerPlatform: 9
      shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - _SUNDISK_NONE
    - shaderCompilerPlatform: 5
      shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - _SUNDISK_SIMPLE
    - shaderCompilerPlatform: 9
      shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - _SUNDISK_SIMPLE
    - shaderCompilerPlatform: 5
      shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - _SUNDISK_HIGH_QUALITY
    - shaderCompilerPlatform: 9
      shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - _SUNDISK_HIGH_QUALITY
    - shaderCompilerPlatform: 5
      shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - _SUNDISK_NONE
      - _SUNDISK_SIMPLE
    - shaderCompilerPlatform: 9
      shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - _SUNDISK_NONE
      - _SUNDISK_SIMPLE
    - shaderCompilerPlatform: 5
      shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - _SUNDISK_HIGH_QUALITY
      - _SUNDISK_SIMPLE
    - shaderCompilerPlatform: 9
      shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - _SUNDISK_HIGH_QUALITY
      - _SUNDISK_SIMPLE
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 4800000, guid: 53efa1d97f5d9f74285d4330cda14e36, type: 3}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _Color;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute
            highp vec4 in_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump
            vec3 u_xlat16_2;\nbool u_xlatb9;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    u_xlat16_2.xyz = in_COLOR0.xyz / in_COLOR0.www;\n   
            u_xlat0.xyz = u_xlat16_2.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz
            * u_xlat0.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz = u_xlat0.xyz
            * in_COLOR0.www;\n    u_xlat0.xyz = in_COLOR0.xyz * vec3(0.305306017,
            0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n   
            u_xlat0.xyz = in_COLOR0.xyz * u_xlat0.xyz + vec3(0.0125228781, 0.0125228781,
            0.0125228781);\n    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;\n    u_xlatb9
            = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz
            : u_xlat16_2.xyz;\n    u_xlat0.x = 0.0;\n    u_xlat16_1.w = (u_xlatb9)
            ? u_xlat0.x : in_COLOR0.w;\n    u_xlat0.xyz = _Color.www * _Color.xyz;\n   
            u_xlat0.w = _Color.w;\n    vs_COLOR0 = u_xlat0 * u_xlat16_1;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying
            highp vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nlowp vec4 u_xlat10_0;\nvoid
            main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n   
            SV_Target0 = u_xlat10_0 * vs_COLOR0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _Color;\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nin
            highp vec4 in_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_COLOR0;\nvec4
            u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nbool
            u_xlatb9;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat16_2.xyz = in_COLOR0.xyz / in_COLOR0.www;\n    u_xlat0.xyz = u_xlat16_2.xyz
            * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106,
            0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xyz + vec3(0.0125228781,
            0.0125228781, 0.0125228781);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n   
            u_xlat16_2.xyz = u_xlat0.xyz * in_COLOR0.www;\n    u_xlat0.xyz = in_COLOR0.xyz
            * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106,
            0.682171106);\n    u_xlat0.xyz = in_COLOR0.xyz * u_xlat0.xyz + vec3(0.0125228781,
            0.0125228781, 0.0125228781);\n    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;\n   
            u_xlatb9 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz = (bool(u_xlatb9)) ?
            u_xlat0.xyz : u_xlat16_2.xyz;\n    u_xlat0.x = 0.0;\n    u_xlat16_1.w
            = (u_xlatb9) ? u_xlat0.x : in_COLOR0.w;\n    u_xlat0.xyz = _Color.www
            * _Color.xyz;\n    u_xlat0.w = _Color.w;\n    vs_COLOR0 = u_xlat0 * u_xlat16_1;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_COLOR0;\nlayout(location =
            0) out highp vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n   
            u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    SV_Target0 = u_xlat16_0
            * vs_COLOR0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        DefinedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _STRAIGHT_ALPHA_INPUT
        - _
        KeywordGroups:
        - Keywords:
          - _
          - _STRAIGHT_ALPHA_INPUT
          hasDiscard: 1
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: 53efa1d97f5d9f74285d4330cda14e36, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: 53efa1d97f5d9f74285d4330cda14e36, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      - Shader: {fileID: 4800000, guid: 53efa1d97f5d9f74285d4330cda14e36, type: 3}
        ShaderVariants: []
        DefinedKeywords:
        - SHADOWS_CUBE
        - SHADOWS_DEPTH
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        KeywordGroups:
        - Keywords:
          - SHADOWS_DEPTH
          hasDiscard: 0
        - Keywords:
          - SHADOWS_CUBE
          hasDiscard: 0
        KeywordsMinimalCardinality: 2
        ContainsInvalidVariant: 0
        VariantStructures: []
        CompilationErrors: []
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 0
        SerializedObjectId: 1
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: LIGHTMODE
          Value: SHADOWCASTER
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        - Key: SHADOWSUPPORT
          Value: true
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 4800000, guid: 53efa1d97f5d9f74285d4330cda14e36, type: 3}
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
    Shader: {fileID: 4800000, guid: 53efa1d97f5d9f74285d4330cda14e36, type: 3}
    ShaderPath: Assets/Spine/Runtime/spine-unity/Shaders/BlendModes/Spine-Skeleton-PMA-Additive.shader
    ShaderDefinedKeywords:
    - _STRAIGHT_ALPHA_INPUT
    - SHADOWS_DEPTH
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - _
    - SHADOWS_CUBE
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: 53efa1d97f5d9f74285d4330cda14e36, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: 53efa1d97f5d9f74285d4330cda14e36, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 4800000, guid: 1e8a610c9e01c3648bac42585e5fc676, type: 3}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec4 in_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nbool u_xlatb9;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat16_2.xyz = in_COLOR0.xyz / in_COLOR0.www;\n    u_xlat0.xyz = u_xlat16_2.xyz
            * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106,
            0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xyz + vec3(0.0125228781,
            0.0125228781, 0.0125228781);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n   
            u_xlat16_2.xyz = u_xlat0.xyz * in_COLOR0.www;\n    u_xlat0.xyz = in_COLOR0.xyz
            * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106,
            0.682171106);\n    u_xlat0.xyz = in_COLOR0.xyz * u_xlat0.xyz + vec3(0.0125228781,
            0.0125228781, 0.0125228781);\n    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;\n   
            u_xlatb9 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz = (bool(u_xlatb9)) ?
            u_xlat0.xyz : u_xlat16_2.xyz;\n    u_xlat0.x = 0.0;\n    u_xlat16_1.w
            = (u_xlatb9) ? u_xlat0.x : in_COLOR0.w;\n    vs_COLOR0 = u_xlat16_1;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying
            highp vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nlowp vec4 u_xlat10_0;\nvoid
            main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n   
            SV_Target0 = u_xlat10_0 * vs_COLOR0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin
            highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nin highp vec4
            in_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_COLOR0;\nvec4
            u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nbool
            u_xlatb9;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat16_2.xyz = in_COLOR0.xyz / in_COLOR0.www;\n    u_xlat0.xyz = u_xlat16_2.xyz
            * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106,
            0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xyz + vec3(0.0125228781,
            0.0125228781, 0.0125228781);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n   
            u_xlat16_2.xyz = u_xlat0.xyz * in_COLOR0.www;\n    u_xlat0.xyz = in_COLOR0.xyz
            * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106,
            0.682171106);\n    u_xlat0.xyz = in_COLOR0.xyz * u_xlat0.xyz + vec3(0.0125228781,
            0.0125228781, 0.0125228781);\n    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;\n   
            u_xlatb9 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz = (bool(u_xlatb9)) ?
            u_xlat0.xyz : u_xlat16_2.xyz;\n    u_xlat0.x = 0.0;\n    u_xlat16_1.w
            = (u_xlatb9) ? u_xlat0.x : in_COLOR0.w;\n    vs_COLOR0 = u_xlat16_1;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_COLOR0;\nlayout(location =
            0) out highp vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n   
            u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    SV_Target0 = u_xlat16_0
            * vs_COLOR0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec4 in_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nbool u_xlatb9;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat16_2.xyz = in_COLOR0.xyz / in_COLOR0.www;\n    u_xlat0.xyz = u_xlat16_2.xyz
            * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106,
            0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xyz + vec3(0.0125228781,
            0.0125228781, 0.0125228781);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n   
            u_xlat16_2.xyz = u_xlat0.xyz * in_COLOR0.www;\n    u_xlat0.xyz = in_COLOR0.xyz
            * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106,
            0.682171106);\n    u_xlat0.xyz = in_COLOR0.xyz * u_xlat0.xyz + vec3(0.0125228781,
            0.0125228781, 0.0125228781);\n    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;\n   
            u_xlatb9 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz = (bool(u_xlatb9)) ?
            u_xlat0.xyz : u_xlat16_2.xyz;\n    u_xlat0.x = 0.0;\n    u_xlat16_1.w
            = (u_xlatb9) ? u_xlat0.x : in_COLOR0.w;\n    vs_COLOR0 = u_xlat16_1;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying
            highp vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nlowp vec4 u_xlat10_0;\nvoid
            main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n   
            u_xlat10_0.xyz = u_xlat10_0.www * u_xlat10_0.xyz;\n    SV_Target0 = u_xlat10_0
            * vs_COLOR0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _STRAIGHT_ALPHA_INPUT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin
            highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nin highp vec4
            in_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_COLOR0;\nvec4
            u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nbool
            u_xlatb9;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat16_2.xyz = in_COLOR0.xyz / in_COLOR0.www;\n    u_xlat0.xyz = u_xlat16_2.xyz
            * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106,
            0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xyz + vec3(0.0125228781,
            0.0125228781, 0.0125228781);\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n   
            u_xlat16_2.xyz = u_xlat0.xyz * in_COLOR0.www;\n    u_xlat0.xyz = in_COLOR0.xyz
            * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106,
            0.682171106);\n    u_xlat0.xyz = in_COLOR0.xyz * u_xlat0.xyz + vec3(0.0125228781,
            0.0125228781, 0.0125228781);\n    u_xlat0.xyz = u_xlat0.xyz * in_COLOR0.xyz;\n   
            u_xlatb9 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz = (bool(u_xlatb9)) ?
            u_xlat0.xyz : u_xlat16_2.xyz;\n    u_xlat0.x = 0.0;\n    u_xlat16_1.w
            = (u_xlatb9) ? u_xlat0.x : in_COLOR0.w;\n    vs_COLOR0 = u_xlat16_1;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_COLOR0;\nlayout(location =
            0) out highp vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n   
            u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_0.xyz
            = u_xlat16_0.www * u_xlat16_0.xyz;\n    SV_Target0 = u_xlat16_0 * vs_COLOR0;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _STRAIGHT_ALPHA_INPUT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        DefinedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _STRAIGHT_ALPHA_INPUT
        - _
        KeywordGroups:
        - Keywords:
          - _
          - _STRAIGHT_ALPHA_INPUT
          hasDiscard: 1
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: 1e8a610c9e01c3648bac42585e5fc676, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: 1e8a610c9e01c3648bac42585e5fc676, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: 1e8a610c9e01c3648bac42585e5fc676, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - _STRAIGHT_ALPHA_INPUT
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: 1e8a610c9e01c3648bac42585e5fc676, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - _STRAIGHT_ALPHA_INPUT
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      - Shader: {fileID: 4800000, guid: 1e8a610c9e01c3648bac42585e5fc676, type: 3}
        ShaderVariants: []
        DefinedKeywords:
        - SHADOWS_CUBE
        - SHADOWS_DEPTH
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        KeywordGroups:
        - Keywords:
          - SHADOWS_DEPTH
          hasDiscard: 0
        - Keywords:
          - SHADOWS_CUBE
          hasDiscard: 0
        KeywordsMinimalCardinality: 2
        ContainsInvalidVariant: 0
        VariantStructures: []
        CompilationErrors: []
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 0
        SerializedObjectId: 1
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: LIGHTMODE
          Value: SHADOWCASTER
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        - Key: SHADOWSUPPORT
          Value: true
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 4800000, guid: 1e8a610c9e01c3648bac42585e5fc676, type: 3}
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
    Shader: {fileID: 4800000, guid: 1e8a610c9e01c3648bac42585e5fc676, type: 3}
    ShaderPath: Assets/Spine/Runtime/spine-unity/Shaders/Spine-Skeleton.shader
    ShaderDefinedKeywords:
    - _STRAIGHT_ALPHA_INPUT
    - SHADOWS_DEPTH
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - _
    - SHADOWS_CUBE
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: 1e8a610c9e01c3648bac42585e5fc676, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: 1e8a610c9e01c3648bac42585e5fc676, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: 1e8a610c9e01c3648bac42585e5fc676, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - _STRAIGHT_ALPHA_INPUT
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: 1e8a610c9e01c3648bac42585e5fc676, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - _STRAIGHT_ALPHA_INPUT
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 4800000, guid: fa95b0fb6983c0f40a152e6f9aa82bfb, type: 3}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump
            vec3 u_xlat16_2;\nfloat u_xlat3;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat16_2.xyz
            = max(in_COLOR0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz
            = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106,
            0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz
            + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat1.xyz =
            u_xlat0.xyz * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.xyz / in_COLOR0.www;\n   
            u_xlat0.xyz = u_xlat16_2.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz
            * u_xlat0.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz =
            clamp(u_xlat16_2.xyz, 0.0, 1.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * in_COLOR0.www;\n    u_xlatb0 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz
            = (bool(u_xlatb0)) ? u_xlat1.xyz : u_xlat16_2.xyz;\n    u_xlat3 = 0.0;\n   
            u_xlat16_1.w = (u_xlatb0) ? u_xlat3 : in_COLOR0.w;\n    u_xlat16_0.xyz
            = _Color.www * _Color.xyz;\n    u_xlat16_0.w = _Color.w;\n    u_xlat0
            = u_xlat16_0 * u_xlat16_1;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            mediump vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nmediump vec4
            u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlatb0.xy =
            greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw
            = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x
            = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0)
            : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w
            = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n   
            u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_1 + _TextureSampleAdd;\n   
            u_xlat16_1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat0 = u_xlat0.xxxx * u_xlat16_1;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin
            highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec2
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4
            u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump
            vec3 u_xlat16_2;\nfloat u_xlat3;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat16_2.xyz
            = max(in_COLOR0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz
            = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106,
            0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz
            + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat1.xyz =
            u_xlat0.xyz * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.xyz / in_COLOR0.www;\n   
            u_xlat0.xyz = u_xlat16_2.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz
            * u_xlat0.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz =
            clamp(u_xlat16_2.xyz, 0.0, 1.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * in_COLOR0.www;\n    u_xlatb0 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz
            = (bool(u_xlatb0)) ? u_xlat1.xyz : u_xlat16_2.xyz;\n    u_xlat3 = 0.0;\n   
            u_xlat16_1.w = (u_xlatb0) ? u_xlat3 : in_COLOR0.w;\n    u_xlat16_0.xyz
            = _Color.www * _Color.xyz;\n    u_xlat16_0.w = _Color.w;\n    u_xlat0
            = u_xlat16_0 * u_xlat16_1;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform
            \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin mediump vec2 vs_TEXCOORD0;\nin highp vec4
            vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nbvec4 u_xlatb0;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n   
            u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n   
            u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n   
            u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y
            ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n   
            u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw
            * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_1
            = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat16_1 +
            _TextureSampleAdd;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat0
            = u_xlat0.xxxx * u_xlat16_1;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump
            vec3 u_xlat16_2;\nfloat u_xlat3;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat16_2.xyz
            = max(in_COLOR0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz
            = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106,
            0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz
            + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat1.xyz =
            u_xlat0.xyz * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.xyz / in_COLOR0.www;\n   
            u_xlat0.xyz = u_xlat16_2.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz
            * u_xlat0.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz =
            clamp(u_xlat16_2.xyz, 0.0, 1.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * in_COLOR0.www;\n    u_xlatb0 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz
            = (bool(u_xlatb0)) ? u_xlat1.xyz : u_xlat16_2.xyz;\n    u_xlat3 = 0.0;\n   
            u_xlat16_1.w = (u_xlatb0) ? u_xlat3 : in_COLOR0.w;\n    u_xlat16_0.xyz
            = _Color.www * _Color.xyz;\n    u_xlat16_0.w = _Color.w;\n    u_xlat0
            = u_xlat16_0 * u_xlat16_1;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            mediump vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nmediump vec4
            u_xlat16_1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n   
            u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n   
            u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n   
            u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y
            ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n   
            u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw
            * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1
            = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_1
            + _TextureSampleAdd;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat16_2
            = u_xlat16_1.w * u_xlat0.x + -0.00100000005;\n    u_xlat0 = u_xlat0.xxxx
            * u_xlat16_1;\n    SV_Target0 = u_xlat0;\n    u_xlatb0.x = u_xlat16_2<0.0;\n   
            if(u_xlatb0.x){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin
            highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec2
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4
            u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump
            vec3 u_xlat16_2;\nfloat u_xlat3;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat16_2.xyz
            = max(in_COLOR0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz
            = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106,
            0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz
            + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat1.xyz =
            u_xlat0.xyz * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.xyz / in_COLOR0.www;\n   
            u_xlat0.xyz = u_xlat16_2.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz
            * u_xlat0.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz =
            clamp(u_xlat16_2.xyz, 0.0, 1.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * in_COLOR0.www;\n    u_xlatb0 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz
            = (bool(u_xlatb0)) ? u_xlat1.xyz : u_xlat16_2.xyz;\n    u_xlat3 = 0.0;\n   
            u_xlat16_1.w = (u_xlatb0) ? u_xlat3 : in_COLOR0.w;\n    u_xlat16_0.xyz
            = _Color.www * _Color.xyz;\n    u_xlat16_0.w = _Color.w;\n    u_xlat0
            = u_xlat16_0 * u_xlat16_1;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform
            \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin mediump vec2 vs_TEXCOORD0;\nin highp vec4
            vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nbvec4 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvoid
            main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n   
            u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n   
            u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y
            ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n   
            u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw
            * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_1
            = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat16_1 +
            _TextureSampleAdd;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat16_2
            = u_xlat16_1.w * u_xlat0.x + -0.00100000005;\n    u_xlat0 = u_xlat0.xxxx
            * u_xlat16_1;\n    SV_Target0 = u_xlat0;\n    u_xlatb0.x = u_xlat16_2<0.0;\n   
            if(u_xlatb0.x){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        DefinedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _CANVAS_GROUP_COMPATIBLE
        - _STRAIGHT_ALPHA_INPUT
        - _
        - __
        - UNITY_UI_ALPHACLIP
        KeywordGroups:
        - Keywords:
          - _
          - _STRAIGHT_ALPHA_INPUT
          hasDiscard: 1
        - Keywords:
          - _
          - _CANVAS_GROUP_COMPATIBLE
          hasDiscard: 1
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
          hasDiscard: 1
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: fa95b0fb6983c0f40a152e6f9aa82bfb, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: fa95b0fb6983c0f40a152e6f9aa82bfb, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: fa95b0fb6983c0f40a152e6f9aa82bfb, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: fa95b0fb6983c0f40a152e6f9aa82bfb, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: CanUseSpriteAtlas
          Value: true
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 4800000, guid: fa95b0fb6983c0f40a152e6f9aa82bfb, type: 3}
      Tags:
      - Key: CanUseSpriteAtlas
        Value: true
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
    Shader: {fileID: 4800000, guid: fa95b0fb6983c0f40a152e6f9aa82bfb, type: 3}
    ShaderPath: Assets/Spine/Runtime/spine-unity/Shaders/SkeletonGraphic/Spine-SkeletonGraphic.shader
    ShaderDefinedKeywords:
    - _CANVAS_GROUP_COMPATIBLE
    - _STRAIGHT_ALPHA_INPUT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - _
    - __
    - UNITY_UI_ALPHACLIP
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: fa95b0fb6983c0f40a152e6f9aa82bfb, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: fa95b0fb6983c0f40a152e6f9aa82bfb, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: fa95b0fb6983c0f40a152e6f9aa82bfb, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: fa95b0fb6983c0f40a152e6f9aa82bfb, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 4800000, guid: a1e4ab34b07f81e4e94f0d241c416669, type: 3}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump
            vec3 u_xlat16_2;\nfloat u_xlat3;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat16_2.xyz
            = max(in_COLOR0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz
            = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106,
            0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz
            + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat1.xyz =
            u_xlat0.xyz * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.xyz / in_COLOR0.www;\n   
            u_xlat0.xyz = u_xlat16_2.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz
            * u_xlat0.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz =
            clamp(u_xlat16_2.xyz, 0.0, 1.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * in_COLOR0.www;\n    u_xlatb0 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz
            = (bool(u_xlatb0)) ? u_xlat1.xyz : u_xlat16_2.xyz;\n    u_xlat3 = 0.0;\n   
            u_xlat16_1.w = (u_xlatb0) ? u_xlat3 : in_COLOR0.w;\n    u_xlat16_0.xyz
            = _Color.www * _Color.xyz;\n    u_xlat16_0.w = _Color.w;\n    u_xlat0
            = u_xlat16_0 * u_xlat16_1;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            mediump vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nmediump vec4
            u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlatb0.xy =
            greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw
            = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x
            = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0)
            : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w
            = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n   
            u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_1 + _TextureSampleAdd;\n   
            u_xlat16_1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat0 = u_xlat0.xxxx * u_xlat16_1;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin
            highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec2
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4
            u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump
            vec3 u_xlat16_2;\nfloat u_xlat3;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat16_2.xyz
            = max(in_COLOR0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz
            = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106,
            0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz
            + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat1.xyz =
            u_xlat0.xyz * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.xyz / in_COLOR0.www;\n   
            u_xlat0.xyz = u_xlat16_2.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz
            * u_xlat0.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz =
            clamp(u_xlat16_2.xyz, 0.0, 1.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * in_COLOR0.www;\n    u_xlatb0 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz
            = (bool(u_xlatb0)) ? u_xlat1.xyz : u_xlat16_2.xyz;\n    u_xlat3 = 0.0;\n   
            u_xlat16_1.w = (u_xlatb0) ? u_xlat3 : in_COLOR0.w;\n    u_xlat16_0.xyz
            = _Color.www * _Color.xyz;\n    u_xlat16_0.w = _Color.w;\n    u_xlat0
            = u_xlat16_0 * u_xlat16_1;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform
            \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin mediump vec2 vs_TEXCOORD0;\nin highp vec4
            vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nbvec4 u_xlatb0;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n   
            u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n   
            u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n   
            u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y
            ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n   
            u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw
            * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_1
            = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat16_1 +
            _TextureSampleAdd;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat0
            = u_xlat0.xxxx * u_xlat16_1;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump
            vec3 u_xlat16_2;\nfloat u_xlat3;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat16_2.xyz
            = max(in_COLOR0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz
            = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106,
            0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz
            + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat1.xyz =
            u_xlat0.xyz * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.xyz / in_COLOR0.www;\n   
            u_xlat0.xyz = u_xlat16_2.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz
            * u_xlat0.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz =
            clamp(u_xlat16_2.xyz, 0.0, 1.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * in_COLOR0.www;\n    u_xlatb0 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz
            = (bool(u_xlatb0)) ? u_xlat1.xyz : u_xlat16_2.xyz;\n    u_xlat3 = 0.0;\n   
            u_xlat16_1.w = (u_xlatb0) ? u_xlat3 : in_COLOR0.w;\n    u_xlat16_0.xyz
            = _Color.www * _Color.xyz;\n    u_xlat16_0.w = _Color.w;\n    u_xlat0
            = u_xlat16_0 * u_xlat16_1;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            mediump vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nmediump vec4
            u_xlat16_1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n   
            u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n   
            u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n   
            u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y
            ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n   
            u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw
            * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1
            = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_1
            + _TextureSampleAdd;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat16_2
            = u_xlat16_1.w * u_xlat0.x + -0.00100000005;\n    u_xlat0 = u_xlat0.xxxx
            * u_xlat16_1;\n    SV_Target0 = u_xlat0;\n    u_xlatb0.x = u_xlat16_2<0.0;\n   
            if(u_xlatb0.x){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin
            highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec2
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4
            u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump
            vec3 u_xlat16_2;\nfloat u_xlat3;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat16_2.xyz
            = max(in_COLOR0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz
            = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106,
            0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz
            + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat1.xyz =
            u_xlat0.xyz * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.xyz / in_COLOR0.www;\n   
            u_xlat0.xyz = u_xlat16_2.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz
            * u_xlat0.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz =
            clamp(u_xlat16_2.xyz, 0.0, 1.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * in_COLOR0.www;\n    u_xlatb0 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz
            = (bool(u_xlatb0)) ? u_xlat1.xyz : u_xlat16_2.xyz;\n    u_xlat3 = 0.0;\n   
            u_xlat16_1.w = (u_xlatb0) ? u_xlat3 : in_COLOR0.w;\n    u_xlat16_0.xyz
            = _Color.www * _Color.xyz;\n    u_xlat16_0.w = _Color.w;\n    u_xlat0
            = u_xlat16_0 * u_xlat16_1;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform
            \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin mediump vec2 vs_TEXCOORD0;\nin highp vec4
            vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nbvec4 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvoid
            main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n   
            u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n   
            u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y
            ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n   
            u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw
            * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_1
            = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat16_1 +
            _TextureSampleAdd;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat16_2
            = u_xlat16_1.w * u_xlat0.x + -0.00100000005;\n    u_xlat0 = u_xlat0.xxxx
            * u_xlat16_1;\n    SV_Target0 = u_xlat0;\n    u_xlatb0.x = u_xlat16_2<0.0;\n   
            if(u_xlatb0.x){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        DefinedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _CANVAS_GROUP_COMPATIBLE
        - _STRAIGHT_ALPHA_INPUT
        - _
        - __
        - UNITY_UI_ALPHACLIP
        KeywordGroups:
        - Keywords:
          - _
          - _STRAIGHT_ALPHA_INPUT
          hasDiscard: 1
        - Keywords:
          - _
          - _CANVAS_GROUP_COMPATIBLE
          hasDiscard: 1
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
          hasDiscard: 1
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: a1e4ab34b07f81e4e94f0d241c416669, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: a1e4ab34b07f81e4e94f0d241c416669, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: a1e4ab34b07f81e4e94f0d241c416669, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: a1e4ab34b07f81e4e94f0d241c416669, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: CanUseSpriteAtlas
          Value: true
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 4800000, guid: a1e4ab34b07f81e4e94f0d241c416669, type: 3}
      Tags:
      - Key: CanUseSpriteAtlas
        Value: true
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
    Shader: {fileID: 4800000, guid: a1e4ab34b07f81e4e94f0d241c416669, type: 3}
    ShaderPath: Assets/Spine/Runtime/spine-unity/Shaders/SkeletonGraphic/Spine-SkeletonGraphic-Additive.shader
    ShaderDefinedKeywords:
    - _CANVAS_GROUP_COMPATIBLE
    - _STRAIGHT_ALPHA_INPUT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - _
    - __
    - UNITY_UI_ALPHACLIP
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: a1e4ab34b07f81e4e94f0d241c416669, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: a1e4ab34b07f81e4e94f0d241c416669, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: a1e4ab34b07f81e4e94f0d241c416669, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: a1e4ab34b07f81e4e94f0d241c416669, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 4800000, guid: cfbf95ed0fe6c554c8c2ee6c8325937c, type: 3}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump
            vec3 u_xlat16_2;\nfloat u_xlat3;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat16_2.xyz
            = max(in_COLOR0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz
            = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106,
            0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz
            + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat1.xyz =
            u_xlat0.xyz * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.xyz / in_COLOR0.www;\n   
            u_xlat0.xyz = u_xlat16_2.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz
            * u_xlat0.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz =
            clamp(u_xlat16_2.xyz, 0.0, 1.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * in_COLOR0.www;\n    u_xlatb0 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz
            = (bool(u_xlatb0)) ? u_xlat1.xyz : u_xlat16_2.xyz;\n    u_xlat3 = 0.0;\n   
            u_xlat16_1.w = (u_xlatb0) ? u_xlat3 : in_COLOR0.w;\n    u_xlat16_0.xyz
            = _Color.www * _Color.xyz;\n    u_xlat16_0.w = _Color.w;\n    u_xlat0
            = u_xlat16_0 * u_xlat16_1;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            mediump vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nmediump vec4
            u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlatb0.xy =
            greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw
            = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x
            = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0)
            : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w
            = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n   
            u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_1 + _TextureSampleAdd;\n   
            u_xlat16_1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat0 = u_xlat0.xxxx * u_xlat16_1;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin
            highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec2
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4
            u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump
            vec3 u_xlat16_2;\nfloat u_xlat3;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat16_2.xyz
            = max(in_COLOR0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz
            = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106,
            0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz
            + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat1.xyz =
            u_xlat0.xyz * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.xyz / in_COLOR0.www;\n   
            u_xlat0.xyz = u_xlat16_2.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz
            * u_xlat0.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz =
            clamp(u_xlat16_2.xyz, 0.0, 1.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * in_COLOR0.www;\n    u_xlatb0 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz
            = (bool(u_xlatb0)) ? u_xlat1.xyz : u_xlat16_2.xyz;\n    u_xlat3 = 0.0;\n   
            u_xlat16_1.w = (u_xlatb0) ? u_xlat3 : in_COLOR0.w;\n    u_xlat16_0.xyz
            = _Color.www * _Color.xyz;\n    u_xlat16_0.w = _Color.w;\n    u_xlat0
            = u_xlat16_0 * u_xlat16_1;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform
            \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin mediump vec2 vs_TEXCOORD0;\nin highp vec4
            vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nbvec4 u_xlatb0;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n   
            u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n   
            u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n   
            u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y
            ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n   
            u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw
            * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_1
            = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat16_1 +
            _TextureSampleAdd;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat0
            = u_xlat0.xxxx * u_xlat16_1;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump
            vec3 u_xlat16_2;\nfloat u_xlat3;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat16_2.xyz
            = max(in_COLOR0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz
            = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106,
            0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz
            + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat1.xyz =
            u_xlat0.xyz * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.xyz / in_COLOR0.www;\n   
            u_xlat0.xyz = u_xlat16_2.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz
            * u_xlat0.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz =
            clamp(u_xlat16_2.xyz, 0.0, 1.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * in_COLOR0.www;\n    u_xlatb0 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz
            = (bool(u_xlatb0)) ? u_xlat1.xyz : u_xlat16_2.xyz;\n    u_xlat3 = 0.0;\n   
            u_xlat16_1.w = (u_xlatb0) ? u_xlat3 : in_COLOR0.w;\n    u_xlat16_0.xyz
            = _Color.www * _Color.xyz;\n    u_xlat16_0.w = _Color.w;\n    u_xlat0
            = u_xlat16_0 * u_xlat16_1;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            mediump vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nmediump vec4
            u_xlat16_1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n   
            u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n   
            u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n   
            u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y
            ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n   
            u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw
            * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1
            = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_1
            + _TextureSampleAdd;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat16_2
            = u_xlat16_1.w * u_xlat0.x + -0.00100000005;\n    u_xlat0 = u_xlat0.xxxx
            * u_xlat16_1;\n    SV_Target0 = u_xlat0;\n    u_xlatb0.x = u_xlat16_2<0.0;\n   
            if(u_xlatb0.x){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin
            highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec2
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4
            u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump
            vec3 u_xlat16_2;\nfloat u_xlat3;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat16_2.xyz
            = max(in_COLOR0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz
            = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106,
            0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz
            + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat1.xyz =
            u_xlat0.xyz * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.xyz / in_COLOR0.www;\n   
            u_xlat0.xyz = u_xlat16_2.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz
            * u_xlat0.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz =
            clamp(u_xlat16_2.xyz, 0.0, 1.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * in_COLOR0.www;\n    u_xlatb0 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz
            = (bool(u_xlatb0)) ? u_xlat1.xyz : u_xlat16_2.xyz;\n    u_xlat3 = 0.0;\n   
            u_xlat16_1.w = (u_xlatb0) ? u_xlat3 : in_COLOR0.w;\n    u_xlat16_0.xyz
            = _Color.www * _Color.xyz;\n    u_xlat16_0.w = _Color.w;\n    u_xlat0
            = u_xlat16_0 * u_xlat16_1;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform
            \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin mediump vec2 vs_TEXCOORD0;\nin highp vec4
            vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nbvec4 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvoid
            main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n   
            u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n   
            u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y
            ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n   
            u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw
            * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_1
            = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat16_1 +
            _TextureSampleAdd;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat16_2
            = u_xlat16_1.w * u_xlat0.x + -0.00100000005;\n    u_xlat0 = u_xlat0.xxxx
            * u_xlat16_1;\n    SV_Target0 = u_xlat0;\n    u_xlatb0.x = u_xlat16_2<0.0;\n   
            if(u_xlatb0.x){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        DefinedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _CANVAS_GROUP_COMPATIBLE
        - _STRAIGHT_ALPHA_INPUT
        - _
        - __
        - UNITY_UI_ALPHACLIP
        KeywordGroups:
        - Keywords:
          - _
          - _STRAIGHT_ALPHA_INPUT
          hasDiscard: 1
        - Keywords:
          - _
          - _CANVAS_GROUP_COMPATIBLE
          hasDiscard: 1
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
          hasDiscard: 1
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: cfbf95ed0fe6c554c8c2ee6c8325937c, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: cfbf95ed0fe6c554c8c2ee6c8325937c, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: cfbf95ed0fe6c554c8c2ee6c8325937c, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: cfbf95ed0fe6c554c8c2ee6c8325937c, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: CanUseSpriteAtlas
          Value: true
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 4800000, guid: cfbf95ed0fe6c554c8c2ee6c8325937c, type: 3}
      Tags:
      - Key: CanUseSpriteAtlas
        Value: true
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
    Shader: {fileID: 4800000, guid: cfbf95ed0fe6c554c8c2ee6c8325937c, type: 3}
    ShaderPath: Assets/Spine/Runtime/spine-unity/Shaders/SkeletonGraphic/Spine-SkeletonGraphic-Multiply.shader
    ShaderDefinedKeywords:
    - _CANVAS_GROUP_COMPATIBLE
    - _STRAIGHT_ALPHA_INPUT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - _
    - __
    - UNITY_UI_ALPHACLIP
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: cfbf95ed0fe6c554c8c2ee6c8325937c, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: cfbf95ed0fe6c554c8c2ee6c8325937c, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: cfbf95ed0fe6c554c8c2ee6c8325937c, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: cfbf95ed0fe6c554c8c2ee6c8325937c, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 4800000, guid: c61244023592f95479fddd71b5067683, type: 3}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump
            vec3 u_xlat16_2;\nfloat u_xlat3;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat16_2.xyz
            = max(in_COLOR0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz
            = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106,
            0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz
            + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat1.xyz =
            u_xlat0.xyz * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.xyz / in_COLOR0.www;\n   
            u_xlat0.xyz = u_xlat16_2.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz
            * u_xlat0.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz =
            clamp(u_xlat16_2.xyz, 0.0, 1.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * in_COLOR0.www;\n    u_xlatb0 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz
            = (bool(u_xlatb0)) ? u_xlat1.xyz : u_xlat16_2.xyz;\n    u_xlat3 = 0.0;\n   
            u_xlat16_1.w = (u_xlatb0) ? u_xlat3 : in_COLOR0.w;\n    u_xlat16_0.xyz
            = _Color.www * _Color.xyz;\n    u_xlat16_0.w = _Color.w;\n    u_xlat0
            = u_xlat16_0 * u_xlat16_1;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            mediump vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nmediump vec4
            u_xlat16_1;\nlowp vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlatb0.xy =
            greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw
            = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x
            = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0)
            : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w
            = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n   
            u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_1 + _TextureSampleAdd;\n   
            u_xlat16_1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat0 = u_xlat0.xxxx * u_xlat16_1;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin
            highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec2
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4
            u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump
            vec3 u_xlat16_2;\nfloat u_xlat3;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat16_2.xyz
            = max(in_COLOR0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz
            = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106,
            0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz
            + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat1.xyz =
            u_xlat0.xyz * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.xyz / in_COLOR0.www;\n   
            u_xlat0.xyz = u_xlat16_2.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz
            * u_xlat0.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz =
            clamp(u_xlat16_2.xyz, 0.0, 1.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * in_COLOR0.www;\n    u_xlatb0 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz
            = (bool(u_xlatb0)) ? u_xlat1.xyz : u_xlat16_2.xyz;\n    u_xlat3 = 0.0;\n   
            u_xlat16_1.w = (u_xlatb0) ? u_xlat3 : in_COLOR0.w;\n    u_xlat16_0.xyz
            = _Color.www * _Color.xyz;\n    u_xlat16_0.w = _Color.w;\n    u_xlat0
            = u_xlat16_0 * u_xlat16_1;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform
            \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin mediump vec2 vs_TEXCOORD0;\nin highp vec4
            vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nbvec4 u_xlatb0;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n   
            u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n   
            u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n   
            u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y
            ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n   
            u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw
            * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_1
            = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat16_1 +
            _TextureSampleAdd;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat0
            = u_xlat0.xxxx * u_xlat16_1;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump
            vec3 u_xlat16_2;\nfloat u_xlat3;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat16_2.xyz
            = max(in_COLOR0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz
            = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106,
            0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz
            + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat1.xyz =
            u_xlat0.xyz * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.xyz / in_COLOR0.www;\n   
            u_xlat0.xyz = u_xlat16_2.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz
            * u_xlat0.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz =
            clamp(u_xlat16_2.xyz, 0.0, 1.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * in_COLOR0.www;\n    u_xlatb0 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz
            = (bool(u_xlatb0)) ? u_xlat1.xyz : u_xlat16_2.xyz;\n    u_xlat3 = 0.0;\n   
            u_xlat16_1.w = (u_xlatb0) ? u_xlat3 : in_COLOR0.w;\n    u_xlat16_0.xyz
            = _Color.www * _Color.xyz;\n    u_xlat16_0.w = _Color.w;\n    u_xlat0
            = u_xlat16_0 * u_xlat16_1;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            mediump vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nmediump vec4
            u_xlat16_1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n   
            u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n   
            u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n   
            u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y
            ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n   
            u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw
            * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1
            = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_1
            + _TextureSampleAdd;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat16_2
            = u_xlat16_1.w * u_xlat0.x + -0.00100000005;\n    u_xlat0 = u_xlat0.xxxx
            * u_xlat16_1;\n    SV_Target0 = u_xlat0;\n    u_xlatb0.x = u_xlat16_2<0.0;\n   
            if(u_xlatb0.x){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin
            highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec2
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4
            u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump
            vec3 u_xlat16_2;\nfloat u_xlat3;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat16_2.xyz
            = max(in_COLOR0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = log2(u_xlat16_2.xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n   
            u_xlat0.xyz = exp2(u_xlat0.xyz);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995,
            1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n   
            u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz
            = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106,
            0.682171106, 0.682171106);\n    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz
            + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat1.xyz =
            u_xlat0.xyz * u_xlat1.xyz;\n    u_xlat16_2.xyz = u_xlat0.xyz / in_COLOR0.www;\n   
            u_xlat0.xyz = u_xlat16_2.xyz * vec3(0.305306017, 0.305306017, 0.305306017)
            + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat0.xyz = u_xlat16_2.xyz
            * u_xlat0.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n   
            u_xlat16_2.xyz = u_xlat0.xyz * u_xlat16_2.xyz;\n    u_xlat16_2.xyz =
            clamp(u_xlat16_2.xyz, 0.0, 1.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * in_COLOR0.www;\n    u_xlatb0 = in_COLOR0.w==0.0;\n    u_xlat16_1.xyz
            = (bool(u_xlatb0)) ? u_xlat1.xyz : u_xlat16_2.xyz;\n    u_xlat3 = 0.0;\n   
            u_xlat16_1.w = (u_xlatb0) ? u_xlat3 : in_COLOR0.w;\n    u_xlat16_0.xyz
            = _Color.www * _Color.xyz;\n    u_xlat16_0.w = _Color.w;\n    u_xlat0
            = u_xlat16_0 * u_xlat16_1;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform
            \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin mediump vec2 vs_TEXCOORD0;\nin highp vec4
            vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nbvec4 u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvoid
            main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n   
            u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n   
            u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y
            ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n   
            u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw
            * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_1
            = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat16_1 +
            _TextureSampleAdd;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0;\n    u_xlat16_2
            = u_xlat16_1.w * u_xlat0.x + -0.00100000005;\n    u_xlat0 = u_xlat0.xxxx
            * u_xlat16_1;\n    SV_Target0 = u_xlat0;\n    u_xlatb0.x = u_xlat16_2<0.0;\n   
            if(u_xlatb0.x){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        DefinedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _CANVAS_GROUP_COMPATIBLE
        - _STRAIGHT_ALPHA_INPUT
        - _
        - __
        - UNITY_UI_ALPHACLIP
        KeywordGroups:
        - Keywords:
          - _
          - _STRAIGHT_ALPHA_INPUT
          hasDiscard: 1
        - Keywords:
          - _
          - _CANVAS_GROUP_COMPATIBLE
          hasDiscard: 1
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
          hasDiscard: 1
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: c61244023592f95479fddd71b5067683, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: c61244023592f95479fddd71b5067683, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: c61244023592f95479fddd71b5067683, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: c61244023592f95479fddd71b5067683, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: CanUseSpriteAtlas
          Value: true
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 4800000, guid: c61244023592f95479fddd71b5067683, type: 3}
      Tags:
      - Key: CanUseSpriteAtlas
        Value: true
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
    Shader: {fileID: 4800000, guid: c61244023592f95479fddd71b5067683, type: 3}
    ShaderPath: Assets/Spine/Runtime/spine-unity/Shaders/SkeletonGraphic/Spine-SkeletonGraphic-Screen.shader
    ShaderDefinedKeywords:
    - _CANVAS_GROUP_COMPATIBLE
    - _STRAIGHT_ALPHA_INPUT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - _
    - __
    - UNITY_UI_ALPHACLIP
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: c61244023592f95479fddd71b5067683, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: c61244023592f95479fddd71b5067683, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: c61244023592f95479fddd71b5067683, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: c61244023592f95479fddd71b5067683, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4
            hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform
            \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat
            _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool
            u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n   
            u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n   
            u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy =
            u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump
            float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nfloat u_xlat4;\nlowp vec4 u_xlat10_4;\nfloat u_xlat5;\nbool
            u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid
            main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x)
            + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n   
            u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n   
            u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n   
            u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y
            + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6
            = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1
            * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY)
            * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex,
            u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz
            = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex,
            u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n   
            u_xlat4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz
            * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n   
            u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4);\n    u_xlat16_2
            = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz *
            vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w
            + u_xlat16_2.w;\n    u_xlat4 = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y
            + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1
            = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n   
            u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n   
            SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat
            _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin
            highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin
            highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool
            u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n   
            u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n   
            u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy =
            u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nUNITY_LOCATION(0) uniform
            mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D
            _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin
            mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump
            vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump vec4
            u_xlat16_4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat
            u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat16_0.x
            = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat16_0.x +
            (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n   
            u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth
            * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1
            = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1
            = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n   
            u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x
            * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n   
            u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n   
            u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0
            * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n   
            u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n   
            u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_4.xyz;\n    u_xlat4 = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz
            = u_xlat0.xyz * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www
            + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w
            + (-u_xlat4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz
            = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w
            * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat4 = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y
            + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1
            = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n   
            u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n   
            SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4
            hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump vec4 _UnderlayColor;\nuniform
            \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform
            \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform
            \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat
            _ScaleRatioA;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform
            \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat
            _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform
            \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat
            _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute
            highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying
            mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nfloat u_xlat4;\nvec3 u_xlat6;\nvec2
            u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid
            main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat3 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1
            = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY)
            * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n   
            u_xlat0.x = u_xlat1.x * u_xlat6.x + 1.0;\n    u_xlat0.x = u_xlat6.x /
            u_xlat0.x;\n    u_xlat4 = u_xlat8.x * u_xlat0.x + -0.5;\n    u_xlat8.x
            = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n   
            u_xlat1.xy = u_xlat1.xy / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy
            = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n   
            vs_TEXCOORD4.w = (-u_xlat8.x) * 0.5 + u_xlat4;\n    u_xlat0.xyz = _UnderlayColor.www
            * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w
            = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n   
            u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0
            + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n   
            vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n   
            vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump
            float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nfloat u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump float u_xlat16_6;\nfloat
            u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat0.x =
            _OutlineWidth * _ScaleRatioA;\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n   
            u_xlat16_1 = min(u_xlat0.x, 1.0);\n    u_xlat16_6 = u_xlat0.x * 0.5;\n   
            u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat10_0.x = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n   
            u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y
            + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy
            = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n   
            u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat10_0
            * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n   
            u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n   
            u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat10_4.xyz;\n    u_xlat4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz
            = u_xlat0.xyz * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www
            + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w
            + (-u_xlat4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz
            = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w
            * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat4 = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y
            + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1
            = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n   
            u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_2 = u_xlat16_0 * vec4(u_xlat16_1);\n   
            u_xlat16_1 = (-u_xlat16_0.w) * u_xlat16_1 + 1.0;\n    u_xlat10_4.x =
            texture2D(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat4 = u_xlat10_4.x *
            vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat4 = clamp(u_xlat4, 0.0,
            1.0);\n    u_xlat0 = vec4(u_xlat4) * vs_COLOR1;\n    u_xlat0 = u_xlat0
            * vec4(u_xlat16_1) + u_xlat16_2;\n    SV_Target0 = u_xlat0 * vs_COLOR0.wwww;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNDERLAY_ON
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat
            _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump
            vec4 _UnderlayColor;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat
            _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat
            _UnderlaySoftness;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform
            \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat
            _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform
            \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform
            \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4
            in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout
            mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout
            highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_COLOR1;\nout highp vec4
            vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nfloat
            u_xlat4;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool
            u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy
            + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www
            + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position
            = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat3 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1
            = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY)
            * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n   
            u_xlat0.x = u_xlat1.x * u_xlat6.x + 1.0;\n    u_xlat0.x = u_xlat6.x /
            u_xlat0.x;\n    u_xlat4 = u_xlat8.x * u_xlat0.x + -0.5;\n    u_xlat8.x
            = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n   
            u_xlat1.xy = u_xlat1.xy / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy
            = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n   
            vs_TEXCOORD4.w = (-u_xlat8.x) * 0.5 + u_xlat4;\n    u_xlat0.xyz = _UnderlayColor.www
            * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w
            = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n   
            u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0
            + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n   
            vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n   
            vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nUNITY_LOCATION(0) uniform
            mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D
            _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin
            mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_COLOR1;\nin highp vec4 vs_TEXCOORD5;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump
            float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nfloat u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump float
            u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n   
            u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat0.x = u_xlat0.x
            * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat0.x, 1.0);\n    u_xlat16_6
            = u_xlat0.x * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_0.x
            = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat16_0.x)
            + vs_TEXCOORD1.z;\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n   
            u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x
            * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n   
            u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n   
            u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0
            * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n   
            u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n   
            u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_4.xyz;\n    u_xlat4 = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz
            = u_xlat0.xyz * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www
            + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w
            + (-u_xlat4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz
            = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w
            * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat4 = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y
            + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1
            = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n   
            u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_2 = u_xlat16_0 * vec4(u_xlat16_1);\n   
            u_xlat16_1 = (-u_xlat16_0.w) * u_xlat16_1 + 1.0;\n    u_xlat16_4.x =
            texture(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat4 = u_xlat16_4.x * vs_TEXCOORD4.z
            + (-vs_TEXCOORD4.w);\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat0
            = vec4(u_xlat4) * vs_COLOR1;\n    u_xlat0 = u_xlat0 * vec4(u_xlat16_1)
            + u_xlat16_2;\n    SV_Target0 = u_xlat0 * vs_COLOR0.wwww;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNDERLAY_ON
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4
            hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform
            \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat
            _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool
            u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n   
            u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n   
            u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy =
            u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump
            float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4
            u_xlat16_3;\nfloat u_xlat4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nfloat
            u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_11;\nvoid
            main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x)
            + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n   
            u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n   
            u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n   
            u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y
            + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6
            = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1
            * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY)
            * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex,
            u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz
            = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex,
            u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n   
            u_xlat4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz
            * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n   
            u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4);\n    u_xlat16_2
            = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_3.w = _FaceColor.w * u_xlat10_4.w
            + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n   
            u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat5 = u_xlat0.x
            * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat0.x * vs_TEXCOORD1.y + 1.0;\n   
            u_xlat16_6 = u_xlat5 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6
            / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1
            = (-u_xlat16_1) + 1.0;\n    u_xlat16_6 = u_xlat16_3.w * u_xlat16_1 +
            -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_3;\n   
            SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n   
            if(u_xlatb4){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat
            _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin
            highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin
            highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool
            u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n   
            u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n   
            u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy =
            u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nUNITY_LOCATION(0) uniform
            mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D
            _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin
            mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump
            vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nmediump vec4
            u_xlat16_4;\nbool u_xlatb4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump
            float u_xlat16_6;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat16_0.x
            = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat16_0.x +
            (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n   
            u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth
            * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1
            = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1
            = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n   
            u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x
            * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n   
            u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n   
            u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0
            * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n   
            u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n   
            u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_4.xyz;\n    u_xlat4 = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz
            = u_xlat0.xyz * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www
            + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w
            + (-u_xlat4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_3.w
            = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat0.xyz
            * vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat0.x = _OutlineSoftness *
            _ScaleRatioA;\n    u_xlat5 = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1
            = u_xlat0.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat5 * 0.5 +
            u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1
            = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n   
            u_xlat16_6 = u_xlat16_3.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0
            = vec4(u_xlat16_1) * u_xlat16_3;\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n   
            u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4
            hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump vec4 _UnderlayColor;\nuniform
            \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform
            \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform
            \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat
            _ScaleRatioA;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform
            \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat
            _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform
            \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat
            _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute
            highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying
            mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nfloat u_xlat4;\nvec3 u_xlat6;\nvec2
            u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid
            main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat3 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1
            = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY)
            * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n   
            u_xlat0.x = u_xlat1.x * u_xlat6.x + 1.0;\n    u_xlat0.x = u_xlat6.x /
            u_xlat0.x;\n    u_xlat4 = u_xlat8.x * u_xlat0.x + -0.5;\n    u_xlat8.x
            = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n   
            u_xlat1.xy = u_xlat1.xy / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy
            = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n   
            vs_TEXCOORD4.w = (-u_xlat8.x) * 0.5 + u_xlat4;\n    u_xlat0.xyz = _UnderlayColor.www
            * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w
            = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n   
            u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0
            + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n   
            vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n   
            vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D
            _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump
            float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nfloat u_xlat4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nmediump
            float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n   
            u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat0.x = u_xlat0.x
            * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat0.x, 1.0);\n    u_xlat16_6
            = u_xlat0.x * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat10_0.x
            = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat10_0.x)
            + vs_TEXCOORD1.z;\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n   
            u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x
            * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n   
            u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n   
            u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat10_0
            * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n   
            u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n   
            u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat10_4.xyz;\n    u_xlat4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz
            = u_xlat0.xyz * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www
            + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w
            + (-u_xlat4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz
            = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w
            * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat4 = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y
            + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1
            = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n   
            u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_2 = u_xlat16_0 * vec4(u_xlat16_1);\n   
            u_xlat16_1 = (-u_xlat16_0.w) * u_xlat16_1 + 1.0;\n    u_xlat10_4.x =
            texture2D(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat4 = u_xlat10_4.x *
            vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat4 = clamp(u_xlat4, 0.0,
            1.0);\n    u_xlat0 = vec4(u_xlat4) * vs_COLOR1;\n    u_xlat0 = u_xlat0
            * vec4(u_xlat16_1) + u_xlat16_2;\n    u_xlat16_1 = u_xlat0.w + -0.00100000005;\n   
            SV_Target0 = u_xlat0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_1<0.0;\n   
            if(u_xlatb4){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNDERLAY_ON
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat
            _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump
            vec4 _UnderlayColor;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat
            _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat
            _UnderlaySoftness;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform
            \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat
            _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform
            \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform
            \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4
            in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout
            mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout
            highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_COLOR1;\nout highp vec4
            vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nfloat
            u_xlat4;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool
            u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy
            + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www
            + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position
            = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat3 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1
            = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY)
            * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n   
            u_xlat0.x = u_xlat1.x * u_xlat6.x + 1.0;\n    u_xlat0.x = u_xlat6.x /
            u_xlat0.x;\n    u_xlat4 = u_xlat8.x * u_xlat0.x + -0.5;\n    u_xlat8.x
            = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n   
            u_xlat1.xy = u_xlat1.xy / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy
            = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n   
            vs_TEXCOORD4.w = (-u_xlat8.x) * 0.5 + u_xlat4;\n    u_xlat0.xyz = _UnderlayColor.www
            * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w
            = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n   
            u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0
            + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n   
            vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n   
            vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nUNITY_LOCATION(0) uniform
            mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D
            _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin
            mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_COLOR1;\nin highp vec4 vs_TEXCOORD5;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump
            float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nfloat u_xlat4;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nmediump
            float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n   
            u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n    u_xlat0.x = u_xlat0.x
            * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat0.x, 1.0);\n    u_xlat16_6
            = u_xlat0.x * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_0.x
            = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat16_0.x)
            + vs_TEXCOORD1.z;\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n   
            u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x
            * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n   
            u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n   
            u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0
            * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n   
            u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n   
            u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_4.xyz;\n    u_xlat4 = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz
            = u_xlat0.xyz * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www
            + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w
            + (-u_xlat4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz
            = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w
            * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat4 = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y
            + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1
            = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n   
            u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_2 = u_xlat16_0 * vec4(u_xlat16_1);\n   
            u_xlat16_1 = (-u_xlat16_0.w) * u_xlat16_1 + 1.0;\n    u_xlat16_4.x =
            texture(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat4 = u_xlat16_4.x * vs_TEXCOORD4.z
            + (-vs_TEXCOORD4.w);\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat0
            = vec4(u_xlat4) * vs_COLOR1;\n    u_xlat0 = u_xlat0 * vec4(u_xlat16_1)
            + u_xlat16_2;\n    u_xlat16_1 = u_xlat0.w + -0.00100000005;\n    SV_Target0
            = u_xlat0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_1<0.0;\n    if(u_xlatb4){discard;}\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNDERLAY_ON
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4
            hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform
            \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat
            _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool
            u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n   
            u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n   
            u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy =
            u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp
            sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3
            u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float
            u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2
            u_xlat4;\nlowp vec4 u_xlat10_4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump
            float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n   
            u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 =
            u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x) +
            vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n   
            u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n   
            u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n   
            u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y
            + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6
            = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1
            * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY)
            * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex,
            u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz
            = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex,
            u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n   
            u_xlat4.x = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz
            * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n   
            u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4.x);\n    u_xlat16_2
            = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz *
            u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w
            + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y
            + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1
            = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n   
            u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n   
            u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n   
            u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y
            * u_xlat4.x;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0
            = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat
            _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin
            highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin
            highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool
            u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n   
            u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n   
            u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy =
            u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin
            mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD5;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump
            float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nvec2 u_xlat4;\nmediump vec4 u_xlat16_4;\nfloat u_xlat5;\nbool
            u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid
            main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat16_0.x)
            + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n   
            u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n   
            u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n   
            u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y
            + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6
            = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1
            * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY)
            * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_0 = texture(_OutlineTex,
            u_xlat0.xy);\n    u_xlat2 = u_xlat16_0 * _OutlineColor;\n    u_xlat16_3.xyz
            = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_4 = texture(_FaceTex,
            u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n   
            u_xlat4.x = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz
            * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n   
            u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4.x);\n    u_xlat16_2
            = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz *
            u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w
            + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y
            + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1
            = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n   
            u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n   
            u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n   
            u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y
            * u_xlat4.x;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0
            = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4
            hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump vec4 _UnderlayColor;\nuniform
            \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform
            \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform
            \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat
            _ScaleRatioA;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform
            \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat
            _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform
            \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat
            _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute
            highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying
            mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nfloat u_xlat4;\nvec3 u_xlat6;\nvec2
            u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid
            main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat3 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1
            = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY)
            * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n   
            u_xlat0.x = u_xlat1.x * u_xlat6.x + 1.0;\n    u_xlat0.x = u_xlat6.x /
            u_xlat0.x;\n    u_xlat4 = u_xlat8.x * u_xlat0.x + -0.5;\n    u_xlat8.x
            = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n   
            u_xlat1.xy = u_xlat1.xy / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy
            = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n   
            vs_TEXCOORD4.w = (-u_xlat8.x) * 0.5 + u_xlat4;\n    u_xlat0.xyz = _UnderlayColor.www
            * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w
            = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n   
            u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0
            + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n   
            vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n   
            vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp
            sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4
            vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4
            u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float
            u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2
            u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump
            float u_xlat16_11;\nvoid main()\n{\n    u_xlat0.x = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat0.x,
            1.0);\n    u_xlat16_6 = u_xlat0.x * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n   
            u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat0.x
            = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y
            + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6
            = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1
            * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY)
            * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex,
            u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz
            = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex,
            u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n   
            u_xlat4.x = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz
            * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n   
            u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4.x);\n    u_xlat16_2
            = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz *
            u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w
            + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y
            + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1
            = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n   
            u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_2 = u_xlat16_0 * vec4(u_xlat16_1);\n   
            u_xlat16_1 = (-u_xlat16_0.w) * u_xlat16_1 + 1.0;\n    u_xlat10_4.x =
            texture2D(_MainTex, vs_TEXCOORD4.xy).w;\n    u_xlat4.x = u_xlat10_4.x
            * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat4.x = clamp(u_xlat4.x,
            0.0, 1.0);\n    u_xlat0 = u_xlat4.xxxx * vs_COLOR1;\n    u_xlat0 = u_xlat0
            * vec4(u_xlat16_1) + u_xlat16_2;\n    u_xlat4.xy = (-_ClipRect.xy) +
            _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy,
            0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_0 =
            u_xlat0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNDERLAY_ON
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat
            _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump
            vec4 _UnderlayColor;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat
            _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat
            _UnderlaySoftness;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform
            \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat
            _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform
            \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform
            \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4
            in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout
            mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout
            highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_COLOR1;\nout highp vec4
            vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nfloat
            u_xlat4;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool
            u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy
            + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www
            + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position
            = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat3 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1
            = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY)
            * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n   
            u_xlat0.x = u_xlat1.x * u_xlat6.x + 1.0;\n    u_xlat0.x = u_xlat6.x /
            u_xlat0.x;\n    u_xlat4 = u_xlat8.x * u_xlat0.x + -0.5;\n    u_xlat8.x
            = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n   
            u_xlat1.xy = u_xlat1.xy / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy
            = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n   
            vs_TEXCOORD4.w = (-u_xlat8.x) * 0.5 + u_xlat4;\n    u_xlat0.xyz = _UnderlayColor.www
            * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w
            = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n   
            u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0
            + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n   
            vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n   
            vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin
            mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4
            vs_COLOR1;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump
            vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float
            u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2
            u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump float u_xlat16_6;\nfloat
            u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat0.x =
            _OutlineWidth * _ScaleRatioA;\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n   
            u_xlat16_1 = min(u_xlat0.x, 1.0);\n    u_xlat16_6 = u_xlat0.x * 0.5;\n   
            u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_0.x = texture(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n   
            u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y
            + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy
            = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n   
            u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0
            * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n   
            u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n   
            u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_4.xyz;\n    u_xlat4.x = u_xlat16_4.w * _FaceColor.w;\n   
            u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz
            * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w
            * u_xlat16_0.w + (-u_xlat4.x);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n   
            u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w
            = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1
            = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 +
            u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1
            = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n   
            u_xlat16_2 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat16_1 = (-u_xlat16_0.w)
            * u_xlat16_1 + 1.0;\n    u_xlat16_4.x = texture(_MainTex, vs_TEXCOORD4.xy).w;\n   
            u_xlat4.x = u_xlat16_4.x * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat4.x
            = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat0 = u_xlat4.xxxx * vs_COLOR1;\n   
            u_xlat0 = u_xlat0 * vec4(u_xlat16_1) + u_xlat16_2;\n    u_xlat4.xy =
            (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy,
            0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_0 =
            u_xlat0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNDERLAY_ON
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4
            hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform
            \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat
            _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool
            u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n   
            u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n   
            u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy =
            u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp
            sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3
            u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float
            u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2
            u_xlat4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nfloat u_xlat5;\nbool
            u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid
            main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x)
            + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n   
            u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n   
            u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n   
            u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y
            + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6
            = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1
            * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY)
            * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex,
            u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz
            = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX,
            _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex,
            u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n   
            u_xlat4.x = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz
            * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n   
            u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4.x);\n    u_xlat16_2
            = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz *
            u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w
            + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n   
            u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y
            + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1
            = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n   
            u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n   
            u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n   
            u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y
            * u_xlat4.x;\n    u_xlat16_6 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n   
            u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0
            * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat
            _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4
            _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin
            highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin
            highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool
            u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n   
            u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x
            = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n   
            u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy =
            u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy
            * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy
            * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin
            mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD5;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump
            float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nvec2 u_xlat4;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nfloat
            u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump
            float u_xlat16_11;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);\n   
            u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n   
            if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n   
            u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n   
            u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y
            + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy
            = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n   
            u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0
            * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n   
            u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n   
            u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_4.xyz;\n    u_xlat4.x = u_xlat16_4.w * _FaceColor.w;\n   
            u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz
            * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w
            * u_xlat16_0.w + (-u_xlat4.x);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n   
            u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w
            = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1
            = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 +
            u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1
            = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n   
            u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat4.xy = (-_ClipRect.xy)
            + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy,
            0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_6 =
            u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = u_xlat16_0
            * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n   
            u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform
            \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4
            hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump vec4 _UnderlayColor;\nuniform
            \tfloat _UnderlayOffsetX;\nuniform \tfloat _UnderlayOffsetY;\nuniform
            \tfloat _UnderlayDilate;\nuniform \tfloat _UnderlaySoftness;\nuniform
            \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat
            _ScaleRatioA;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat _VertexOffsetX;\nuniform
            \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nuniform \tfloat _TextureWidth;\nuniform \tfloat
            _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform
            \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat
            _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute
            highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying
            mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nfloat u_xlat4;\nvec3 u_xlat6;\nvec2
            u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid
            main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0
            = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy
            = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat3 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1
            = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY)
            * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n   
            u_xlat0.x = u_xlat1.x * u_xlat6.x + 1.0;\n    u_xlat0.x = u_xlat6.x /
            u_xlat0.x;\n    u_xlat4 = u_xlat8.x * u_xlat0.x + -0.5;\n    u_xlat8.x
            = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n   
            u_xlat1.xy = u_xlat1.xy / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy
            = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n   
            vs_TEXCOORD4.w = (-u_xlat8.x) * 0.5 + u_xlat4;\n    u_xlat0.xyz = _UnderlayColor.www
            * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w
            = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n   
            u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0
            + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n   
            vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n   
            vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform
            lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp
            sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4
            vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4
            u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float
            u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2
            u_xlat4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nmediump float u_xlat16_6;\nfloat
            u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat0.x =
            _OutlineWidth * _ScaleRatioA;\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n   
            u_xlat16_1 = min(u_xlat0.x, 1.0);\n    u_xlat16_6 = u_xlat0.x * 0.5;\n   
            u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat10_0.x = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n   
            u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y
            + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy
            = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n   
            u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat10_0
            * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n   
            u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n   
            u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat10_4.xyz;\n    u_xlat4.x = u_xlat10_4.w * _FaceColor.w;\n   
            u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz
            * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w
            * u_xlat10_0.w + (-u_xlat4.x);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n   
            u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w
            = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1
            = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 +
            u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1
            = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n   
            u_xlat16_2 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat16_1 = (-u_xlat16_0.w)
            * u_xlat16_1 + 1.0;\n    u_xlat10_4.x = texture2D(_MainTex, vs_TEXCOORD4.xy).w;\n   
            u_xlat4.x = u_xlat10_4.x * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat4.x
            = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat0 = u_xlat4.xxxx * vs_COLOR1;\n   
            u_xlat0 = u_xlat0 * vec4(u_xlat16_1) + u_xlat16_2;\n    u_xlat4.xy =
            (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy,
            0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_6 =
            u_xlat0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = u_xlat0 *
            vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n   
            u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNDERLAY_ON
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat
            _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tmediump
            vec4 _UnderlayColor;\nuniform \tfloat _UnderlayOffsetX;\nuniform \tfloat
            _UnderlayOffsetY;\nuniform \tfloat _UnderlayDilate;\nuniform \tfloat
            _UnderlaySoftness;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform
            \tfloat _ScaleRatioA;\nuniform \tfloat _ScaleRatioC;\nuniform \tfloat
            _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform
            \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat
            _TextureWidth;\nuniform \tfloat _TextureHeight;\nuniform \tfloat _GradientScale;\nuniform
            \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform
            \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4
            in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout
            mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout
            highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_COLOR1;\nout highp vec4
            vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nfloat
            u_xlat4;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool
            u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy
            + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www
            + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position
            = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy,
            u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25)
            / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 =
            abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n   
            u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n   
            u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13)
            * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n   
            u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz
            = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n   
            u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n   
            u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal)
            + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n   
            u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x
            * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw
            = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth)
            * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA
            + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x
            = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5
            + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat3 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0)
            + (-u_xlat3.xy);\n    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xyw = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyw
            = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyw;\n    vs_TEXCOORD3.xyz
            = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyw;\n    u_xlat1
            = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY)
            * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));\n   
            u_xlat0.x = u_xlat1.x * u_xlat6.x + 1.0;\n    u_xlat0.x = u_xlat6.x /
            u_xlat0.x;\n    u_xlat4 = u_xlat8.x * u_xlat0.x + -0.5;\n    u_xlat8.x
            = u_xlat0.x * u_xlat1.y;\n    u_xlat1.xy = (-u_xlat1.zw) * vec2(_GradientScale);\n   
            u_xlat1.xy = u_xlat1.xy / vec2(_TextureWidth, _TextureHeight);\n    vs_TEXCOORD4.xy
            = u_xlat1.xy + in_TEXCOORD0.xy;\n    vs_TEXCOORD4.z = u_xlat0.x;\n   
            vs_TEXCOORD4.w = (-u_xlat8.x) * 0.5 + u_xlat4;\n    u_xlat0.xyz = _UnderlayColor.www
            * _UnderlayColor.xyz;\n    vs_COLOR1.xyz = u_xlat0.xyz;\n    vs_COLOR1.w
            = _UnderlayColor.w;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n   
            u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0
            + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n   
            vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n   
            vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n   
            return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform
            \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat
            _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin
            mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4
            vs_COLOR1;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump
            vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float
            u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2
            u_xlat4;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nmediump float u_xlat16_6;\nfloat
            u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat0.x =
            _OutlineWidth * _ScaleRatioA;\n    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;\n   
            u_xlat16_1 = min(u_xlat0.x, 1.0);\n    u_xlat16_6 = u_xlat0.x * 0.5;\n   
            u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_0.x = texture(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n   
            u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y
            + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy
            = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n   
            u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0
            * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n   
            u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n   
            u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz
            * u_xlat16_4.xyz;\n    u_xlat4.x = u_xlat16_4.w * _FaceColor.w;\n   
            u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz
            * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w
            * u_xlat16_0.w + (-u_xlat4.x);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n   
            u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w
            = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1
            = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 +
            u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1
            = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n   
            u_xlat16_2 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat16_1 = (-u_xlat16_0.w)
            * u_xlat16_1 + 1.0;\n    u_xlat16_4.x = texture(_MainTex, vs_TEXCOORD4.xy).w;\n   
            u_xlat4.x = u_xlat16_4.x * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);\n    u_xlat4.x
            = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat0 = u_xlat4.xxxx * vs_COLOR1;\n   
            u_xlat0 = u_xlat0 * vec4(u_xlat16_1) + u_xlat16_2;\n    u_xlat4.xy =
            (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy,
            0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_6 =
            u_xlat0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = u_xlat0 *
            vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n   
            u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNDERLAY_ON
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        DefinedKeywords:
        - BEVEL_ON
        - GLOW_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNDERLAY_INNER
        - UNDERLAY_ON
        - UNITY_SINGLE_PASS_STEREO
        - UNITY_UI_ALPHACLIP
        - UNITY_UI_CLIP_RECT
        - __
        KeywordGroups:
        - Keywords:
          - __
          - BEVEL_ON
          hasDiscard: 1
        - Keywords:
          - __
          - UNDERLAY_ON
          - UNDERLAY_INNER
          hasDiscard: 1
        - Keywords:
          - __
          - GLOW_ON
          hasDiscard: 1
        - Keywords:
          - __
          - UNITY_UI_CLIP_RECT
          hasDiscard: 1
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
          hasDiscard: 1
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNDERLAY_ON
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNDERLAY_ON
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNDERLAY_ON
          - UNITY_UI_ALPHACLIP
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNDERLAY_ON
          - UNITY_UI_ALPHACLIP
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNDERLAY_ON
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNDERLAY_ON
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNDERLAY_ON
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNDERLAY_ON
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
    Shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
    ShaderPath: Assets/TextMesh Pro/Shaders/TMP_SDF.shader
    ShaderDefinedKeywords:
    - BEVEL_ON
    - GLOW_ON
    - UNDERLAY_INNER
    - UNDERLAY_ON
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNDERLAY_ON
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNDERLAY_ON
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNDERLAY_ON
      - UNITY_UI_ALPHACLIP
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNDERLAY_ON
      - UNITY_UI_ALPHACLIP
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNDERLAY_ON
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNDERLAY_ON
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNDERLAY_ON
      - UNITY_UI_ALPHACLIP
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: 68e6db2ebdc24f95958faec2be5558d6, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNDERLAY_ON
      - UNITY_UI_ALPHACLIP
      - UNITY_UI_CLIP_RECT
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nlowp float u_xlat10_0;\nmediump float u_xlat16_1;\nvoid
            main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat16_1 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1
            = clamp(u_xlat16_1, 0.0, 1.0);\n    SV_Target0 = vec4(u_xlat16_1) * vs_COLOR0;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform
            \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat
            _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat
            _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform
            \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout
            mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4
            vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2
            u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump
            vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat
            u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4
            vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump
            float u_xlat16_0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0
            = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = u_xlat16_0
            * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 = clamp(u_xlat16_1,
            0.0, 1.0);\n    SV_Target0 = vec4(u_xlat16_1) * vs_COLOR0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp
            float u_xlat10_1;\nmediump vec2 u_xlat16_2;\nvoid main()\n{\n    u_xlat16_0
            = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat16_2.xy = vec2(u_xlat10_1) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n   
            u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx
            * u_xlat16_0 + vs_COLOR1;\n    SV_Target0 = u_xlat16_2.yyyy * u_xlat16_0;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform
            \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat
            _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat
            _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform
            \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout
            mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4
            vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2
            u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump
            vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat
            u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin mediump vec4 vs_COLOR1;\nin highp vec4 vs_TEXCOORD0;\nin
            mediump vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump
            vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nmediump vec2 u_xlat16_2;\nvoid
            main()\n{\n    u_xlat16_0 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat16_1
            = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_2.xy = vec2(u_xlat16_1)
            * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_2.xy = clamp(u_xlat16_2.xy,
            0.0, 1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vs_COLOR1;\n   
            SV_Target0 = u_xlat16_2.yyyy * u_xlat16_0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\n#define
            SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump
            float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n   
            u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1
            = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 =
            clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_4 = vs_COLOR0.w * u_xlat16_1
            + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * vs_COLOR0;\n   
            SV_Target0 = u_xlat16_0;\n    u_xlatb2 = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform
            \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat
            _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat
            _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform
            \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout
            mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4
            vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2
            u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump
            vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat
            u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4
            vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump
            vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump
            float u_xlat16_4;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = u_xlat16_0.x * vs_TEXCOORD1.x +
            (-vs_TEXCOORD1.w);\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n   
            u_xlat16_4 = vs_COLOR0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0
            = vec4(u_xlat16_1) * vs_COLOR0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb2
            = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp
            float u_xlat10_1;\nbool u_xlatb1;\nmediump vec2 u_xlat16_2;\nvoid main()\n{\n   
            u_xlat16_0 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat16_2.xy = vec2(u_xlat10_1) * vs_TEXCOORD1.xx
            + (-vs_TEXCOORD1.zy);\n    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0,
            1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vs_COLOR1;\n   
            u_xlat16_2.x = u_xlat16_0.w * u_xlat16_2.y + -0.00100000005;\n    u_xlat16_0
            = u_xlat16_2.yyyy * u_xlat16_0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb1
            = u_xlat16_2.x<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform
            \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat
            _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat
            _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform
            \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout
            mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4
            vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2
            u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump
            vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat
            u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin mediump vec4 vs_COLOR1;\nin highp vec4 vs_TEXCOORD0;\nin
            mediump vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump
            vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nmediump
            vec2 u_xlat16_2;\nvoid main()\n{\n    u_xlat16_0 = vs_COLOR0 + (-vs_COLOR1);\n   
            u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_2.xy
            = vec2(u_xlat16_1) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_2.xy
            = clamp(u_xlat16_2.xy, 0.0, 1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx *
            u_xlat16_0 + vs_COLOR1;\n    u_xlat16_2.x = u_xlat16_0.w * u_xlat16_2.y
            + -0.00100000005;\n    u_xlat16_0 = u_xlat16_2.yyyy * u_xlat16_0;\n   
            SV_Target0 = u_xlat16_0;\n    u_xlatb1 = u_xlat16_2.x<0.0;\n    if(u_xlatb1){discard;}\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump
            vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump
            float u_xlat16_1;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy
            = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy,
            0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat10_0 =
            texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3 = u_xlat10_0
            * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_3 = clamp(u_xlat16_3,
            0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_3) * vs_COLOR0;\n    SV_Target0
            = vec4(u_xlat16_1) * u_xlat16_0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform
            \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat
            _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat
            _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform
            \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout
            mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4
            vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2
            u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump
            vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat
            u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp
            vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD2;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump
            float u_xlat16_1;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy
            = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy,
            0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_0.x
            = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3 = u_xlat16_0.x
            * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_3 = clamp(u_xlat16_3,
            0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_3) * vs_COLOR0;\n    SV_Target0
            = vec4(u_xlat16_1) * u_xlat16_0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec2
            u_xlat1;\nlowp float u_xlat10_1;\nmediump vec2 u_xlat16_2;\nvoid main()\n{\n   
            u_xlat16_0 = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy).w;\n    u_xlat16_2.xy = vec2(u_xlat10_1) * vs_TEXCOORD1.xx
            + (-vs_TEXCOORD1.zy);\n    u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0,
            1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vs_COLOR1;\n   
            u_xlat16_0 = u_xlat16_2.yyyy * u_xlat16_0;\n    u_xlat1.xy = (-_ClipRect.xy)
            + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy,
            0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.y * u_xlat1.x;\n    SV_Target0
            = u_xlat16_0 * u_xlat16_2.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform
            \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat
            _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat
            _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform
            \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout
            mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4
            vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2
            u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump
            vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat
            u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin mediump
            vec4 vs_COLOR1;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin
            mediump vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump
            vec4 u_xlat16_0;\nvec2 u_xlat1;\nmediump float u_xlat16_1;\nmediump vec2
            u_xlat16_2;\nvoid main()\n{\n    u_xlat16_0 = vs_COLOR0 + (-vs_COLOR1);\n   
            u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_2.xy
            = vec2(u_xlat16_1) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_2.xy
            = clamp(u_xlat16_2.xy, 0.0, 1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx *
            u_xlat16_0 + vs_COLOR1;\n    u_xlat16_0 = u_xlat16_2.yyyy * u_xlat16_0;\n   
            u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n   
            u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.y
            * u_xlat1.x;\n    SV_Target0 = u_xlat16_0 * u_xlat16_2.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump
            vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump
            float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n   
            u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n   
            u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y
            * u_xlat0.x;\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat16_4 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_4
            = clamp(u_xlat16_4, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_4) * vs_COLOR0;\n   
            u_xlat16_4 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0
            = vec4(u_xlat16_1) * u_xlat16_0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb2
            = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform
            \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat
            _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat
            _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform
            \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout
            mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4
            vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2
            u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump
            vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat
            u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp
            vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD2;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump
            float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n   
            u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n   
            u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y
            * u_xlat0.x;\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat16_4 = u_xlat16_0.x * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n   
            u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_4)
            * vs_COLOR0;\n    u_xlat16_4 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n   
            u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_0;\n    SV_Target0 = u_xlat16_0;\n   
            u_xlatb2 = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform
            \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump
            vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat
            _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform
            \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4
            _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform
            \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform
            \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp
            vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp
            vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump
            vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4
            vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4
            u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat
            u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy
            = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 =
            hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying
            mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nvec2
            u_xlat1;\nlowp float u_xlat10_1;\nbool u_xlatb1;\nmediump vec2 u_xlat16_2;\nmediump
            float u_xlat16_5;\nvoid main()\n{\n    u_xlat16_0 = vs_COLOR0 + (-vs_COLOR1);\n   
            u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_2.xy
            = vec2(u_xlat10_1) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n    u_xlat16_2.xy
            = clamp(u_xlat16_2.xy, 0.0, 1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx *
            u_xlat16_0 + vs_COLOR1;\n    u_xlat16_0 = u_xlat16_2.yyyy * u_xlat16_0;\n   
            u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n   
            u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.y
            * u_xlat1.x;\n    u_xlat16_5 = u_xlat16_0.w * u_xlat16_2.x + -0.00100000005;\n   
            u_xlat16_0 = u_xlat16_0 * u_xlat16_2.xxxx;\n    SV_Target0 = u_xlat16_0;\n   
            u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat
            _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat
            _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform
            \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat
            _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform
            \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat
            _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform
            \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout
            mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4
            vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2
            u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump
            vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat
            u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n   
            u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n   
            u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n   
            u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3
            = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3
            = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n   
            vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) *
            u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n   
            u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz,
            u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n   
            u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy,
            u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) *
            vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y)
            * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7
            * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter)
            + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15
            * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 +
            u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n   
            u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness
            * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x
            = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n   
            u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n   
            u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n   
            u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n   
            u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3
            = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n   
            u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy
            = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0,
            2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n   
            u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy
            / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n   
            u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n   
            u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x
            * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n   
            u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) *
            0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y
            = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n   
            vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin mediump
            vec4 vs_COLOR1;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin
            mediump vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump
            vec4 u_xlat16_0;\nvec2 u_xlat1;\nmediump float u_xlat16_1;\nbool u_xlatb1;\nmediump
            vec2 u_xlat16_2;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat16_0
            = vs_COLOR0 + (-vs_COLOR1);\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n   
            u_xlat16_2.xy = vec2(u_xlat16_1) * vs_TEXCOORD1.xx + (-vs_TEXCOORD1.zy);\n   
            u_xlat16_2.xy = clamp(u_xlat16_2.xy, 0.0, 1.0);\n    u_xlat16_0 = u_xlat16_2.xxxx
            * u_xlat16_0 + vs_COLOR1;\n    u_xlat16_0 = u_xlat16_2.yyyy * u_xlat16_0;\n   
            u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n   
            u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.y
            * u_xlat1.x;\n    u_xlat16_5 = u_xlat16_0.w * u_xlat16_2.x + -0.00100000005;\n   
            u_xlat16_0 = u_xlat16_0 * u_xlat16_2.xxxx;\n    SV_Target0 = u_xlat16_0;\n   
            u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - OUTLINE_ON
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        DefinedKeywords:
        - OUTLINE_ON
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNDERLAY_INNER
        - UNDERLAY_ON
        - UNITY_SINGLE_PASS_STEREO
        - UNITY_UI_ALPHACLIP
        - UNITY_UI_CLIP_RECT
        - __
        KeywordGroups:
        - Keywords:
          - __
          - OUTLINE_ON
          hasDiscard: 1
        - Keywords:
          - __
          - UNDERLAY_ON
          - UNDERLAY_INNER
          hasDiscard: 1
        - Keywords:
          - __
          - UNITY_UI_CLIP_RECT
          hasDiscard: 1
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
          hasDiscard: 1
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - OUTLINE_ON
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - OUTLINE_ON
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - OUTLINE_ON
          - UNITY_UI_ALPHACLIP
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - OUTLINE_ON
          - UNITY_UI_ALPHACLIP
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - OUTLINE_ON
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - OUTLINE_ON
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - OUTLINE_ON
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - OUTLINE_ON
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
    Shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
    ShaderPath: Assets/TextMesh Pro/Shaders/TMP_SDF-Mobile.shader
    ShaderDefinedKeywords:
    - OUTLINE_ON
    - UNDERLAY_INNER
    - UNDERLAY_ON
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - OUTLINE_ON
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - OUTLINE_ON
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - OUTLINE_ON
      - UNITY_UI_ALPHACLIP
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - OUTLINE_ON
      - UNITY_UI_ALPHACLIP
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - OUTLINE_ON
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - OUTLINE_ON
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - OUTLINE_ON
      - UNITY_UI_ALPHACLIP
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: fe393ace9b354375a9cb14cdbbc28be4, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - OUTLINE_ON
      - UNITY_UI_ALPHACLIP
      - UNITY_UI_CLIP_RECT
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0
            = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvoid
            main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n   
            u_xlat0 = u_xlat10_0 + _TextureSampleAdd;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin
            highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4
            vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4
            u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0
            = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1
            = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp
            vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 =
            texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat16_0 + _TextureSampleAdd;\n   
            u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0
            = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nbool
            u_xlatb0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0
            = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat10_0 + _TextureSampleAdd;\n   
            u_xlat16_1 = u_xlat0.w * vs_COLOR0.w + -0.00100000005;\n    u_xlat0 =
            u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    u_xlatb0 = u_xlat16_1<0.0;\n   
            if(u_xlatb0){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin
            highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4
            vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4
            u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0
            = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1
            = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp
            vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nvoid
            main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n   
            u_xlat0 = u_xlat16_0 + _TextureSampleAdd;\n    u_xlat16_1 = u_xlat0.w
            * vs_COLOR0.w + -0.00100000005;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n   
            SV_Target0 = u_xlat0;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0
            = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nlowp vec4
            u_xlat10_1;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx,
            _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw,
            vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n   
            u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z
            ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n   
            u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n   
            u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1
            + _TextureSampleAdd;\n    u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat1.w
            = u_xlat0.x * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin
            highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4
            vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4
            u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0
            = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1
            = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform
            \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlatb0.xy =
            greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw
            = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x
            = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0)
            : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w
            = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n   
            u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_1 = texture(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n   
            u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat1.w = u_xlat0.x * u_xlat1.w;\n   
            SV_Target0 = u_xlat1;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0
            = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nlowp vec4
            u_xlat10_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlatb0.xy
            = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw
            = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x
            = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0)
            : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w
            = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n   
            u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n   
            u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat16_2 = u_xlat1.w * u_xlat0.x
            + -0.00100000005;\n    u_xlat1.w = u_xlat0.x * u_xlat1.w;\n    SV_Target0
            = u_xlat1;\n    u_xlatb0.x = u_xlat16_2<0.0;\n    if(u_xlatb0.x){discard;}\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin
            highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4
            vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4
            u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0
            = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1
            = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform
            \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n   
            u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n   
            u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n   
            u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y
            ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n   
            u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw
            * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_1
            = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n   
            u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat16_2 = u_xlat1.w * u_xlat0.x
            + -0.00100000005;\n    u_xlat1.w = u_xlat0.x * u_xlat1.w;\n    SV_Target0
            = u_xlat1;\n    u_xlatb0.x = u_xlat16_2<0.0;\n    if(u_xlatb0.x){discard;}\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        DefinedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - UNITY_UI_ALPHACLIP
        - UNITY_UI_CLIP_RECT
        - __
        KeywordGroups:
        - Keywords:
          - __
          - UNITY_UI_CLIP_RECT
          hasDiscard: 1
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
          hasDiscard: 1
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: CanUseSpriteAtlas
          Value: true
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
      Tags:
      - Key: CanUseSpriteAtlas
        Value: true
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
    Shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
    ShaderPath: Assets/TextMesh Pro/Shaders/TMP_Sprite.shader
    ShaderDefinedKeywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: cf81c85f95fe47e1a27f6ae460cf182c, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
      - UNITY_UI_CLIP_RECT
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp
            sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp
            vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n   
            u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6.x
            = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n   
            u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3
            u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat15 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n   
            u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _SColor.xyz;\n   
            u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_17, 0.00100000005);\n   
            u_xlat16_17 = inversesqrt(u_xlat15);\n    u_xlat16_3.xyz = u_xlat0.xyz
            * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz
            = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat1.xyz;\n    u_xlat0.w = 1.0;\n   
            u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg,
            u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz
            = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz
            + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp
            vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0)
            out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool
            u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat15 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat1.xyz =
            vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n   
            u_xlat16_12 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_7.x
            = (-u_xlat16_7.x) + u_xlat16_12;\n    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n   
            u_xlat16_2.x = u_xlat16_7.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _SColor.xyz;\n   
            u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_17, 0.00100000005);\n   
            u_xlat16_17 = inversesqrt(u_xlat15);\n    u_xlat16_3.xyz = u_xlat0.xyz
            * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz
            = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat1.xyz;\n    u_xlat0.w = 1.0;\n   
            u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg,
            u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz
            = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz
            + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3
            u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat15 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n   
            u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _SColor.xyz;\n   
            u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_17, 0.00100000005);\n   
            u_xlat16_17 = inversesqrt(u_xlat15);\n    u_xlat16_3.xyz = u_xlat0.xyz
            * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz
            = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat1.xyz;\n    u_xlat0.w = 1.0;\n   
            u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg,
            u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz
            = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz
            + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp
            vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0)
            out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool
            u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat15 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat1.xyz =
            vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n   
            u_xlat16_12 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_7.x
            = (-u_xlat16_7.x) + u_xlat16_12;\n    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n   
            u_xlat16_2.x = u_xlat16_7.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _SColor.xyz;\n   
            u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_17, 0.00100000005);\n   
            u_xlat16_17 = inversesqrt(u_xlat15);\n    u_xlat16_3.xyz = u_xlat0.xyz
            * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz
            = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat1.xyz;\n    u_xlat0.w = 1.0;\n   
            u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg,
            u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz
            = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz
            + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _IndirectIntensity;\nuniform \tmediump
            float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3
            u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_8;\nmediump
            float u_xlat16_14;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nmediump
            float u_xlat16_21;\nvoid main()\n{\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat18 =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n   
            u_xlat1.xyz = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n   
            u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_8.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_8.x) + u_xlat16_2.x;\n    u_xlat16_14 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_8.x = (-u_xlat16_8.x) + u_xlat16_14;\n   
            u_xlat16_8.x = float(1.0) / u_xlat16_8.x;\n    u_xlat16_2.x = u_xlat16_8.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_8.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8.x;\n   
            u_xlat16_8.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_8.xyz = u_xlat16_2.xxx * u_xlat16_8.xyz + _SColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat18 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat18);\n    u_xlat16_4.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz
            = (bool(u_xlatb0)) ? u_xlat16_4.xyz : u_xlat1.xyz;\n    u_xlat0.w = 1.0;\n   
            u_xlat16_4.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_4.y = dot(unity_SHAg,
            u_xlat0);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_4.xyz
            = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat16_4.xyz
            = u_xlat16_4.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_8.xyz
            + u_xlat16_4.xyz;\n    u_xlat16_20 = (-_RimMin) + _RimMax;\n    u_xlat16_20
            = float(1.0) / u_xlat16_20;\n    u_xlat16_21 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_21;\n    u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n    u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;\n    u_xlat16_20
            = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_3.xyz;\n    SV_Target0.xyz
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _IndirectIntensity;\nuniform \tmediump
            float _SingleIndirectColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool
            u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_8;\nmediump
            float u_xlat16_14;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nmediump
            float u_xlat16_21;\nvoid main()\n{\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat18 =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n   
            u_xlat1.xyz = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat1.xyz =
            vec3(u_xlat18) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_8.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_8.x) + u_xlat16_2.x;\n   
            u_xlat16_14 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_8.x
            = (-u_xlat16_8.x) + u_xlat16_14;\n    u_xlat16_8.x = float(1.0) / u_xlat16_8.x;\n   
            u_xlat16_2.x = u_xlat16_8.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_8.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8.x;\n   
            u_xlat16_8.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_8.xyz = u_xlat16_2.xxx * u_xlat16_8.xyz + _SColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat18 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat18);\n    u_xlat16_4.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz
            = (bool(u_xlatb0)) ? u_xlat16_4.xyz : u_xlat1.xyz;\n    u_xlat0.w = 1.0;\n   
            u_xlat16_4.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_4.y = dot(unity_SHAg,
            u_xlat0);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_4.xyz
            = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat16_4.xyz
            = u_xlat16_4.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_8.xyz
            + u_xlat16_4.xyz;\n    u_xlat16_20 = (-_RimMin) + _RimMax;\n    u_xlat16_20
            = float(1.0) / u_xlat16_20;\n    u_xlat16_21 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_21;\n    u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n    u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;\n    u_xlat16_20
            = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_3.xyz;\n    SV_Target0.xyz
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _IndirectIntensity;\nuniform \tmediump
            float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3
            u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_8;\nmediump
            float u_xlat16_14;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nmediump
            float u_xlat16_21;\nvoid main()\n{\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat18 =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n   
            u_xlat1.xyz = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n   
            u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_8.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_8.x) + u_xlat16_2.x;\n    u_xlat16_14 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_8.x = (-u_xlat16_8.x) + u_xlat16_14;\n   
            u_xlat16_8.x = float(1.0) / u_xlat16_8.x;\n    u_xlat16_2.x = u_xlat16_8.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_8.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8.x;\n   
            u_xlat16_8.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_8.xyz = u_xlat16_2.xxx * u_xlat16_8.xyz + _SColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat18 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat18);\n    u_xlat16_4.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz
            = (bool(u_xlatb0)) ? u_xlat16_4.xyz : u_xlat1.xyz;\n    u_xlat0.w = 1.0;\n   
            u_xlat16_4.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_4.y = dot(unity_SHAg,
            u_xlat0);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_4.xyz
            = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat16_4.xyz
            = u_xlat16_4.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_8.xyz
            + u_xlat16_4.xyz;\n    u_xlat16_20 = (-_RimMin) + _RimMax;\n    u_xlat16_20
            = float(1.0) / u_xlat16_20;\n    u_xlat16_21 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_21;\n    u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n    u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;\n    u_xlat16_20
            = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_3.xyz;\n    SV_Target0.xyz
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _IndirectIntensity;\nuniform \tmediump
            float _SingleIndirectColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool
            u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_8;\nmediump
            float u_xlat16_14;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nmediump
            float u_xlat16_21;\nvoid main()\n{\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat18 =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n   
            u_xlat1.xyz = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat1.xyz =
            vec3(u_xlat18) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_8.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_8.x) + u_xlat16_2.x;\n   
            u_xlat16_14 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_8.x
            = (-u_xlat16_8.x) + u_xlat16_14;\n    u_xlat16_8.x = float(1.0) / u_xlat16_8.x;\n   
            u_xlat16_2.x = u_xlat16_8.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_8.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8.x;\n   
            u_xlat16_8.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_8.xyz = u_xlat16_2.xxx * u_xlat16_8.xyz + _SColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat18 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat18);\n    u_xlat16_4.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz
            = (bool(u_xlatb0)) ? u_xlat16_4.xyz : u_xlat1.xyz;\n    u_xlat0.w = 1.0;\n   
            u_xlat16_4.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_4.y = dot(unity_SHAg,
            u_xlat0);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_4.xyz
            = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat16_4.xyz
            = u_xlat16_4.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_8.xyz
            + u_xlat16_4.xyz;\n    u_xlat16_20 = (-_RimMin) + _RimMax;\n    u_xlat16_20
            = float(1.0) / u_xlat16_20;\n    u_xlat16_21 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_21;\n    u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n    u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;\n    u_xlat16_20
            = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_3.xyz;\n    SV_Target0.xyz
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nvarying highp
            vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool
            u_xlatb0;\nvec2 u_xlat1;\nlowp vec2 u_xlat10_1;\nmediump vec4 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump float u_xlat16_8;\nmediump
            float u_xlat16_12;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat1.xy
            = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n    u_xlat10_1.xy
            = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy = u_xlat10_1.yx
            * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12 = dot(u_xlat16_2.xy,
            u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_BumpScale);\n   
            u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12 = (-u_xlat16_12)
            + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz = u_xlat16_2.yyy
            * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD2.xyz
            + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12) * u_xlat0.xyz
            + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n   
            u_xlat16_17 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_17 = u_xlat16_17 + (-u_xlat16_3.x);\n   
            u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_17 = u_xlat16_17 * u_xlat16_3.x;\n    u_xlat16_17 = clamp(u_xlat16_17,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_17 * -2.0 + 3.0;\n    u_xlat16_17
            = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz + _SColor.xyz;\n   
            u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_17, 0.00100000005);\n   
            u_xlat16_17 = inversesqrt(u_xlat15);\n    u_xlat16_4.xyz = u_xlat0.xyz
            * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz
            = (bool(u_xlatb0)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TANGENT0;\nin highp vec4 in_TEXCOORD0;\nout highp vec3
            vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout
            highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4
            vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump float
            u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _BumpMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4
            vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec2 u_xlat1;\nmediump
            vec2 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump float u_xlat16_8;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy
            + _BumpMap_ST.zw;\n    u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n   
            u_xlat16_2.xy = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n   
            u_xlat16_12 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy =
            u_xlat16_2.xy * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12,
            1.0);\n    u_xlat16_12 = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n   
            u_xlat16_3.xyz = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw
            = u_xlat16_2.xxx * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz
            = vec3(u_xlat16_12) * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x =
            dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_17 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_3.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_17 = u_xlat16_17 + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n   
            u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n    u_xlat16_17 = u_xlat16_17
            * u_xlat16_3.x;\n    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);\n   
            u_xlat16_3.x = u_xlat16_17 * -2.0 + 3.0;\n    u_xlat16_17 = u_xlat16_17
            * u_xlat16_17;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_3.x;\n    u_xlat16_3.xyz
            = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_17) * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_17, 0.00100000005);\n   
            u_xlat16_17 = inversesqrt(u_xlat15);\n    u_xlat16_4.xyz = u_xlat0.xyz
            * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz
            = (bool(u_xlatb0)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nbvec2 u_xlatb0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat15 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n   
            u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _SColor.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * u_xlat16_3.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_17,
            0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n    u_xlat16_4.xyz
            = u_xlat0.xyz * vec3(u_xlat16_17);\n    u_xlatb0.xy = lessThan(vec4(0.0,
            0.0, 0.0, 0.0), vec4(_SingleIndirectColor, _IndirectIntensity, _SingleIndirectColor,
            _SingleIndirectColor)).xy;\n    u_xlat1.xyz = (u_xlatb0.x) ? u_xlat16_4.xyz
            : u_xlat1.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr,
            u_xlat1);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_4.z
            = dot(unity_SHAb, u_xlat1);\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity)) + u_xlat16_2.xyz;\n    SV_Target0.xyz = (u_xlatb0.y)
            ? u_xlat16_3.xyz : u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp
            vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0)
            out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nbvec2
            u_xlatb0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat15 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat1.xyz =
            vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n   
            u_xlat16_12 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_7.x
            = (-u_xlat16_7.x) + u_xlat16_12;\n    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n   
            u_xlat16_2.x = u_xlat16_7.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz + _SColor.xyz;\n   
            u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat16_0.xyz * _BaseColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * u_xlat16_3.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_17,
            0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n    u_xlat16_4.xyz
            = u_xlat0.xyz * vec3(u_xlat16_17);\n    u_xlatb0.xy = lessThan(vec4(0.0,
            0.0, 0.0, 0.0), vec4(_SingleIndirectColor, _IndirectIntensity, _SingleIndirectColor,
            _SingleIndirectColor)).xy;\n    u_xlat1.xyz = (u_xlatb0.x) ? u_xlat16_4.xyz
            : u_xlat1.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr,
            u_xlat1);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_4.z
            = dot(unity_SHAb, u_xlat1);\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity)) + u_xlat16_2.xyz;\n    SV_Target0.xyz = (u_xlatb0.y)
            ? u_xlat16_3.xyz : u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp
            sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp
            vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n   
            u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6.x
            = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n   
            u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp
            sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp
            vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n   
            u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6.x
            = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n   
            u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump
            float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump
            vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat15
            = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2 = (-u_xlat16_7.x) + u_xlat16_2;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2 = u_xlat16_7.x
            * u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_7.x
            = u_xlat16_2 * -2.0 + 3.0;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;\n   
            u_xlat16_2 = u_xlat16_2 * u_xlat16_7.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_2)
            * _LightColor0.xyz;\n    u_xlat16_3.x = (-_RimMin) + _RimMax;\n    u_xlat16_3.x
            = float(1.0) / u_xlat16_3.x;\n    u_xlat16_8 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16_3.x = clamp(u_xlat16_3.x,
            0.0, 1.0);\n    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x
            = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n   
            u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;\n    u_xlat16_7.xyz
            = u_xlat16_7.xyz * _RimColor.xyz;\n    u_xlat16_3.xyz = _HColor.xyz *
            _LightColor0.xyz + (-_SColor.xyz);\n    u_xlat16_3.xyz = vec3(u_xlat16_2)
            * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_7.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3
            u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nmediump
            float u_xlat16_12;\nfloat u_xlat15;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2 = u_xlat0.x * 0.5 +
            0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2 = (-u_xlat16_7.x) + u_xlat16_2;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2 = u_xlat16_7.x
            * u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_7.x
            = u_xlat16_2 * -2.0 + 3.0;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;\n   
            u_xlat16_2 = u_xlat16_2 * u_xlat16_7.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_2)
            * _LightColor0.xyz;\n    u_xlat16_3.x = (-_RimMin) + _RimMax;\n    u_xlat16_3.x
            = float(1.0) / u_xlat16_3.x;\n    u_xlat16_8 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16_3.x = clamp(u_xlat16_3.x,
            0.0, 1.0);\n    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x
            = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n   
            u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;\n    u_xlat16_7.xyz
            = u_xlat16_7.xyz * _RimColor.xyz;\n    u_xlat16_3.xyz = _HColor.xyz *
            _LightColor0.xyz + (-_SColor.xyz);\n    u_xlat16_3.xyz = vec3(u_xlat16_2)
            * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_7.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump
            float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump
            vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat15
            = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2 = (-u_xlat16_7.x) + u_xlat16_2;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2 = u_xlat16_7.x
            * u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_7.x
            = u_xlat16_2 * -2.0 + 3.0;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;\n   
            u_xlat16_2 = u_xlat16_2 * u_xlat16_7.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_2)
            * _LightColor0.xyz;\n    u_xlat16_3.x = (-_RimMin) + _RimMax;\n    u_xlat16_3.x
            = float(1.0) / u_xlat16_3.x;\n    u_xlat16_8 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16_3.x = clamp(u_xlat16_3.x,
            0.0, 1.0);\n    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x
            = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n   
            u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;\n    u_xlat16_7.xyz
            = u_xlat16_7.xyz * _RimColor.xyz;\n    u_xlat16_3.xyz = _HColor.xyz *
            _LightColor0.xyz + (-_SColor.xyz);\n    u_xlat16_3.xyz = vec3(u_xlat16_2)
            * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_7.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3
            u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nmediump
            float u_xlat16_12;\nfloat u_xlat15;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2 = u_xlat0.x * 0.5 +
            0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2 = (-u_xlat16_7.x) + u_xlat16_2;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2 = u_xlat16_7.x
            * u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_7.x
            = u_xlat16_2 * -2.0 + 3.0;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;\n   
            u_xlat16_2 = u_xlat16_2 * u_xlat16_7.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_2)
            * _LightColor0.xyz;\n    u_xlat16_3.x = (-_RimMin) + _RimMax;\n    u_xlat16_3.x
            = float(1.0) / u_xlat16_3.x;\n    u_xlat16_8 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16_3.x = clamp(u_xlat16_3.x,
            0.0, 1.0);\n    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x
            = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n   
            u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;\n    u_xlat16_7.xyz
            = u_xlat16_7.xyz * _RimColor.xyz;\n    u_xlat16_3.xyz = _HColor.xyz *
            _LightColor0.xyz + (-_SColor.xyz);\n    u_xlat16_3.xyz = vec3(u_xlat16_2)
            * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_7.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp
            sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nvarying highp
            vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec3
            u_xlat0;\nlowp vec3 u_xlat10_0;\nvec2 u_xlat1;\nlowp vec2 u_xlat10_1;\nmediump
            vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump
            float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat10_1.xy = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat10_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_10
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_10 = min(u_xlat16_10, 1.0);\n    u_xlat16_10
            = (-u_xlat16_10) + 1.0;\n    u_xlat16_10 = sqrt(u_xlat16_10);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_10)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TANGENT0;\nin highp vec4 in_TEXCOORD0;\nout highp vec3
            vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout
            highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4
            vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump float
            u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _BumpMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec2
            u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_10
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_10 = min(u_xlat16_10, 1.0);\n    u_xlat16_10
            = (-u_xlat16_10) + 1.0;\n    u_xlat16_10 = sqrt(u_xlat16_10);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_10)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _HColor.xyz * _LightColor0.xyz + (-_SColor.xyz);\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n   
            u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp
            sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp
            vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n   
            u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6.x
            = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n   
            u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3
            u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat15 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n   
            u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xxx * u_xlat16_7.xyz + _SColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n   
            u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat1.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz
            + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp
            vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0)
            out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool
            u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat15 = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat1.xyz =
            vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n   
            u_xlat16_12 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_7.x
            = (-u_xlat16_7.x) + u_xlat16_12;\n    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n   
            u_xlat16_2.x = u_xlat16_7.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xxx * u_xlat16_7.xyz + _SColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n   
            u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat1.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz
            + u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _IndirectIntensity;\nuniform \tmediump
            float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3
            u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_8;\nmediump
            float u_xlat16_14;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nmediump
            float u_xlat16_21;\nvoid main()\n{\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat18 =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n   
            u_xlat1.xyz = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n   
            u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_8.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_8.x) + u_xlat16_2.x;\n    u_xlat16_14 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_8.x = (-u_xlat16_8.x) + u_xlat16_14;\n   
            u_xlat16_8.x = float(1.0) / u_xlat16_8.x;\n    u_xlat16_2.x = u_xlat16_8.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_8.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8.x;\n   
            u_xlat16_8.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz =
            u_xlat16_2.xxx * u_xlat16_8.xyz + _SColor.xyz;\n    u_xlat16_3.xyz =
            u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_2.xyz = u_xlat16_8.xyz
            * _LightColor0.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_20 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat18 = max(u_xlat16_20,
            0.00100000005);\n    u_xlat16_20 = inversesqrt(u_xlat18);\n    u_xlat16_4.xyz
            = u_xlat0.xyz * vec3(u_xlat16_20);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : u_xlat1.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_4.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz
            + u_xlat16_4.xyz;\n    u_xlat16_20 = (-_RimMin) + _RimMax;\n    u_xlat16_20
            = float(1.0) / u_xlat16_20;\n    u_xlat16_21 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_21;\n    u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n    u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;\n    u_xlat16_20
            = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_3.xyz;\n    SV_Target0.xyz
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _IndirectIntensity;\nuniform \tmediump
            float _SingleIndirectColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool
            u_xlatb0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_8;\nmediump
            float u_xlat16_14;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nmediump
            float u_xlat16_21;\nvoid main()\n{\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat18 =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n   
            u_xlat1.xyz = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat1.xyz =
            vec3(u_xlat18) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_8.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_8.x) + u_xlat16_2.x;\n   
            u_xlat16_14 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_8.x
            = (-u_xlat16_8.x) + u_xlat16_14;\n    u_xlat16_8.x = float(1.0) / u_xlat16_8.x;\n   
            u_xlat16_2.x = u_xlat16_8.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_8.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_8.x;\n   
            u_xlat16_8.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_8.xyz =
            u_xlat16_2.xxx * u_xlat16_8.xyz + _SColor.xyz;\n    u_xlat16_3.xyz =
            u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_2.xyz = u_xlat16_8.xyz
            * _LightColor0.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_20 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat18 = max(u_xlat16_20,
            0.00100000005);\n    u_xlat16_20 = inversesqrt(u_xlat18);\n    u_xlat16_4.xyz
            = u_xlat0.xyz * vec3(u_xlat16_20);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : u_xlat1.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_4.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz
            + u_xlat16_4.xyz;\n    u_xlat16_20 = (-_RimMin) + _RimMax;\n    u_xlat16_20
            = float(1.0) / u_xlat16_20;\n    u_xlat16_21 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_21;\n    u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n    u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;\n    u_xlat16_20
            = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_3.xyz;\n    SV_Target0.xyz
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nvarying highp
            vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool
            u_xlatb0;\nvec2 u_xlat1;\nlowp vec2 u_xlat10_1;\nmediump vec4 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump float u_xlat16_8;\nmediump
            float u_xlat16_12;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat1.xy
            = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n    u_xlat10_1.xy
            = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy = u_xlat10_1.yx
            * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12 = dot(u_xlat16_2.xy,
            u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_BumpScale);\n   
            u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12 = (-u_xlat16_12)
            + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz = u_xlat16_2.yyy
            * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD2.xyz
            + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12) * u_xlat0.xyz
            + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n   
            u_xlat16_17 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_17 = u_xlat16_17 + (-u_xlat16_3.x);\n   
            u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_17 = u_xlat16_17 * u_xlat16_3.x;\n    u_xlat16_17 = clamp(u_xlat16_17,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_17 * -2.0 + 3.0;\n    u_xlat16_17
            = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_3.xyz =
            vec3(u_xlat16_17) * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n   
            u_xlat16_4.xyz = u_xlat0.xyz * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;\n   
            u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TANGENT0;\nin highp vec4 in_TEXCOORD0;\nout highp vec3
            vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout
            highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4
            vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump float
            u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _BumpMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4
            vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec2 u_xlat1;\nmediump
            vec2 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump float u_xlat16_8;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy
            + _BumpMap_ST.zw;\n    u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n   
            u_xlat16_2.xy = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n   
            u_xlat16_12 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy =
            u_xlat16_2.xy * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12,
            1.0);\n    u_xlat16_12 = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n   
            u_xlat16_3.xyz = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw
            = u_xlat16_2.xxx * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz
            = vec3(u_xlat16_12) * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x =
            dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_17 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_3.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_17 = u_xlat16_17 + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n   
            u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n    u_xlat16_17 = u_xlat16_17
            * u_xlat16_3.x;\n    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);\n   
            u_xlat16_3.x = u_xlat16_17 * -2.0 + 3.0;\n    u_xlat16_17 = u_xlat16_17
            * u_xlat16_17;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_3.x;\n    u_xlat16_3.xyz
            = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_17)
            * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * _LightColor0.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_17,
            0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n    u_xlat16_4.xyz
            = u_xlat0.xyz * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;\n   
            u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump
            float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump
            vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat15
            = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2 = (-u_xlat16_7.x) + u_xlat16_2;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2 = u_xlat16_7.x
            * u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_7.x
            = u_xlat16_2 * -2.0 + 3.0;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;\n   
            u_xlat16_2 = u_xlat16_2 * u_xlat16_7.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_2)
            * _LightColor0.xyz;\n    u_xlat16_3.x = (-_RimMin) + _RimMax;\n    u_xlat16_3.x
            = float(1.0) / u_xlat16_3.x;\n    u_xlat16_8 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16_3.x = clamp(u_xlat16_3.x,
            0.0, 1.0);\n    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x
            = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n   
            u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;\n    u_xlat16_7.xyz
            = u_xlat16_7.xyz * _RimColor.xyz;\n    u_xlat16_3.xyz = (-_SColor.xyz)
            + _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_2) * u_xlat16_3.xyz
            + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_7.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3
            u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nmediump
            float u_xlat16_12;\nfloat u_xlat15;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2 = u_xlat0.x * 0.5 +
            0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2 = (-u_xlat16_7.x) + u_xlat16_2;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2 = u_xlat16_7.x
            * u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_7.x
            = u_xlat16_2 * -2.0 + 3.0;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;\n   
            u_xlat16_2 = u_xlat16_2 * u_xlat16_7.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_2)
            * _LightColor0.xyz;\n    u_xlat16_3.x = (-_RimMin) + _RimMax;\n    u_xlat16_3.x
            = float(1.0) / u_xlat16_3.x;\n    u_xlat16_8 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16_3.x = clamp(u_xlat16_3.x,
            0.0, 1.0);\n    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x
            = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n   
            u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;\n    u_xlat16_7.xyz
            = u_xlat16_7.xyz * _RimColor.xyz;\n    u_xlat16_3.xyz = (-_SColor.xyz)
            + _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_2) * u_xlat16_3.xyz
            + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n   
            u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_7.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp
            sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nvarying highp
            vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec3
            u_xlat0;\nlowp vec3 u_xlat10_0;\nvec2 u_xlat1;\nlowp vec2 u_xlat10_1;\nmediump
            vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump
            float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat10_1.xy = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat10_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_10
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_10 = min(u_xlat16_10, 1.0);\n    u_xlat16_10
            = (-u_xlat16_10) + 1.0;\n    u_xlat16_10 = sqrt(u_xlat16_10);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_10)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TANGENT0;\nin highp vec4 in_TEXCOORD0;\nout highp vec3
            vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout
            highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4
            vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump float
            u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _BumpMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec2
            u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_10
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_10 = min(u_xlat16_10, 1.0);\n    u_xlat16_10
            = (-u_xlat16_10) + 1.0;\n    u_xlat16_10 = sqrt(u_xlat16_10);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_10)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform lowp
            sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nvarying highp
            vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec3
            u_xlat0;\nlowp vec3 u_xlat10_0;\nvec2 u_xlat1;\nlowp vec2 u_xlat10_1;\nmediump
            vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump
            float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat10_1.xy = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat10_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_10
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_10 = min(u_xlat16_10, 1.0);\n    u_xlat16_10
            = (-u_xlat16_10) + 1.0;\n    u_xlat16_10 = sqrt(u_xlat16_10);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_10)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TANGENT0;\nin highp vec4 in_TEXCOORD0;\nout highp vec3
            vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout
            highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4
            vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump float
            u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _BumpMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec2
            u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_10
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_10 = min(u_xlat16_10, 1.0);\n    u_xlat16_10
            = (-u_xlat16_10) + 1.0;\n    u_xlat16_10 = sqrt(u_xlat16_10);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_10)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xxx * u_xlat16_6.xyz + _SColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nvarying highp
            vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool
            u_xlatb0;\nvec2 u_xlat1;\nlowp vec2 u_xlat10_1;\nmediump vec4 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump float u_xlat16_8;\nmediump
            float u_xlat16_12;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat1.xy
            = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n    u_xlat10_1.xy
            = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy = u_xlat10_1.yx
            * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12 = dot(u_xlat16_2.xy,
            u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_BumpScale);\n   
            u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12 = (-u_xlat16_12)
            + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz = u_xlat16_2.yyy
            * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD2.xyz
            + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12) * u_xlat0.xyz
            + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n   
            u_xlat16_17 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_17 = u_xlat16_17 + (-u_xlat16_3.x);\n   
            u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_17 = u_xlat16_17 * u_xlat16_3.x;\n    u_xlat16_17 = clamp(u_xlat16_17,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_17 * -2.0 + 3.0;\n    u_xlat16_17
            = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_3.xyz =
            vec3(u_xlat16_17) * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n   
            u_xlat16_4.xyz = u_xlat0.xyz * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;\n   
            u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TANGENT0;\nin highp vec4 in_TEXCOORD0;\nout highp vec3
            vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout
            highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4
            vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump float
            u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _BumpMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4
            vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec2 u_xlat1;\nmediump
            vec2 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump float u_xlat16_8;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy
            + _BumpMap_ST.zw;\n    u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n   
            u_xlat16_2.xy = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n   
            u_xlat16_12 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy =
            u_xlat16_2.xy * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12,
            1.0);\n    u_xlat16_12 = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n   
            u_xlat16_3.xyz = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw
            = u_xlat16_2.xxx * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz
            = vec3(u_xlat16_12) * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x =
            dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_17 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_3.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_17 = u_xlat16_17 + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n   
            u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n    u_xlat16_17 = u_xlat16_17
            * u_xlat16_3.x;\n    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);\n   
            u_xlat16_3.x = u_xlat16_17 * -2.0 + 3.0;\n    u_xlat16_17 = u_xlat16_17
            * u_xlat16_17;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_3.x;\n    u_xlat16_3.xyz
            = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_17)
            * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * _LightColor0.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_17,
            0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n    u_xlat16_4.xyz
            = u_xlat0.xyz * vec3(u_xlat16_17);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_4.xyz : u_xlat16_2.xyz;\n   
            u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TANGENT0;\nattribute highp
            vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat12);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) *
            u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    u_xlat3.xyz =
            u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy
            + (-u_xlat3.xyz);\n    u_xlat16_2.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _IndirectIntensity;\nuniform \tmediump
            float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _BumpMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4
            u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec2 u_xlat1;\nlowp
            vec2 u_xlat10_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump float u_xlat16_9;\nmediump
            float u_xlat16_14;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;\n    u_xlat1.xy
            = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n    u_xlat10_1.xy
            = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy = u_xlat10_1.yx
            * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_14 = dot(u_xlat16_2.xy,
            u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_BumpScale);\n   
            u_xlat16_14 = min(u_xlat16_14, 1.0);\n    u_xlat16_14 = (-u_xlat16_14)
            + 1.0;\n    u_xlat16_14 = sqrt(u_xlat16_14);\n    u_xlat16_3.xyz = u_xlat16_2.yyy
            * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD2.xyz
            + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat0.xyz
            + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n   
            u_xlat16_20 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_20 = u_xlat16_20 + (-u_xlat16_3.x);\n   
            u_xlat16_9 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_9;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;\n    u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_20 * -2.0 + 3.0;\n    u_xlat16_20
            = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_3.xyz =
            vec3(u_xlat16_20) * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_4.xyz
            = vec3(u_xlat16_20) * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * _LightColor0.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_20 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat18 = max(u_xlat16_20,
            0.00100000005);\n    u_xlat16_20 = inversesqrt(u_xlat18);\n    u_xlat16_5.xyz
            = u_xlat0.xyz * vec3(u_xlat16_20);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;\n   
            u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz
            + u_xlat16_2.xyz;\n    u_xlat16_20 = (-_RimMin) + _RimMax;\n    u_xlat16_20
            = float(1.0) / u_xlat16_20;\n    u_xlat16_3.x = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;\n    u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_20 * -2.0 + 3.0;\n    u_xlat16_20
            = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_4.xyz;\n    SV_Target0.xyz
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat12);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) *
            u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    u_xlat3.xyz =
            u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy
            + (-u_xlat3.xyz);\n    u_xlat16_2.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _IndirectIntensity;\nuniform \tmediump
            float _SingleIndirectColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _BumpMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool
            u_xlatb0;\nvec2 u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump
            float u_xlat16_9;\nmediump float u_xlat16_14;\nfloat u_xlat18;\nmediump
            float u_xlat16_20;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ? 0xffffffffu
            : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat18)
            * u_xlat0.xyz;\n    u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_14
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_14 = min(u_xlat16_14, 1.0);\n    u_xlat16_14
            = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = sqrt(u_xlat16_14);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_14)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_20 = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_3.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_20 = u_xlat16_20 + (-u_xlat16_3.x);\n    u_xlat16_9 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_9;\n   
            u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_3.x;\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n   
            u_xlat16_3.x = u_xlat16_20 * -2.0 + 3.0;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;\n    u_xlat16_3.xyz
            = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_20)
            * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat16_20)
            * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n   
            u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_20
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat18 = max(u_xlat16_20, 0.00100000005);\n   
            u_xlat16_20 = inversesqrt(u_xlat18);\n    u_xlat16_5.xyz = u_xlat0.xyz
            * vec3(u_xlat16_20);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz
            = (bool(u_xlatb0)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz
            + u_xlat16_2.xyz;\n    u_xlat16_20 = (-_RimMin) + _RimMax;\n    u_xlat16_20
            = float(1.0) / u_xlat16_20;\n    u_xlat16_3.x = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;\n    u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_20 * -2.0 + 3.0;\n    u_xlat16_20
            = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_4.xyz;\n    SV_Target0.xyz
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TANGENT0;\nattribute highp
            vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat12);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) *
            u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    u_xlat3.xyz =
            u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy
            + (-u_xlat3.xyz);\n    u_xlat16_2.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _IndirectIntensity;\nuniform \tmediump
            float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _BumpMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4
            u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec2 u_xlat1;\nlowp
            vec2 u_xlat10_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump float u_xlat16_9;\nmediump
            float u_xlat16_14;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;\n    u_xlat1.xy
            = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n    u_xlat10_1.xy
            = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy = u_xlat10_1.yx
            * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_14 = dot(u_xlat16_2.xy,
            u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_BumpScale);\n   
            u_xlat16_14 = min(u_xlat16_14, 1.0);\n    u_xlat16_14 = (-u_xlat16_14)
            + 1.0;\n    u_xlat16_14 = sqrt(u_xlat16_14);\n    u_xlat16_3.xyz = u_xlat16_2.yyy
            * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD2.xyz
            + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat0.xyz
            + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n   
            u_xlat16_20 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_20 = u_xlat16_20 + (-u_xlat16_3.x);\n   
            u_xlat16_9 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_9;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;\n    u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_20 * -2.0 + 3.0;\n    u_xlat16_20
            = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_3.xyz =
            vec3(u_xlat16_20) * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_4.xyz
            = vec3(u_xlat16_20) * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * _LightColor0.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_20 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat18 = max(u_xlat16_20,
            0.00100000005);\n    u_xlat16_20 = inversesqrt(u_xlat18);\n    u_xlat16_5.xyz
            = u_xlat0.xyz * vec3(u_xlat16_20);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;\n   
            u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz
            + u_xlat16_2.xyz;\n    u_xlat16_20 = (-_RimMin) + _RimMax;\n    u_xlat16_20
            = float(1.0) / u_xlat16_20;\n    u_xlat16_3.x = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;\n    u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_20 * -2.0 + 3.0;\n    u_xlat16_20
            = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_4.xyz;\n    SV_Target0.xyz
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat12);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) *
            u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    u_xlat3.xyz =
            u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy
            + (-u_xlat3.xyz);\n    u_xlat16_2.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _IndirectIntensity;\nuniform \tmediump
            float _SingleIndirectColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _BumpMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool
            u_xlatb0;\nvec2 u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump
            float u_xlat16_9;\nmediump float u_xlat16_14;\nfloat u_xlat18;\nmediump
            float u_xlat16_20;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ? 0xffffffffu
            : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat18)
            * u_xlat0.xyz;\n    u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_14
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_14 = min(u_xlat16_14, 1.0);\n    u_xlat16_14
            = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = sqrt(u_xlat16_14);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_14)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_20 = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_3.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_20 = u_xlat16_20 + (-u_xlat16_3.x);\n    u_xlat16_9 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_9;\n   
            u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_3.x;\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n   
            u_xlat16_3.x = u_xlat16_20 * -2.0 + 3.0;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;\n    u_xlat16_3.xyz
            = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_20)
            * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat16_20)
            * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n   
            u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_20
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat18 = max(u_xlat16_20, 0.00100000005);\n   
            u_xlat16_20 = inversesqrt(u_xlat18);\n    u_xlat16_5.xyz = u_xlat0.xyz
            * vec3(u_xlat16_20);\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz
            = (bool(u_xlatb0)) ? u_xlat16_5.xyz : u_xlat16_2.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_3.xyz
            + u_xlat16_2.xyz;\n    u_xlat16_20 = (-_RimMin) + _RimMax;\n    u_xlat16_20
            = float(1.0) / u_xlat16_20;\n    u_xlat16_3.x = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;\n    u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_20 * -2.0 + 3.0;\n    u_xlat16_20
            = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_20) * u_xlat16_4.xyz;\n    SV_Target0.xyz
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_2.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TANGENT0;\nattribute highp
            vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat12);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) *
            u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    u_xlat3.xyz =
            u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy
            + (-u_xlat3.xyz);\n    u_xlat16_2.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform lowp sampler2D _BaseMap;\nuniform lowp sampler2D
            _BumpMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec2 u_xlat1;\nlowp
            vec2 u_xlat10_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nmediump
            float u_xlat16_12;\nfloat u_xlat15;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat10_1.xy = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat10_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12
            = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_3.x
            = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_8 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_3.x = u_xlat16_3.x
            * u_xlat16_8;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n   
            u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x
            * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16_7.xyz
            = u_xlat16_7.xyz * u_xlat16_3.xxx;\n    u_xlat16_7.xyz = u_xlat16_7.xyz
            * _RimColor.xyz;\n    u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _SColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_7.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat12);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) *
            u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    u_xlat3.xyz =
            u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy
            + (-u_xlat3.xyz);\n    u_xlat16_2.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1)
            uniform mediump sampler2D _BumpMap;\nin highp vec3 vs_NORMAL0;\nin highp
            vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec2
            u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump
            float u_xlat16_8;\nmediump float u_xlat16_12;\nfloat u_xlat15;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12
            = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_3.x
            = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_8 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_3.x = u_xlat16_3.x
            * u_xlat16_8;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n   
            u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x
            * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16_7.xyz
            = u_xlat16_7.xyz * u_xlat16_3.xxx;\n    u_xlat16_7.xyz = u_xlat16_7.xyz
            * _RimColor.xyz;\n    u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _SColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_7.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TANGENT0;\nattribute highp
            vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat12);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) *
            u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    u_xlat3.xyz =
            u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy
            + (-u_xlat3.xyz);\n    u_xlat16_2.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform lowp sampler2D _BaseMap;\nuniform lowp sampler2D
            _BumpMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec2 u_xlat1;\nlowp
            vec2 u_xlat10_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nmediump
            float u_xlat16_12;\nfloat u_xlat15;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat10_1.xy = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat10_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12
            = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_3.x
            = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_8 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_3.x = u_xlat16_3.x
            * u_xlat16_8;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n   
            u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x
            * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16_7.xyz
            = u_xlat16_7.xyz * u_xlat16_3.xxx;\n    u_xlat16_7.xyz = u_xlat16_7.xyz
            * _RimColor.xyz;\n    u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _SColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_7.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat12);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) *
            u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    u_xlat3.xyz =
            u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy
            + (-u_xlat3.xyz);\n    u_xlat16_2.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1)
            uniform mediump sampler2D _BumpMap;\nin highp vec3 vs_NORMAL0;\nin highp
            vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec2
            u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump
            float u_xlat16_8;\nmediump float u_xlat16_12;\nfloat u_xlat15;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12
            = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_3.x
            = (-_RimMin) + _RimMax;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_8 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_3.x = u_xlat16_3.x
            * u_xlat16_8;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n   
            u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x = u_xlat16_3.x
            * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16_7.xyz
            = u_xlat16_7.xyz * u_xlat16_3.xxx;\n    u_xlat16_7.xyz = u_xlat16_7.xyz
            * _RimColor.xyz;\n    u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_2.xxx * u_xlat16_3.xyz + _SColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_7.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tvec4 _EmissionMap_ST;\nuniform
            \tmediump vec4 _EmissionColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _EmissionMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp float u_xlat10_5;\nmediump
            float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump
            float u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nvoid
            main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x,
            0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat15
            = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16
            = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16,
            0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz
            = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat0.xy
            = vs_TEXCOORD1.zw * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n    u_xlat10_0.xyz
            = texture2D(_EmissionMap, u_xlat0.xy).xyz;\n    u_xlat16_1.xyw = _EmissionColor.xyz
            * u_xlat10_0.xyz + u_xlat16_1.xyw;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n   
            u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_3.xyz =
            vec3(u_xlat16_11) * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_1.xyw;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tvec4 _EmissionMap_ST;\nuniform
            \tmediump vec4 _EmissionColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(2)
            uniform mediump sampler2D _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin
            highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump
            vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3
            u_xlat16_4;\nfloat u_xlat5;\nmediump float u_xlat16_5;\nmediump float
            u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump float
            u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nvoid main()\n{\n   
            u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat16_5
            = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat16_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat0.xy
            = vs_TEXCOORD1.zw * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n    u_xlat16_0.xyz
            = texture(_EmissionMap, u_xlat0.xy).xyz;\n    u_xlat16_1.xyw = _EmissionColor.xyz
            * u_xlat16_0.xyz + u_xlat16_1.xyw;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n   
            u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_3.xyz =
            vec3(u_xlat16_11) * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_1.xyw;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tvec4 _EmissionMap_ST;\nuniform \tmediump vec4 _EmissionColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _EmissionMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nmediump
            vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3
            u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump float u_xlat16_8;\nfloat
            u_xlat18;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nlowp float u_xlat10_21;\nmediump
            float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat18);\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_19
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat18 = max(u_xlat16_19,
            0.00100000005);\n    u_xlat16_19 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_19) * u_xlat16_2.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.xyz
            = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ?
            1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;\n   
            u_xlat18 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n    u_xlat18 = clamp(u_xlat18,
            0.0, 1.0);\n    u_xlat10_21 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_19 = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_19
            = u_xlat10_21 * u_xlat16_19;\n    u_xlat21 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = min(u_xlat21, 1.0);\n    u_xlat16_2.x = u_xlat21 * u_xlat21
            + 1.0;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8 = u_xlat18 * u_xlat16_19
            + (-u_xlat18);\n    u_xlat18 = u_xlat16_8 * u_xlat18 + 1.0;\n    u_xlat18
            = u_xlat18 * u_xlat18 + 9.99999975e-05;\n    u_xlat21 = u_xlat16_19 *
            0.318309873;\n    u_xlat18 = u_xlat21 / u_xlat18;\n    u_xlat16_19 =
            u_xlat18 * 0.157079637;\n    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19;\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x;\n    u_xlat16_2.xzw
            = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlat16_2.xzw = u_xlat16_2.xzw
            * _SpecularColor.xyz;\n    u_xlat0.xy = vs_TEXCOORD1.zw * _EmissionMap_ST.xy
            + _EmissionMap_ST.zw;\n    u_xlat10_0.xyz = texture2D(_EmissionMap, u_xlat0.xy).xyz;\n   
            u_xlat16_2.xzw = _EmissionColor.xyz * u_xlat10_0.xyz + u_xlat16_2.xzw;\n   
            u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz = (bool(u_xlatb0))
            ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_1.x
            = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    u_xlat16_1.xyz
            = u_xlat16_1.xyz * u_xlat16_4.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz
            * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            u_xlat16_19 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_8
            = (-u_xlat16_19) + u_xlat16_8;\n    u_xlat16_22 = _RampSmoothing * 0.5
            + _RampThreshold;\n    u_xlat16_19 = (-u_xlat16_19) + u_xlat16_22;\n   
            u_xlat16_19 = float(1.0) / u_xlat16_19;\n    u_xlat16_19 = u_xlat16_19
            * u_xlat16_8;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_8
            = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n    u_xlat16_5.xyz = (-_SColor.xyz)
            + _HColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_19) * u_xlat16_5.xyz
            + _SColor.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xzw + u_xlat16_1.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tvec4 _EmissionMap_ST;\nuniform \tmediump vec4 _EmissionColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _EmissionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D
            _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump
            vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3
            u_xlat16_5;\nmediump float u_xlat16_8;\nfloat u_xlat18;\nmediump float
            u_xlat16_19;\nfloat u_xlat21;\nmediump float u_xlat16_21;\nmediump float
            u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat18);\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_19
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat18 = max(u_xlat16_19,
            0.00100000005);\n    u_xlat16_19 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_19) * u_xlat16_2.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.xyz
            = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ?
            0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat18)
            * u_xlat3.xyz;\n    u_xlat18 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n   
            u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat16_21 = texture(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n    u_xlat16_19 = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_19 = u_xlat16_21 * u_xlat16_19;\n    u_xlat21 = u_xlat16_19
            * u_xlat16_19;\n    u_xlat16_19 = min(u_xlat21, 1.0);\n    u_xlat16_2.x
            = u_xlat21 * u_xlat21 + 1.0;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8 = u_xlat18 *
            u_xlat16_19 + (-u_xlat18);\n    u_xlat18 = u_xlat16_8 * u_xlat18 + 1.0;\n   
            u_xlat18 = u_xlat18 * u_xlat18 + 9.99999975e-05;\n    u_xlat21 = u_xlat16_19
            * 0.318309873;\n    u_xlat18 = u_xlat21 / u_xlat18;\n    u_xlat16_19
            = u_xlat18 * 0.157079637;\n    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19;\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x;\n    u_xlat16_2.xzw
            = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlat16_2.xzw = u_xlat16_2.xzw
            * _SpecularColor.xyz;\n    u_xlat0.xy = vs_TEXCOORD1.zw * _EmissionMap_ST.xy
            + _EmissionMap_ST.zw;\n    u_xlat16_0.xyz = texture(_EmissionMap, u_xlat0.xy).xyz;\n   
            u_xlat16_2.xzw = _EmissionColor.xyz * u_xlat16_0.xyz + u_xlat16_2.xzw;\n   
            u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz = (bool(u_xlatb0))
            ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_1.x
            = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n    u_xlat16_1.xyz
            = u_xlat16_1.xyz * u_xlat16_4.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz
            * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            u_xlat16_19 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_8
            = (-u_xlat16_19) + u_xlat16_8;\n    u_xlat16_22 = _RampSmoothing * 0.5
            + _RampThreshold;\n    u_xlat16_19 = (-u_xlat16_19) + u_xlat16_22;\n   
            u_xlat16_19 = float(1.0) / u_xlat16_19;\n    u_xlat16_19 = u_xlat16_19
            * u_xlat16_8;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_8
            = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n    u_xlat16_5.xyz = (-_SColor.xyz)
            + _HColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_19) * u_xlat16_5.xyz
            + _SColor.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xzw + u_xlat16_1.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tvec4 _EmissionMap_ST;\nuniform \tmediump vec4 _EmissionColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _EmissionMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nmediump
            vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3
            u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump float u_xlat16_8;\nfloat
            u_xlat18;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nlowp float u_xlat10_21;\nmediump
            float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat18);\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_19
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat18 = max(u_xlat16_19,
            0.00100000005);\n    u_xlat16_19 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_19) * u_xlat16_2.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.xyz
            = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ?
            1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;\n   
            u_xlat18 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n    u_xlat18 = clamp(u_xlat18,
            0.0, 1.0);\n    u_xlat10_21 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_19 = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_19
            = u_xlat10_21 * u_xlat16_19;\n    u_xlat21 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = min(u_xlat21, 1.0);\n    u_xlat16_2.x = u_xlat21 * u_xlat21
            + 1.0;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8 = u_xlat18 * u_xlat16_19
            + (-u_xlat18);\n    u_xlat18 = u_xlat16_8 * u_xlat18 + 1.0;\n    u_xlat18
            = u_xlat18 * u_xlat18 + 9.99999975e-05;\n    u_xlat21 = u_xlat16_19 *
            0.318309873;\n    u_xlat18 = u_xlat21 / u_xlat18;\n    u_xlat16_19 =
            u_xlat18 * 0.157079637;\n    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19;\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x;\n    u_xlat16_2.xzw
            = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlat16_2.xzw = u_xlat16_2.xzw
            * _SpecularColor.xyz;\n    u_xlat0.xy = vs_TEXCOORD1.zw * _EmissionMap_ST.xy
            + _EmissionMap_ST.zw;\n    u_xlat10_0.xyz = texture2D(_EmissionMap, u_xlat0.xy).xyz;\n   
            u_xlat16_2.xzw = _EmissionColor.xyz * u_xlat10_0.xyz + u_xlat16_2.xzw;\n   
            u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz = (bool(u_xlatb0))
            ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_1.x
            = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    u_xlat16_1.xyz
            = u_xlat16_1.xyz * u_xlat16_4.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz
            * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            u_xlat16_19 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_8
            = (-u_xlat16_19) + u_xlat16_8;\n    u_xlat16_22 = _RampSmoothing * 0.5
            + _RampThreshold;\n    u_xlat16_19 = (-u_xlat16_19) + u_xlat16_22;\n   
            u_xlat16_19 = float(1.0) / u_xlat16_19;\n    u_xlat16_19 = u_xlat16_19
            * u_xlat16_8;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_8
            = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n    u_xlat16_5.xyz = (-_SColor.xyz)
            + _HColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_19) * u_xlat16_5.xyz
            + _SColor.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xzw + u_xlat16_1.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tvec4 _EmissionMap_ST;\nuniform \tmediump vec4 _EmissionColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _EmissionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D
            _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump
            vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3
            u_xlat16_5;\nmediump float u_xlat16_8;\nfloat u_xlat18;\nmediump float
            u_xlat16_19;\nfloat u_xlat21;\nmediump float u_xlat16_21;\nmediump float
            u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat18);\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_19
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat18 = max(u_xlat16_19,
            0.00100000005);\n    u_xlat16_19 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_19) * u_xlat16_2.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.xyz
            = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ?
            0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat18)
            * u_xlat3.xyz;\n    u_xlat18 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n   
            u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat16_21 = texture(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n    u_xlat16_19 = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_19 = u_xlat16_21 * u_xlat16_19;\n    u_xlat21 = u_xlat16_19
            * u_xlat16_19;\n    u_xlat16_19 = min(u_xlat21, 1.0);\n    u_xlat16_2.x
            = u_xlat21 * u_xlat21 + 1.0;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8 = u_xlat18 *
            u_xlat16_19 + (-u_xlat18);\n    u_xlat18 = u_xlat16_8 * u_xlat18 + 1.0;\n   
            u_xlat18 = u_xlat18 * u_xlat18 + 9.99999975e-05;\n    u_xlat21 = u_xlat16_19
            * 0.318309873;\n    u_xlat18 = u_xlat21 / u_xlat18;\n    u_xlat16_19
            = u_xlat18 * 0.157079637;\n    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19;\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x;\n    u_xlat16_2.xzw
            = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlat16_2.xzw = u_xlat16_2.xzw
            * _SpecularColor.xyz;\n    u_xlat0.xy = vs_TEXCOORD1.zw * _EmissionMap_ST.xy
            + _EmissionMap_ST.zw;\n    u_xlat16_0.xyz = texture(_EmissionMap, u_xlat0.xy).xyz;\n   
            u_xlat16_2.xzw = _EmissionColor.xyz * u_xlat16_0.xyz + u_xlat16_2.xzw;\n   
            u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz = (bool(u_xlatb0))
            ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_1.x
            = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n    u_xlat16_1.xyz
            = u_xlat16_1.xyz * u_xlat16_4.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz
            * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            u_xlat16_19 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_8
            = (-u_xlat16_19) + u_xlat16_8;\n    u_xlat16_22 = _RampSmoothing * 0.5
            + _RampThreshold;\n    u_xlat16_19 = (-u_xlat16_19) + u_xlat16_22;\n   
            u_xlat16_19 = float(1.0) / u_xlat16_19;\n    u_xlat16_19 = u_xlat16_19
            * u_xlat16_8;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_8
            = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n    u_xlat16_5.xyz = (-_SColor.xyz)
            + _HColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_19) * u_xlat16_5.xyz
            + _SColor.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xzw + u_xlat16_1.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tvec4 _EmissionMap_ST;\nuniform \tmediump vec4 _EmissionColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _EmissionMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nmediump
            vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3
            u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump float u_xlat16_8;\nfloat
            u_xlat18;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nlowp float u_xlat10_21;\nmediump
            float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat18);\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_19
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat18 = max(u_xlat16_19,
            0.00100000005);\n    u_xlat16_19 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_19) * u_xlat16_2.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.xyz
            = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ?
            1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;\n   
            u_xlat18 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n    u_xlat18 = clamp(u_xlat18,
            0.0, 1.0);\n    u_xlat10_21 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_19 = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_19
            = u_xlat10_21 * u_xlat16_19;\n    u_xlat21 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = min(u_xlat21, 1.0);\n    u_xlat16_2.x = u_xlat21 * u_xlat21
            + 1.0;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8 = u_xlat18 * u_xlat16_19
            + (-u_xlat18);\n    u_xlat18 = u_xlat16_8 * u_xlat18 + 1.0;\n    u_xlat18
            = u_xlat18 * u_xlat18 + 9.99999975e-05;\n    u_xlat21 = u_xlat16_19 *
            0.318309873;\n    u_xlat18 = u_xlat21 / u_xlat18;\n    u_xlat16_19 =
            u_xlat18 * 0.157079637;\n    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19;\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x;\n    u_xlat16_2.xzw
            = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlat16_19 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-u_xlat16_19) + u_xlat16_8;\n   
            u_xlat16_4.x = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_19
            = (-u_xlat16_19) + u_xlat16_4.x;\n    u_xlat16_19 = float(1.0) / u_xlat16_19;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n    u_xlat16_19 = clamp(u_xlat16_19,
            0.0, 1.0);\n    u_xlat16_8 = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n   
            u_xlat16_4.xyz = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlat16_8
            = (-_RimMin) + _RimMax;\n    u_xlat16_8 = float(1.0) / u_xlat16_8;\n   
            u_xlat16_22 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_8 = u_xlat16_8
            * u_xlat16_22;\n    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n    u_xlat16_22
            = u_xlat16_8 * -2.0 + 3.0;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;\n   
            u_xlat16_8 = u_xlat16_8 * u_xlat16_22;\n    u_xlat16_4.xyz = vec3(u_xlat16_8)
            * u_xlat16_4.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;\n   
            u_xlat0.xy = vs_TEXCOORD1.zw * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n   
            u_xlat10_0.xyz = texture2D(_EmissionMap, u_xlat0.xy).xyz;\n    u_xlat16_4.xyz
            = _EmissionColor.xyz * u_xlat10_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xzw * _SpecularColor.xyz + u_xlat16_4.xyz;\n    u_xlatb0
            = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz
            : u_xlat3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr,
            u_xlat0);\n    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z
            = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    u_xlat16_1.xyz
            = u_xlat16_1.xyz * u_xlat16_4.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz
            * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            u_xlat16_5.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_5.xyz =
            vec3(u_xlat16_19) * u_xlat16_5.xyz + _SColor.xyz;\n    u_xlat16_5.xyz
            = u_xlat16_5.xyz * _LightColor0.xyz;\n    u_xlat16_1.xyz = u_xlat16_4.xyz
            * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tvec4 _EmissionMap_ST;\nuniform \tmediump vec4 _EmissionColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0) uniform mediump
            sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(2)
            uniform mediump sampler2D _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin
            highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4
            vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump
            vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3
            u_xlat16_5;\nmediump float u_xlat16_8;\nfloat u_xlat18;\nmediump float
            u_xlat16_19;\nfloat u_xlat21;\nmediump float u_xlat16_21;\nmediump float
            u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat18);\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_19
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat18 = max(u_xlat16_19,
            0.00100000005);\n    u_xlat16_19 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_19) * u_xlat16_2.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.xyz
            = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ?
            0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat18)
            * u_xlat3.xyz;\n    u_xlat18 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n   
            u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat16_21 = texture(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n    u_xlat16_19 = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_19 = u_xlat16_21 * u_xlat16_19;\n    u_xlat21 = u_xlat16_19
            * u_xlat16_19;\n    u_xlat16_19 = min(u_xlat21, 1.0);\n    u_xlat16_2.x
            = u_xlat21 * u_xlat21 + 1.0;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8 = u_xlat18 *
            u_xlat16_19 + (-u_xlat18);\n    u_xlat18 = u_xlat16_8 * u_xlat18 + 1.0;\n   
            u_xlat18 = u_xlat18 * u_xlat18 + 9.99999975e-05;\n    u_xlat21 = u_xlat16_19
            * 0.318309873;\n    u_xlat18 = u_xlat21 / u_xlat18;\n    u_xlat16_19
            = u_xlat18 * 0.157079637;\n    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19;\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x;\n    u_xlat16_2.xzw
            = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlat16_19 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-u_xlat16_19) + u_xlat16_8;\n   
            u_xlat16_4.x = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_19
            = (-u_xlat16_19) + u_xlat16_4.x;\n    u_xlat16_19 = float(1.0) / u_xlat16_19;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n    u_xlat16_19 = clamp(u_xlat16_19,
            0.0, 1.0);\n    u_xlat16_8 = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n   
            u_xlat16_4.xyz = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlat16_8
            = (-_RimMin) + _RimMax;\n    u_xlat16_8 = float(1.0) / u_xlat16_8;\n   
            u_xlat16_22 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_8 = u_xlat16_8
            * u_xlat16_22;\n    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n    u_xlat16_22
            = u_xlat16_8 * -2.0 + 3.0;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;\n   
            u_xlat16_8 = u_xlat16_8 * u_xlat16_22;\n    u_xlat16_4.xyz = vec3(u_xlat16_8)
            * u_xlat16_4.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;\n   
            u_xlat0.xy = vs_TEXCOORD1.zw * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n   
            u_xlat16_0.xyz = texture(_EmissionMap, u_xlat0.xy).xyz;\n    u_xlat16_4.xyz
            = _EmissionColor.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xzw * _SpecularColor.xyz + u_xlat16_4.xyz;\n    u_xlatb0
            = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz
            : u_xlat3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr,
            u_xlat0);\n    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z
            = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n    u_xlat16_1.xyz
            = u_xlat16_1.xyz * u_xlat16_4.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz
            * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            u_xlat16_5.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_5.xyz =
            vec3(u_xlat16_19) * u_xlat16_5.xyz + _SColor.xyz;\n    u_xlat16_5.xyz
            = u_xlat16_5.xyz * _LightColor0.xyz;\n    u_xlat16_1.xyz = u_xlat16_4.xyz
            * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tvec4 _EmissionMap_ST;\nuniform \tmediump vec4 _EmissionColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _EmissionMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nmediump
            vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3
            u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump float u_xlat16_8;\nfloat
            u_xlat18;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nlowp float u_xlat10_21;\nmediump
            float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat18);\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_19
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat18 = max(u_xlat16_19,
            0.00100000005);\n    u_xlat16_19 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_19) * u_xlat16_2.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.xyz
            = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ?
            1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;\n   
            u_xlat18 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n    u_xlat18 = clamp(u_xlat18,
            0.0, 1.0);\n    u_xlat10_21 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_19 = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_19
            = u_xlat10_21 * u_xlat16_19;\n    u_xlat21 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = min(u_xlat21, 1.0);\n    u_xlat16_2.x = u_xlat21 * u_xlat21
            + 1.0;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8 = u_xlat18 * u_xlat16_19
            + (-u_xlat18);\n    u_xlat18 = u_xlat16_8 * u_xlat18 + 1.0;\n    u_xlat18
            = u_xlat18 * u_xlat18 + 9.99999975e-05;\n    u_xlat21 = u_xlat16_19 *
            0.318309873;\n    u_xlat18 = u_xlat21 / u_xlat18;\n    u_xlat16_19 =
            u_xlat18 * 0.157079637;\n    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19;\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x;\n    u_xlat16_2.xzw
            = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlat16_19 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-u_xlat16_19) + u_xlat16_8;\n   
            u_xlat16_4.x = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_19
            = (-u_xlat16_19) + u_xlat16_4.x;\n    u_xlat16_19 = float(1.0) / u_xlat16_19;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n    u_xlat16_19 = clamp(u_xlat16_19,
            0.0, 1.0);\n    u_xlat16_8 = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n   
            u_xlat16_4.xyz = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlat16_8
            = (-_RimMin) + _RimMax;\n    u_xlat16_8 = float(1.0) / u_xlat16_8;\n   
            u_xlat16_22 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_8 = u_xlat16_8
            * u_xlat16_22;\n    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n    u_xlat16_22
            = u_xlat16_8 * -2.0 + 3.0;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;\n   
            u_xlat16_8 = u_xlat16_8 * u_xlat16_22;\n    u_xlat16_4.xyz = vec3(u_xlat16_8)
            * u_xlat16_4.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;\n   
            u_xlat0.xy = vs_TEXCOORD1.zw * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n   
            u_xlat10_0.xyz = texture2D(_EmissionMap, u_xlat0.xy).xyz;\n    u_xlat16_4.xyz
            = _EmissionColor.xyz * u_xlat10_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xzw * _SpecularColor.xyz + u_xlat16_4.xyz;\n    u_xlatb0
            = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz
            : u_xlat3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr,
            u_xlat0);\n    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z
            = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    u_xlat16_1.xyz
            = u_xlat16_1.xyz * u_xlat16_4.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz
            * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            u_xlat16_5.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_5.xyz =
            vec3(u_xlat16_19) * u_xlat16_5.xyz + _SColor.xyz;\n    u_xlat16_5.xyz
            = u_xlat16_5.xyz * _LightColor0.xyz;\n    u_xlat16_1.xyz = u_xlat16_4.xyz
            * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tvec4 _EmissionMap_ST;\nuniform \tmediump vec4 _EmissionColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0) uniform mediump
            sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(2)
            uniform mediump sampler2D _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin
            highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4
            vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump
            vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3
            u_xlat16_5;\nmediump float u_xlat16_8;\nfloat u_xlat18;\nmediump float
            u_xlat16_19;\nfloat u_xlat21;\nmediump float u_xlat16_21;\nmediump float
            u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat18);\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_19
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat18 = max(u_xlat16_19,
            0.00100000005);\n    u_xlat16_19 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_19) * u_xlat16_2.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.xyz
            = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ?
            0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat18)
            * u_xlat3.xyz;\n    u_xlat18 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n   
            u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat16_21 = texture(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n    u_xlat16_19 = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_19 = u_xlat16_21 * u_xlat16_19;\n    u_xlat21 = u_xlat16_19
            * u_xlat16_19;\n    u_xlat16_19 = min(u_xlat21, 1.0);\n    u_xlat16_2.x
            = u_xlat21 * u_xlat21 + 1.0;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8 = u_xlat18 *
            u_xlat16_19 + (-u_xlat18);\n    u_xlat18 = u_xlat16_8 * u_xlat18 + 1.0;\n   
            u_xlat18 = u_xlat18 * u_xlat18 + 9.99999975e-05;\n    u_xlat21 = u_xlat16_19
            * 0.318309873;\n    u_xlat18 = u_xlat21 / u_xlat18;\n    u_xlat16_19
            = u_xlat18 * 0.157079637;\n    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19;\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x;\n    u_xlat16_2.xzw
            = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlat16_19 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_8 = (-u_xlat16_19) + u_xlat16_8;\n   
            u_xlat16_4.x = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_19
            = (-u_xlat16_19) + u_xlat16_4.x;\n    u_xlat16_19 = float(1.0) / u_xlat16_19;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n    u_xlat16_19 = clamp(u_xlat16_19,
            0.0, 1.0);\n    u_xlat16_8 = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n   
            u_xlat16_4.xyz = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlat16_8
            = (-_RimMin) + _RimMax;\n    u_xlat16_8 = float(1.0) / u_xlat16_8;\n   
            u_xlat16_22 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_8 = u_xlat16_8
            * u_xlat16_22;\n    u_xlat16_8 = clamp(u_xlat16_8, 0.0, 1.0);\n    u_xlat16_22
            = u_xlat16_8 * -2.0 + 3.0;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;\n   
            u_xlat16_8 = u_xlat16_8 * u_xlat16_22;\n    u_xlat16_4.xyz = vec3(u_xlat16_8)
            * u_xlat16_4.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _RimColor.xyz;\n   
            u_xlat0.xy = vs_TEXCOORD1.zw * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n   
            u_xlat16_0.xyz = texture(_EmissionMap, u_xlat0.xy).xyz;\n    u_xlat16_4.xyz
            = _EmissionColor.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xzw * _SpecularColor.xyz + u_xlat16_4.xyz;\n    u_xlatb0
            = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz
            : u_xlat3.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr,
            u_xlat0);\n    u_xlat16_1.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z
            = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = max(u_xlat16_1.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n    u_xlat16_1.xyz
            = u_xlat16_1.xyz * u_xlat16_4.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz
            * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            u_xlat16_5.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_5.xyz =
            vec3(u_xlat16_19) * u_xlat16_5.xyz + _SColor.xyz;\n    u_xlat16_5.xyz
            = u_xlat16_5.xyz * _LightColor0.xyz;\n    u_xlat16_1.xyz = u_xlat16_4.xyz
            * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tvec4 _EmissionMap_ST;\nuniform \tmediump vec4 _EmissionColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform lowp
            sampler2D _EmissionMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nbool u_xlatb0;\nvec2 u_xlat1;\nlowp vec2 u_xlat10_1;\nmediump
            vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump
            vec3 u_xlat16_5;\nfloat u_xlat6;\nmediump vec3 u_xlat16_10;\nfloat u_xlat12;\nlowp
            float u_xlat10_12;\nmediump float u_xlat16_14;\nfloat u_xlat18;\nmediump
            float u_xlat16_20;\nmediump float u_xlat16_21;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat10_1.xy = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat10_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_14
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_14 = min(u_xlat16_14, 1.0);\n    u_xlat16_14
            = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = sqrt(u_xlat16_14);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_14)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_20 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_20, 0.00100000005);\n    u_xlat16_20 = inversesqrt(u_xlat18);\n   
            u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_20);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_4.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_3.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_20 = dot(u_xlat16_4.xyz,
            u_xlat16_4.xyz);\n    u_xlat6 = max(u_xlat16_20, 0.00100000005);\n   
            u_xlat16_20 = inversesqrt(u_xlat6);\n    u_xlat16_4.xyz = vec3(u_xlat16_20)
            * u_xlat16_4.xyz;\n    u_xlat6 = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);\n   
            u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat10_12 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n    u_xlat16_20 = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_20 = u_xlat10_12 * u_xlat16_20;\n    u_xlat12 = u_xlat16_20
            * u_xlat16_20;\n    u_xlat16_20 = min(u_xlat12, 1.0);\n    u_xlat16_21
            = u_xlat12 * u_xlat12 + 1.0;\n    u_xlat16_21 = float(1.0) / u_xlat16_21;\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_4.x = u_xlat6
            * u_xlat16_20 + (-u_xlat6);\n    u_xlat6 = u_xlat16_4.x * u_xlat6 + 1.0;\n   
            u_xlat6 = u_xlat6 * u_xlat6 + 9.99999975e-05;\n    u_xlat12 = u_xlat16_20
            * 0.318309873;\n    u_xlat6 = u_xlat12 / u_xlat6;\n    u_xlat16_20 =
            u_xlat6 * 0.157079637;\n    u_xlat16_20 = u_xlat16_21 * u_xlat16_20;\n   
            u_xlat16_21 = u_xlat0.x;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n   
            u_xlat16_4.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_21;\n    u_xlat16_10.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;\n   
            u_xlat16_10.xyz = u_xlat16_10.xyz * _SpecularColor.xyz;\n    u_xlat0.xy
            = vs_TEXCOORD1.zw * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n    u_xlat10_0.xyz
            = texture2D(_EmissionMap, u_xlat0.xy).xyz;\n    u_xlat16_10.xyz = _EmissionColor.xyz
            * u_xlat10_0.xyz + u_xlat16_10.xyz;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat16_2.xyz;\n   
            u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_20 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_21 = (-u_xlat16_20) + u_xlat16_4.x;\n    u_xlat16_4.x = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_20 = (-u_xlat16_20) + u_xlat16_4.x;\n   
            u_xlat16_20 = float(1.0) / u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_21;\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n   
            u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;\n    u_xlat16_5.xyz
            = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_20)
            * u_xlat16_5.xyz + _SColor.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz
            * _LightColor0.xyz;\n    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_10.xyz + u_xlat16_2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TANGENT0;\nin highp vec4 in_TEXCOORD0;\nout highp vec3
            vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout
            highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4
            vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump float
            u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tvec4 _EmissionMap_ST;\nuniform \tmediump vec4 _EmissionColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _BumpMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(3)
            uniform mediump sampler2D _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin
            highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4
            vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nlayout(location = 0) out
            mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool
            u_xlatb0;\nvec2 u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nfloat
            u_xlat6;\nmediump vec3 u_xlat16_10;\nfloat u_xlat12;\nmediump float u_xlat16_12;\nmediump
            float u_xlat16_14;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nmediump
            float u_xlat16_21;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ? 0xffffffffu
            : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat18)
            * u_xlat0.xyz;\n    u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_14
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_14 = min(u_xlat16_14, 1.0);\n    u_xlat16_14
            = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = sqrt(u_xlat16_14);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_14)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_20 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_20, 0.00100000005);\n    u_xlat16_20 = inversesqrt(u_xlat18);\n   
            u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_20);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_4.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_3.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_20 = dot(u_xlat16_4.xyz,
            u_xlat16_4.xyz);\n    u_xlat6 = max(u_xlat16_20, 0.00100000005);\n   
            u_xlat16_20 = inversesqrt(u_xlat6);\n    u_xlat16_4.xyz = vec3(u_xlat16_20)
            * u_xlat16_4.xyz;\n    u_xlat6 = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);\n   
            u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat16_12 = texture(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n    u_xlat16_20 = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_20 = u_xlat16_12 * u_xlat16_20;\n    u_xlat12 = u_xlat16_20
            * u_xlat16_20;\n    u_xlat16_20 = min(u_xlat12, 1.0);\n    u_xlat16_21
            = u_xlat12 * u_xlat12 + 1.0;\n    u_xlat16_21 = float(1.0) / u_xlat16_21;\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_4.x = u_xlat6
            * u_xlat16_20 + (-u_xlat6);\n    u_xlat6 = u_xlat16_4.x * u_xlat6 + 1.0;\n   
            u_xlat6 = u_xlat6 * u_xlat6 + 9.99999975e-05;\n    u_xlat12 = u_xlat16_20
            * 0.318309873;\n    u_xlat6 = u_xlat12 / u_xlat6;\n    u_xlat16_20 =
            u_xlat6 * 0.157079637;\n    u_xlat16_20 = u_xlat16_21 * u_xlat16_20;\n   
            u_xlat16_21 = u_xlat0.x;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n   
            u_xlat16_4.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_21;\n    u_xlat16_10.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;\n   
            u_xlat16_10.xyz = u_xlat16_10.xyz * _SpecularColor.xyz;\n    u_xlat0.xy
            = vs_TEXCOORD1.zw * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n    u_xlat16_0.xyz
            = texture(_EmissionMap, u_xlat0.xy).xyz;\n    u_xlat16_10.xyz = _EmissionColor.xyz
            * u_xlat16_0.xyz + u_xlat16_10.xyz;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat16_2.xyz;\n   
            u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_20 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_21 = (-u_xlat16_20) + u_xlat16_4.x;\n    u_xlat16_4.x = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_20 = (-u_xlat16_20) + u_xlat16_4.x;\n   
            u_xlat16_20 = float(1.0) / u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_21;\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n   
            u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;\n    u_xlat16_5.xyz
            = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_20)
            * u_xlat16_5.xyz + _SColor.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz
            * _LightColor0.xyz;\n    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_10.xyz + u_xlat16_2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tvec4 _EmissionMap_ST;\nuniform
            \tmediump vec4 _EmissionColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _EmissionMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp float u_xlat10_5;\nmediump
            float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump
            float u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nvoid
            main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x,
            0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat15
            = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16
            = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16,
            0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz
            = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat0.xy
            = vs_TEXCOORD1.zw * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n    u_xlat10_0.xyz
            = texture2D(_EmissionMap, u_xlat0.xy).xyz;\n    u_xlat16_1.xyw = _EmissionColor.xyz
            * u_xlat10_0.xyz + u_xlat16_1.xyw;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n   
            u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_3.xyz =
            vec3(u_xlat16_11) * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_1.xyw;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tvec4 _EmissionMap_ST;\nuniform
            \tmediump vec4 _EmissionColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(2)
            uniform mediump sampler2D _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin
            highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump
            vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3
            u_xlat16_4;\nfloat u_xlat5;\nmediump float u_xlat16_5;\nmediump float
            u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump float
            u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nvoid main()\n{\n   
            u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat16_5
            = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat16_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat0.xy
            = vs_TEXCOORD1.zw * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n    u_xlat16_0.xyz
            = texture(_EmissionMap, u_xlat0.xy).xyz;\n    u_xlat16_1.xyw = _EmissionColor.xyz
            * u_xlat16_0.xyz + u_xlat16_1.xyw;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n   
            u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_3.xyz =
            vec3(u_xlat16_11) * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_1.xyw;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tvec4 _EmissionMap_ST;\nuniform
            \tmediump vec4 _EmissionColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _EmissionMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp float u_xlat10_5;\nmediump
            float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump
            float u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nmediump
            float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_3.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11
            = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5
            + _RampThreshold;\n    u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n   
            u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin)
            + _RimMax;\n    u_xlat16_18 = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x
            = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18
            * -2.0 + 3.0;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_18)
            * u_xlat16_3.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;\n   
            u_xlat0.xy = vs_TEXCOORD1.zw * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n   
            u_xlat10_0.xyz = texture2D(_EmissionMap, u_xlat0.xy).xyz;\n    u_xlat16_3.xyz
            = _EmissionColor.xyz * u_xlat10_0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_1.xyw * _SpecularColor.xyz + u_xlat16_3.xyz;\n    u_xlat16_3.xyz
            = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz
            = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_1.xyw;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tvec4 _EmissionMap_ST;\nuniform
            \tmediump vec4 _EmissionColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _EmissionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D
            _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump
            vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3
            u_xlat16_4;\nfloat u_xlat5;\nmediump float u_xlat16_5;\nmediump float
            u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump float
            u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nmediump float
            u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n   
            u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat2.xyz);\n    u_xlat16_5 = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_1.x = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_1.x
            = u_xlat16_5 * u_xlat16_1.x;\n    u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n   
            u_xlat16_1.x = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5
            + 1.0;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_1.x =
            u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11 = u_xlat15 * u_xlat16_1.x
            + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 * u_xlat15 + 1.0;\n    u_xlat5
            = u_xlat5 * u_xlat5 + 9.99999975e-05;\n    u_xlat10 = u_xlat16_1.x *
            0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n    u_xlat16_1.x = u_xlat5
            * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_6
            = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_11
            = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n   
            u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin) + _RimMax;\n    u_xlat16_18
            = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_18 = clamp(u_xlat16_18,
            0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18 * -2.0 + 3.0;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * _RimColor.xyz;\n    u_xlat0.xy = vs_TEXCOORD1.zw *
            _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n    u_xlat16_0.xyz = texture(_EmissionMap,
            u_xlat0.xy).xyz;\n    u_xlat16_3.xyz = _EmissionColor.xyz * u_xlat16_0.xyz
            + u_xlat16_3.xyz;\n    u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz
            + u_xlat16_3.xyz;\n    u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_3.xyz + _SColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_1.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tvec4 _EmissionMap_ST;\nuniform
            \tmediump vec4 _EmissionColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _EmissionMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp float u_xlat10_5;\nmediump
            float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump
            float u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nmediump
            float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_3.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11
            = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5
            + _RampThreshold;\n    u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n   
            u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin)
            + _RimMax;\n    u_xlat16_18 = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x
            = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18
            * -2.0 + 3.0;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_18)
            * u_xlat16_3.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _RimColor.xyz;\n   
            u_xlat0.xy = vs_TEXCOORD1.zw * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n   
            u_xlat10_0.xyz = texture2D(_EmissionMap, u_xlat0.xy).xyz;\n    u_xlat16_3.xyz
            = _EmissionColor.xyz * u_xlat10_0.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_1.xyw * _SpecularColor.xyz + u_xlat16_3.xyz;\n    u_xlat16_3.xyz
            = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz
            = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_1.xyw;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tvec4 _EmissionMap_ST;\nuniform
            \tmediump vec4 _EmissionColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _EmissionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D
            _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump
            vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3
            u_xlat16_4;\nfloat u_xlat5;\nmediump float u_xlat16_5;\nmediump float
            u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump float
            u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nmediump float
            u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n   
            u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat2.xyz);\n    u_xlat16_5 = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_1.x = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_1.x
            = u_xlat16_5 * u_xlat16_1.x;\n    u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n   
            u_xlat16_1.x = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5
            + 1.0;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_1.x =
            u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11 = u_xlat15 * u_xlat16_1.x
            + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 * u_xlat15 + 1.0;\n    u_xlat5
            = u_xlat5 * u_xlat5 + 9.99999975e-05;\n    u_xlat10 = u_xlat16_1.x *
            0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n    u_xlat16_1.x = u_xlat5
            * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_6
            = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_11
            = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n   
            u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin) + _RimMax;\n    u_xlat16_18
            = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_18 = clamp(u_xlat16_18,
            0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18 * -2.0 + 3.0;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * _RimColor.xyz;\n    u_xlat0.xy = vs_TEXCOORD1.zw *
            _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n    u_xlat16_0.xyz = texture(_EmissionMap,
            u_xlat0.xy).xyz;\n    u_xlat16_3.xyz = _EmissionColor.xyz * u_xlat16_0.xyz
            + u_xlat16_3.xyz;\n    u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz
            + u_xlat16_3.xyz;\n    u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_3.xyz + _SColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_1.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tvec4 _BumpMap_ST;\nuniform \tmediump float _BumpScale;\nuniform \tmediump
            vec4 _BaseColor;\nuniform \tvec4 _EmissionMap_ST;\nuniform \tmediump
            vec4 _EmissionColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump
            vec4 _HColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform lowp sampler2D _BaseMap;\nuniform lowp
            sampler2D _BumpMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp
            sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec3
            u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec2 u_xlat10_1;\nmediump
            vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat
            u_xlat5;\nmediump float u_xlat16_7;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nlowp float u_xlat10_10;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat10_1.xy = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat10_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12
            = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17)
            + u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat16_17 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat5 = max(u_xlat16_17,
            0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat5);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_17) * u_xlat16_3.xyz;\n    u_xlat5 = dot(u_xlat16_2.xyz,
            u_xlat16_3.xyz);\n    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n    u_xlat10_10
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat10_10 * u_xlat16_2.x;\n   
            u_xlat10 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = min(u_xlat10,
            1.0);\n    u_xlat16_7 = u_xlat10 * u_xlat10 + 1.0;\n    u_xlat16_7 =
            float(1.0) / u_xlat16_7;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n   
            u_xlat16_12 = u_xlat5 * u_xlat16_2.x + (-u_xlat5);\n    u_xlat5 = u_xlat16_12
            * u_xlat5 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_2.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_2.x = u_xlat5 * 0.157079637;\n    u_xlat16_2.x = u_xlat16_7
            * u_xlat16_2.x;\n    u_xlat16_7 = u_xlat0.x;\n    u_xlat16_7 = clamp(u_xlat16_7,
            0.0, 1.0);\n    u_xlat16_12 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_2.x
            = u_xlat16_7 * u_xlat16_2.x;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * _LightColor0.xyz;\n   
            u_xlat16_2.xyw = u_xlat16_2.xyw * _SpecularColor.xyz;\n    u_xlat0.xy
            = vs_TEXCOORD1.zw * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n    u_xlat10_0.xyz
            = texture2D(_EmissionMap, u_xlat0.xy).xyz;\n    u_xlat16_2.xyw = _EmissionColor.xyz
            * u_xlat10_0.xyz + u_xlat16_2.xyw;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_12 = u_xlat16_12 + (-u_xlat16_3.x);\n   
            u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x;\n    u_xlat16_12 = clamp(u_xlat16_12,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_12 * -2.0 + 3.0;\n    u_xlat16_12
            = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_3.xyz =
            vec3(u_xlat16_12) * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_2.xyw;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TANGENT0;\nin highp vec4 in_TEXCOORD0;\nout highp vec3
            vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout
            highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4
            vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump float
            u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tvec4 _BumpMap_ST;\nuniform \tmediump float _BumpScale;\nuniform \tmediump
            vec4 _BaseColor;\nuniform \tvec4 _EmissionMap_ST;\nuniform \tmediump
            vec4 _EmissionColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump
            vec4 _HColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1)
            uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(2) uniform mediump
            sampler2D _EmissionMap;\nUNITY_LOCATION(3) uniform mediump sampler2D
            _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4
            vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump
            vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat
            u_xlat5;\nmediump float u_xlat16_7;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_10;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy
            + _BumpMap_ST.zw;\n    u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n   
            u_xlat16_2.xy = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n   
            u_xlat16_12 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy =
            u_xlat16_2.xy * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12,
            1.0);\n    u_xlat16_12 = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n   
            u_xlat16_3.xyz = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw
            = u_xlat16_2.xxx * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz
            = vec3(u_xlat16_12) * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_17, 0.00100000005);\n   
            u_xlat16_17 = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_3.xyz
            = u_xlat0.xyz * vec3(u_xlat16_17) + u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat16_2.xyz,
            u_xlat1.xyz);\n    u_xlat16_17 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n   
            u_xlat5 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat5);\n   
            u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;\n    u_xlat5 = dot(u_xlat16_2.xyz,
            u_xlat16_3.xyz);\n    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n    u_xlat16_10
            = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x;\n   
            u_xlat10 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = min(u_xlat10,
            1.0);\n    u_xlat16_7 = u_xlat10 * u_xlat10 + 1.0;\n    u_xlat16_7 =
            float(1.0) / u_xlat16_7;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n   
            u_xlat16_12 = u_xlat5 * u_xlat16_2.x + (-u_xlat5);\n    u_xlat5 = u_xlat16_12
            * u_xlat5 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_2.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_2.x = u_xlat5 * 0.157079637;\n    u_xlat16_2.x = u_xlat16_7
            * u_xlat16_2.x;\n    u_xlat16_7 = u_xlat0.x;\n    u_xlat16_7 = clamp(u_xlat16_7,
            0.0, 1.0);\n    u_xlat16_12 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_2.x
            = u_xlat16_7 * u_xlat16_2.x;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * _LightColor0.xyz;\n   
            u_xlat16_2.xyw = u_xlat16_2.xyw * _SpecularColor.xyz;\n    u_xlat0.xy
            = vs_TEXCOORD1.zw * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n    u_xlat16_0.xyz
            = texture(_EmissionMap, u_xlat0.xy).xyz;\n    u_xlat16_2.xyw = _EmissionColor.xyz
            * u_xlat16_0.xyz + u_xlat16_2.xyw;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_12 = u_xlat16_12 + (-u_xlat16_3.x);\n   
            u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x;\n    u_xlat16_12 = clamp(u_xlat16_12,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_12 * -2.0 + 3.0;\n    u_xlat16_12
            = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_3.xyz =
            vec3(u_xlat16_12) * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_2.xyw;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3
            u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp
            float u_xlat10_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = (-_SColor.xyz) +
            _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_3.xyz
            + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_1.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _SpecGlossMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump
            vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3
            u_xlat16_4;\nfloat u_xlat5;\nmediump float u_xlat16_5;\nmediump float
            u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump float
            u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nvoid main()\n{\n   
            u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat16_5
            = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat16_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = (-_SColor.xyz) +
            _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_3.xyz
            + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n   
            u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_1.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4
            u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump
            float u_xlat16_8;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nfloat
            u_xlat21;\nlowp float u_xlat10_21;\nmediump float u_xlat16_22;\nvoid
            main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat18 = max(u_xlat16_1.x,
            0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat18);\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_19
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat18 = max(u_xlat16_19,
            0.00100000005);\n    u_xlat16_19 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_19) * u_xlat16_2.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.xyz
            = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ?
            1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;\n   
            u_xlat18 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n    u_xlat18 = clamp(u_xlat18,
            0.0, 1.0);\n    u_xlat10_21 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_19 = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_19
            = u_xlat10_21 * u_xlat16_19;\n    u_xlat21 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = min(u_xlat21, 1.0);\n    u_xlat16_2.x = u_xlat21 * u_xlat21
            + 1.0;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8 = u_xlat18 * u_xlat16_19
            + (-u_xlat18);\n    u_xlat18 = u_xlat16_8 * u_xlat18 + 1.0;\n    u_xlat18
            = u_xlat18 * u_xlat18 + 9.99999975e-05;\n    u_xlat21 = u_xlat16_19 *
            0.318309873;\n    u_xlat18 = u_xlat21 / u_xlat18;\n    u_xlat16_19 =
            u_xlat18 * 0.157079637;\n    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19;\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x;\n    u_xlat16_2.xzw
            = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_19 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_8 = (-u_xlat16_19) + u_xlat16_8;\n    u_xlat16_22 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_19 = (-u_xlat16_19) + u_xlat16_22;\n   
            u_xlat16_19 = float(1.0) / u_xlat16_19;\n    u_xlat16_19 = u_xlat16_19
            * u_xlat16_8;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_8
            = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n    u_xlat16_5.xyz = (-_SColor.xyz)
            + _HColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_19) * u_xlat16_5.xyz
            + _SColor.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xzw * _SpecularColor.xyz + u_xlat16_1.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump
            vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3
            u_xlat16_5;\nmediump float u_xlat16_8;\nfloat u_xlat18;\nmediump float
            u_xlat16_19;\nfloat u_xlat21;\nmediump float u_xlat16_21;\nmediump float
            u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat18);\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_19
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat18 = max(u_xlat16_19,
            0.00100000005);\n    u_xlat16_19 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_19) * u_xlat16_2.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.xyz
            = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ?
            0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat18)
            * u_xlat3.xyz;\n    u_xlat18 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n   
            u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat16_21 = texture(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n    u_xlat16_19 = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_19 = u_xlat16_21 * u_xlat16_19;\n    u_xlat21 = u_xlat16_19
            * u_xlat16_19;\n    u_xlat16_19 = min(u_xlat21, 1.0);\n    u_xlat16_2.x
            = u_xlat21 * u_xlat21 + 1.0;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8 = u_xlat18 *
            u_xlat16_19 + (-u_xlat18);\n    u_xlat18 = u_xlat16_8 * u_xlat18 + 1.0;\n   
            u_xlat18 = u_xlat18 * u_xlat18 + 9.99999975e-05;\n    u_xlat21 = u_xlat16_19
            * 0.318309873;\n    u_xlat18 = u_xlat21 / u_xlat18;\n    u_xlat16_19
            = u_xlat18 * 0.157079637;\n    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19;\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x;\n    u_xlat16_2.xzw
            = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_19 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_8 = (-u_xlat16_19) + u_xlat16_8;\n    u_xlat16_22 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_19 = (-u_xlat16_19) + u_xlat16_22;\n   
            u_xlat16_19 = float(1.0) / u_xlat16_19;\n    u_xlat16_19 = u_xlat16_19
            * u_xlat16_8;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_8
            = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n    u_xlat16_5.xyz = (-_SColor.xyz)
            + _HColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_19) * u_xlat16_5.xyz
            + _SColor.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xzw * _SpecularColor.xyz + u_xlat16_1.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4
            u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump
            float u_xlat16_8;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nfloat
            u_xlat21;\nlowp float u_xlat10_21;\nmediump float u_xlat16_22;\nvoid
            main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat18 = max(u_xlat16_1.x,
            0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat18);\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_19
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat18 = max(u_xlat16_19,
            0.00100000005);\n    u_xlat16_19 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_19) * u_xlat16_2.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.xyz
            = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ?
            1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;\n   
            u_xlat18 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n    u_xlat18 = clamp(u_xlat18,
            0.0, 1.0);\n    u_xlat10_21 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_19 = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_19
            = u_xlat10_21 * u_xlat16_19;\n    u_xlat21 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = min(u_xlat21, 1.0);\n    u_xlat16_2.x = u_xlat21 * u_xlat21
            + 1.0;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8 = u_xlat18 * u_xlat16_19
            + (-u_xlat18);\n    u_xlat18 = u_xlat16_8 * u_xlat18 + 1.0;\n    u_xlat18
            = u_xlat18 * u_xlat18 + 9.99999975e-05;\n    u_xlat21 = u_xlat16_19 *
            0.318309873;\n    u_xlat18 = u_xlat21 / u_xlat18;\n    u_xlat16_19 =
            u_xlat18 * 0.157079637;\n    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19;\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x;\n    u_xlat16_2.xzw
            = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_19 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_8 = (-u_xlat16_19) + u_xlat16_8;\n    u_xlat16_22 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_19 = (-u_xlat16_19) + u_xlat16_22;\n   
            u_xlat16_19 = float(1.0) / u_xlat16_19;\n    u_xlat16_19 = u_xlat16_19
            * u_xlat16_8;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_8
            = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n    u_xlat16_5.xyz = (-_SColor.xyz)
            + _HColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_19) * u_xlat16_5.xyz
            + _SColor.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xzw * _SpecularColor.xyz + u_xlat16_1.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump
            vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3
            u_xlat16_5;\nmediump float u_xlat16_8;\nfloat u_xlat18;\nmediump float
            u_xlat16_19;\nfloat u_xlat21;\nmediump float u_xlat16_21;\nmediump float
            u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat18);\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_19
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat18 = max(u_xlat16_19,
            0.00100000005);\n    u_xlat16_19 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_19) * u_xlat16_2.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.xyz
            = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ?
            0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat18)
            * u_xlat3.xyz;\n    u_xlat18 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n   
            u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat16_21 = texture(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n    u_xlat16_19 = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_19 = u_xlat16_21 * u_xlat16_19;\n    u_xlat21 = u_xlat16_19
            * u_xlat16_19;\n    u_xlat16_19 = min(u_xlat21, 1.0);\n    u_xlat16_2.x
            = u_xlat21 * u_xlat21 + 1.0;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8 = u_xlat18 *
            u_xlat16_19 + (-u_xlat18);\n    u_xlat18 = u_xlat16_8 * u_xlat18 + 1.0;\n   
            u_xlat18 = u_xlat18 * u_xlat18 + 9.99999975e-05;\n    u_xlat21 = u_xlat16_19
            * 0.318309873;\n    u_xlat18 = u_xlat21 / u_xlat18;\n    u_xlat16_19
            = u_xlat18 * 0.157079637;\n    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19;\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x;\n    u_xlat16_2.xzw
            = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_19 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_8 = (-u_xlat16_19) + u_xlat16_8;\n    u_xlat16_22 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_19 = (-u_xlat16_19) + u_xlat16_22;\n   
            u_xlat16_19 = float(1.0) / u_xlat16_19;\n    u_xlat16_19 = u_xlat16_19
            * u_xlat16_8;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_8
            = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n    u_xlat16_5.xyz = (-_SColor.xyz)
            + _HColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_19) * u_xlat16_5.xyz
            + _SColor.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xzw * _SpecularColor.xyz + u_xlat16_1.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4
            u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump
            float u_xlat16_8;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nfloat
            u_xlat21;\nlowp float u_xlat10_21;\nmediump float u_xlat16_22;\nvoid
            main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat18 = max(u_xlat16_1.x,
            0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat18);\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_19
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat18 = max(u_xlat16_19,
            0.00100000005);\n    u_xlat16_19 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_19) * u_xlat16_2.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.xyz
            = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ?
            1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;\n   
            u_xlat18 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n    u_xlat18 = clamp(u_xlat18,
            0.0, 1.0);\n    u_xlat10_21 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_19 = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_19
            = u_xlat10_21 * u_xlat16_19;\n    u_xlat21 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = min(u_xlat21, 1.0);\n    u_xlat16_2.x = u_xlat21 * u_xlat21
            + 1.0;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8 = u_xlat18 * u_xlat16_19
            + (-u_xlat18);\n    u_xlat18 = u_xlat16_8 * u_xlat18 + 1.0;\n    u_xlat18
            = u_xlat18 * u_xlat18 + 9.99999975e-05;\n    u_xlat21 = u_xlat16_19 *
            0.318309873;\n    u_xlat18 = u_xlat21 / u_xlat18;\n    u_xlat16_19 =
            u_xlat18 * 0.157079637;\n    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19;\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x;\n    u_xlat16_2.xzw
            = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlat16_2.xzw = u_xlat16_2.xzw
            * _SpecularColor.xyz;\n    u_xlat16_19 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_8 = (-u_xlat16_19) + u_xlat16_8;\n    u_xlat16_4.x = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_19 = (-u_xlat16_19) + u_xlat16_4.x;\n   
            u_xlat16_19 = float(1.0) / u_xlat16_19;\n    u_xlat16_19 = u_xlat16_19
            * u_xlat16_8;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_8
            = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n    u_xlat16_4.xyz = vec3(u_xlat16_19)
            * _LightColor0.xyz;\n    u_xlat16_8 = (-_RimMin) + _RimMax;\n    u_xlat16_8
            = float(1.0) / u_xlat16_8;\n    u_xlat16_22 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_8 = u_xlat16_8 * u_xlat16_22;\n    u_xlat16_8 = clamp(u_xlat16_8,
            0.0, 1.0);\n    u_xlat16_22 = u_xlat16_8 * -2.0 + 3.0;\n    u_xlat16_8
            = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_22;\n   
            u_xlat16_4.xyz = vec3(u_xlat16_8) * u_xlat16_4.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_4.xyz * _RimColor.xyz + u_xlat16_2.xzw;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_5.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_19) * u_xlat16_5.xyz + _SColor.xyz;\n   
            u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n    u_xlat16_1.xyz
            = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    SV_Target0.xyz
            = u_xlat16_2.xyz + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0) uniform mediump
            sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _SpecGlossMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump
            vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3
            u_xlat16_5;\nmediump float u_xlat16_8;\nfloat u_xlat18;\nmediump float
            u_xlat16_19;\nfloat u_xlat21;\nmediump float u_xlat16_21;\nmediump float
            u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat18);\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_19
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat18 = max(u_xlat16_19,
            0.00100000005);\n    u_xlat16_19 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_19) * u_xlat16_2.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.xyz
            = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ?
            0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat18)
            * u_xlat3.xyz;\n    u_xlat18 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n   
            u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat16_21 = texture(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n    u_xlat16_19 = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_19 = u_xlat16_21 * u_xlat16_19;\n    u_xlat21 = u_xlat16_19
            * u_xlat16_19;\n    u_xlat16_19 = min(u_xlat21, 1.0);\n    u_xlat16_2.x
            = u_xlat21 * u_xlat21 + 1.0;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8 = u_xlat18 *
            u_xlat16_19 + (-u_xlat18);\n    u_xlat18 = u_xlat16_8 * u_xlat18 + 1.0;\n   
            u_xlat18 = u_xlat18 * u_xlat18 + 9.99999975e-05;\n    u_xlat21 = u_xlat16_19
            * 0.318309873;\n    u_xlat18 = u_xlat21 / u_xlat18;\n    u_xlat16_19
            = u_xlat18 * 0.157079637;\n    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19;\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x;\n    u_xlat16_2.xzw
            = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlat16_2.xzw = u_xlat16_2.xzw
            * _SpecularColor.xyz;\n    u_xlat16_19 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_8 = (-u_xlat16_19) + u_xlat16_8;\n    u_xlat16_4.x = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_19 = (-u_xlat16_19) + u_xlat16_4.x;\n   
            u_xlat16_19 = float(1.0) / u_xlat16_19;\n    u_xlat16_19 = u_xlat16_19
            * u_xlat16_8;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_8
            = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n    u_xlat16_4.xyz = vec3(u_xlat16_19)
            * _LightColor0.xyz;\n    u_xlat16_8 = (-_RimMin) + _RimMax;\n    u_xlat16_8
            = float(1.0) / u_xlat16_8;\n    u_xlat16_22 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_8 = u_xlat16_8 * u_xlat16_22;\n    u_xlat16_8 = clamp(u_xlat16_8,
            0.0, 1.0);\n    u_xlat16_22 = u_xlat16_8 * -2.0 + 3.0;\n    u_xlat16_8
            = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_22;\n   
            u_xlat16_4.xyz = vec3(u_xlat16_8) * u_xlat16_4.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_4.xyz * _RimColor.xyz + u_xlat16_2.xzw;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_5.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_19) * u_xlat16_5.xyz + _SColor.xyz;\n   
            u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n    u_xlat16_1.xyz
            = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    SV_Target0.xyz
            = u_xlat16_2.xyz + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4
            u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump
            float u_xlat16_8;\nfloat u_xlat18;\nmediump float u_xlat16_19;\nfloat
            u_xlat21;\nlowp float u_xlat10_21;\nmediump float u_xlat16_22;\nvoid
            main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat18 = max(u_xlat16_1.x,
            0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat18);\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_19
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat18 = max(u_xlat16_19,
            0.00100000005);\n    u_xlat16_19 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_19) * u_xlat16_2.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.xyz
            = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ?
            1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;\n   
            u_xlat18 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n    u_xlat18 = clamp(u_xlat18,
            0.0, 1.0);\n    u_xlat10_21 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_19 = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_19
            = u_xlat10_21 * u_xlat16_19;\n    u_xlat21 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = min(u_xlat21, 1.0);\n    u_xlat16_2.x = u_xlat21 * u_xlat21
            + 1.0;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8 = u_xlat18 * u_xlat16_19
            + (-u_xlat18);\n    u_xlat18 = u_xlat16_8 * u_xlat18 + 1.0;\n    u_xlat18
            = u_xlat18 * u_xlat18 + 9.99999975e-05;\n    u_xlat21 = u_xlat16_19 *
            0.318309873;\n    u_xlat18 = u_xlat21 / u_xlat18;\n    u_xlat16_19 =
            u_xlat18 * 0.157079637;\n    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19;\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x;\n    u_xlat16_2.xzw
            = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlat16_2.xzw = u_xlat16_2.xzw
            * _SpecularColor.xyz;\n    u_xlat16_19 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_8 = (-u_xlat16_19) + u_xlat16_8;\n    u_xlat16_4.x = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_19 = (-u_xlat16_19) + u_xlat16_4.x;\n   
            u_xlat16_19 = float(1.0) / u_xlat16_19;\n    u_xlat16_19 = u_xlat16_19
            * u_xlat16_8;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_8
            = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n    u_xlat16_4.xyz = vec3(u_xlat16_19)
            * _LightColor0.xyz;\n    u_xlat16_8 = (-_RimMin) + _RimMax;\n    u_xlat16_8
            = float(1.0) / u_xlat16_8;\n    u_xlat16_22 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_8 = u_xlat16_8 * u_xlat16_22;\n    u_xlat16_8 = clamp(u_xlat16_8,
            0.0, 1.0);\n    u_xlat16_22 = u_xlat16_8 * -2.0 + 3.0;\n    u_xlat16_8
            = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_22;\n   
            u_xlat16_4.xyz = vec3(u_xlat16_8) * u_xlat16_4.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_4.xyz * _RimColor.xyz + u_xlat16_2.xzw;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_5.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_19) * u_xlat16_5.xyz + _SColor.xyz;\n   
            u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n    u_xlat16_1.xyz
            = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    SV_Target0.xyz
            = u_xlat16_2.xyz + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0) uniform mediump
            sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _SpecGlossMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump
            vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3
            u_xlat16_5;\nmediump float u_xlat16_8;\nfloat u_xlat18;\nmediump float
            u_xlat16_19;\nfloat u_xlat21;\nmediump float u_xlat16_21;\nmediump float
            u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat18);\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_19
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat18 = max(u_xlat16_19,
            0.00100000005);\n    u_xlat16_19 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_19) * u_xlat16_2.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.xyz
            = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ?
            0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat18)
            * u_xlat3.xyz;\n    u_xlat18 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n   
            u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat16_21 = texture(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n    u_xlat16_19 = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_19 = u_xlat16_21 * u_xlat16_19;\n    u_xlat21 = u_xlat16_19
            * u_xlat16_19;\n    u_xlat16_19 = min(u_xlat21, 1.0);\n    u_xlat16_2.x
            = u_xlat21 * u_xlat21 + 1.0;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8 = u_xlat18 *
            u_xlat16_19 + (-u_xlat18);\n    u_xlat18 = u_xlat16_8 * u_xlat18 + 1.0;\n   
            u_xlat18 = u_xlat18 * u_xlat18 + 9.99999975e-05;\n    u_xlat21 = u_xlat16_19
            * 0.318309873;\n    u_xlat18 = u_xlat21 / u_xlat18;\n    u_xlat16_19
            = u_xlat18 * 0.157079637;\n    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19;\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x;\n    u_xlat16_2.xzw
            = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlat16_2.xzw = u_xlat16_2.xzw
            * _SpecularColor.xyz;\n    u_xlat16_19 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_8 = (-u_xlat16_19) + u_xlat16_8;\n    u_xlat16_4.x = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_19 = (-u_xlat16_19) + u_xlat16_4.x;\n   
            u_xlat16_19 = float(1.0) / u_xlat16_19;\n    u_xlat16_19 = u_xlat16_19
            * u_xlat16_8;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_8
            = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n    u_xlat16_4.xyz = vec3(u_xlat16_19)
            * _LightColor0.xyz;\n    u_xlat16_8 = (-_RimMin) + _RimMax;\n    u_xlat16_8
            = float(1.0) / u_xlat16_8;\n    u_xlat16_22 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_8 = u_xlat16_8 * u_xlat16_22;\n    u_xlat16_8 = clamp(u_xlat16_8,
            0.0, 1.0);\n    u_xlat16_22 = u_xlat16_8 * -2.0 + 3.0;\n    u_xlat16_8
            = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_22;\n   
            u_xlat16_4.xyz = vec3(u_xlat16_8) * u_xlat16_4.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_4.xyz * _RimColor.xyz + u_xlat16_2.xzw;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_5.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_19) * u_xlat16_5.xyz + _SColor.xyz;\n   
            u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n    u_xlat16_1.xyz
            = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    SV_Target0.xyz
            = u_xlat16_2.xyz + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform lowp
            sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4
            u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec2 u_xlat1;\nlowp
            vec2 u_xlat10_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nmediump vec3
            u_xlat16_10;\nfloat u_xlat12;\nlowp float u_xlat10_12;\nmediump float
            u_xlat16_14;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nmediump float
            u_xlat16_21;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;\n    u_xlat1.xy
            = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n    u_xlat10_1.xy
            = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy = u_xlat10_1.yx
            * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_14 = dot(u_xlat16_2.xy,
            u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_BumpScale);\n   
            u_xlat16_14 = min(u_xlat16_14, 1.0);\n    u_xlat16_14 = (-u_xlat16_14)
            + 1.0;\n    u_xlat16_14 = sqrt(u_xlat16_14);\n    u_xlat16_3.xyz = u_xlat16_2.yyy
            * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD2.xyz
            + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_14) * u_xlat0.xyz
            + u_xlat16_2.xyw;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_20 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat18 = max(u_xlat16_20,
            0.00100000005);\n    u_xlat16_20 = inversesqrt(u_xlat18);\n    u_xlat16_3.xyz
            = u_xlat0.xyz * vec3(u_xlat16_20);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_4.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_3.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_20 = dot(u_xlat16_4.xyz,
            u_xlat16_4.xyz);\n    u_xlat6 = max(u_xlat16_20, 0.00100000005);\n   
            u_xlat16_20 = inversesqrt(u_xlat6);\n    u_xlat16_4.xyz = vec3(u_xlat16_20)
            * u_xlat16_4.xyz;\n    u_xlat6 = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);\n   
            u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat10_12 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n    u_xlat16_20 = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_20 = u_xlat10_12 * u_xlat16_20;\n    u_xlat12 = u_xlat16_20
            * u_xlat16_20;\n    u_xlat16_20 = min(u_xlat12, 1.0);\n    u_xlat16_21
            = u_xlat12 * u_xlat12 + 1.0;\n    u_xlat16_21 = float(1.0) / u_xlat16_21;\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_4.x = u_xlat6
            * u_xlat16_20 + (-u_xlat6);\n    u_xlat6 = u_xlat16_4.x * u_xlat6 + 1.0;\n   
            u_xlat6 = u_xlat6 * u_xlat6 + 9.99999975e-05;\n    u_xlat12 = u_xlat16_20
            * 0.318309873;\n    u_xlat6 = u_xlat12 / u_xlat6;\n    u_xlat16_20 =
            u_xlat6 * 0.157079637;\n    u_xlat16_20 = u_xlat16_21 * u_xlat16_20;\n   
            u_xlat16_21 = u_xlat0.x;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n   
            u_xlat16_4.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_21;\n    u_xlat16_10.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;\n   
            u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz = (bool(u_xlatb0))
            ? u_xlat16_3.xyz : u_xlat16_2.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_2.x
            = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            u_xlat16_20 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_21
            = (-u_xlat16_20) + u_xlat16_4.x;\n    u_xlat16_4.x = _RampSmoothing *
            0.5 + _RampThreshold;\n    u_xlat16_20 = (-u_xlat16_20) + u_xlat16_4.x;\n   
            u_xlat16_20 = float(1.0) / u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_21;\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n   
            u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;\n    u_xlat16_5.xyz
            = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_20)
            * u_xlat16_5.xyz + _SColor.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz
            * _LightColor0.xyz;\n    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_10.xyz * _SpecularColor.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TANGENT0;\nin highp vec4 in_TEXCOORD0;\nout highp vec3
            vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout
            highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4
            vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump float
            u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            \tmediump float _IndirectIntensity;\nuniform \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _BumpMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _SpecGlossMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool
            u_xlatb0;\nvec2 u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nfloat
            u_xlat6;\nmediump vec3 u_xlat16_10;\nfloat u_xlat12;\nmediump float u_xlat16_12;\nmediump
            float u_xlat16_14;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nmediump
            float u_xlat16_21;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ? 0xffffffffu
            : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat18)
            * u_xlat0.xyz;\n    u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_14
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_14 = min(u_xlat16_14, 1.0);\n    u_xlat16_14
            = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = sqrt(u_xlat16_14);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_14)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_20 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_20, 0.00100000005);\n    u_xlat16_20 = inversesqrt(u_xlat18);\n   
            u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_20);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_4.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_3.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_20 = dot(u_xlat16_4.xyz,
            u_xlat16_4.xyz);\n    u_xlat6 = max(u_xlat16_20, 0.00100000005);\n   
            u_xlat16_20 = inversesqrt(u_xlat6);\n    u_xlat16_4.xyz = vec3(u_xlat16_20)
            * u_xlat16_4.xyz;\n    u_xlat6 = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);\n   
            u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat16_12 = texture(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n    u_xlat16_20 = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_20 = u_xlat16_12 * u_xlat16_20;\n    u_xlat12 = u_xlat16_20
            * u_xlat16_20;\n    u_xlat16_20 = min(u_xlat12, 1.0);\n    u_xlat16_21
            = u_xlat12 * u_xlat12 + 1.0;\n    u_xlat16_21 = float(1.0) / u_xlat16_21;\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_4.x = u_xlat6
            * u_xlat16_20 + (-u_xlat6);\n    u_xlat6 = u_xlat16_4.x * u_xlat6 + 1.0;\n   
            u_xlat6 = u_xlat6 * u_xlat6 + 9.99999975e-05;\n    u_xlat12 = u_xlat16_20
            * 0.318309873;\n    u_xlat6 = u_xlat12 / u_xlat6;\n    u_xlat16_20 =
            u_xlat6 * 0.157079637;\n    u_xlat16_20 = u_xlat16_21 * u_xlat16_20;\n   
            u_xlat16_21 = u_xlat0.x;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n   
            u_xlat16_4.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_21;\n    u_xlat16_10.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;\n   
            u_xlatb0 = 0.0<_SingleIndirectColor;\n    u_xlat0.xyz = (bool(u_xlatb0))
            ? u_xlat16_3.xyz : u_xlat16_2.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_2.x
            = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_3.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * vec3(vec3(_IndirectIntensity, _IndirectIntensity, _IndirectIntensity));\n   
            u_xlat16_20 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_21
            = (-u_xlat16_20) + u_xlat16_4.x;\n    u_xlat16_4.x = _RampSmoothing *
            0.5 + _RampThreshold;\n    u_xlat16_20 = (-u_xlat16_20) + u_xlat16_4.x;\n   
            u_xlat16_20 = float(1.0) / u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_21;\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n   
            u_xlat16_21 = u_xlat16_20 * -2.0 + 3.0;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;\n    u_xlat16_5.xyz
            = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_20)
            * u_xlat16_5.xyz + _SColor.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz
            * _LightColor0.xyz;\n    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_10.xyz * _SpecularColor.xyz
            + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3
            u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp
            float u_xlat10_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = (-_SColor.xyz) +
            _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_3.xyz
            + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_1.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _SpecGlossMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump
            vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3
            u_xlat16_4;\nfloat u_xlat5;\nmediump float u_xlat16_5;\nmediump float
            u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump float
            u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nvoid main()\n{\n   
            u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat16_5
            = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat16_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = (-_SColor.xyz) +
            _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_3.xyz
            + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n   
            u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_1.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3
            u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp
            float u_xlat10_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15
            = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0,
            1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin) + _RimMax;\n    u_xlat16_18
            = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_18 = clamp(u_xlat16_18,
            0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18 * -2.0 + 3.0;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat16_3.xyz
            = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz
            = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_1.xyw;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump
            vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3
            u_xlat16_4;\nfloat u_xlat5;\nmediump float u_xlat16_5;\nmediump float
            u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump float
            u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nmediump float
            u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n   
            u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat2.xyz);\n    u_xlat16_5 = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_1.x = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_1.x
            = u_xlat16_5 * u_xlat16_1.x;\n    u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n   
            u_xlat16_1.x = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5
            + 1.0;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_1.x =
            u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11 = u_xlat15 * u_xlat16_1.x
            + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 * u_xlat15 + 1.0;\n    u_xlat5
            = u_xlat5 * u_xlat5 + 9.99999975e-05;\n    u_xlat10 = u_xlat16_1.x *
            0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n    u_xlat16_1.x = u_xlat5
            * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_6
            = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_11
            = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n   
            u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n   
            u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_11) * _LightColor0.xyz;\n    u_xlat16_18
            = (-_RimMin) + _RimMax;\n    u_xlat16_18 = float(1.0) / u_xlat16_18;\n   
            u_xlat16_4.x = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_18 = u_xlat16_18
            * u_xlat16_4.x;\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n   
            u_xlat16_4.x = u_xlat16_18 * -2.0 + 3.0;\n    u_xlat16_18 = u_xlat16_18
            * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_18) * u_xlat16_3.xyz;\n    u_xlat16_1.xyw = u_xlat16_3.xyz
            * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat16_3.xyz = (-_SColor.xyz)
            + _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_3.xyz
            + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n   
            u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_1.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3
            u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp
            float u_xlat10_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15
            = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0,
            1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin) + _RimMax;\n    u_xlat16_18
            = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_18 = clamp(u_xlat16_18,
            0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18 * -2.0 + 3.0;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_3.xyz * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat16_3.xyz
            = (-_SColor.xyz) + _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * u_xlat16_3.xyz + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz
            = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_1.xyw;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump
            vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3
            u_xlat16_4;\nfloat u_xlat5;\nmediump float u_xlat16_5;\nmediump float
            u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump float
            u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nmediump float
            u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n   
            u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat2.xyz);\n    u_xlat16_5 = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_1.x = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_1.x
            = u_xlat16_5 * u_xlat16_1.x;\n    u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n   
            u_xlat16_1.x = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5
            + 1.0;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_1.x =
            u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11 = u_xlat15 * u_xlat16_1.x
            + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 * u_xlat15 + 1.0;\n    u_xlat5
            = u_xlat5 * u_xlat5 + 9.99999975e-05;\n    u_xlat10 = u_xlat16_1.x *
            0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n    u_xlat16_1.x = u_xlat5
            * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_6
            = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_11
            = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n   
            u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n   
            u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_11) * _LightColor0.xyz;\n    u_xlat16_18
            = (-_RimMin) + _RimMax;\n    u_xlat16_18 = float(1.0) / u_xlat16_18;\n   
            u_xlat16_4.x = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_18 = u_xlat16_18
            * u_xlat16_4.x;\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n   
            u_xlat16_4.x = u_xlat16_18 * -2.0 + 3.0;\n    u_xlat16_18 = u_xlat16_18
            * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_18) * u_xlat16_3.xyz;\n    u_xlat16_1.xyw = u_xlat16_3.xyz
            * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat16_3.xyz = (-_SColor.xyz)
            + _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_3.xyz
            + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n   
            u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_1.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tvec4 _BumpMap_ST;\nuniform \tmediump float _BumpScale;\nuniform \tmediump
            vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump
            vec4 _HColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform lowp sampler2D _BaseMap;\nuniform lowp
            sampler2D _BumpMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying highp
            vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define
            SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3
            u_xlat1;\nlowp vec2 u_xlat10_1;\nmediump vec4 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nmediump float
            u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nlowp float u_xlat10_10;\nmediump
            float u_xlat16_12;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat1.xy
            = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n    u_xlat10_1.xy
            = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy = u_xlat10_1.yx
            * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12 = dot(u_xlat16_2.xy,
            u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_BumpScale);\n   
            u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12 = (-u_xlat16_12)
            + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz = u_xlat16_2.yyy
            * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD2.xyz
            + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12) * u_xlat0.xyz
            + u_xlat16_2.xyw;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_17,
            0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n    u_xlat15
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat15
            = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17) + u_xlat1.xyz;\n   
            u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n    u_xlat16_17 = dot(u_xlat16_3.xyz,
            u_xlat16_3.xyz);\n    u_xlat5 = max(u_xlat16_17, 0.00100000005);\n   
            u_xlat16_17 = inversesqrt(u_xlat5);\n    u_xlat16_3.xyz = vec3(u_xlat16_17)
            * u_xlat16_3.xyz;\n    u_xlat5 = dot(u_xlat16_2.xyz, u_xlat16_3.xyz);\n   
            u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n    u_xlat10_10 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n    u_xlat16_2.x = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_2.x = u_xlat10_10 * u_xlat16_2.x;\n    u_xlat10 = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = min(u_xlat10, 1.0);\n    u_xlat16_7
            = u_xlat10 * u_xlat10 + 1.0;\n    u_xlat16_7 = float(1.0) / u_xlat16_7;\n   
            u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_12 = u_xlat5
            * u_xlat16_2.x + (-u_xlat5);\n    u_xlat5 = u_xlat16_12 * u_xlat5 + 1.0;\n   
            u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n    u_xlat10 = u_xlat16_2.x
            * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n    u_xlat16_2.x =
            u_xlat5 * 0.157079637;\n    u_xlat16_2.x = u_xlat16_7 * u_xlat16_2.x;\n   
            u_xlat16_7 = u_xlat0.x;\n    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);\n   
            u_xlat16_12 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_2.x = u_xlat16_7 *
            u_xlat16_2.x;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * _LightColor0.xyz;\n   
            u_xlat16_2.xyw = u_xlat16_2.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_12 = u_xlat16_12
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x;\n    u_xlat16_12
            = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_12 * -2.0
            + 3.0;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12
            = u_xlat16_12 * u_xlat16_3.x;\n    u_xlat16_3.xyz = (-_SColor.xyz) +
            _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_3.xyz
            + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_2.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TANGENT0;\nin highp vec4 in_TEXCOORD0;\nout highp vec3
            vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout
            highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4
            vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump float
            u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tvec4 _BumpMap_ST;\nuniform \tmediump float _BumpScale;\nuniform \tmediump
            vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump
            vec4 _HColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1)
            uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(2) uniform mediump
            sampler2D _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4
            vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump
            vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat
            u_xlat5;\nmediump float u_xlat16_7;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_10;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy
            + _BumpMap_ST.zw;\n    u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n   
            u_xlat16_2.xy = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n   
            u_xlat16_12 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy =
            u_xlat16_2.xy * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12,
            1.0);\n    u_xlat16_12 = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n   
            u_xlat16_3.xyz = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw
            = u_xlat16_2.xxx * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz
            = vec3(u_xlat16_12) * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_17, 0.00100000005);\n   
            u_xlat16_17 = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_3.xyz
            = u_xlat0.xyz * vec3(u_xlat16_17) + u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat16_2.xyz,
            u_xlat1.xyz);\n    u_xlat16_17 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n   
            u_xlat5 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat5);\n   
            u_xlat16_3.xyz = vec3(u_xlat16_17) * u_xlat16_3.xyz;\n    u_xlat5 = dot(u_xlat16_2.xyz,
            u_xlat16_3.xyz);\n    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n    u_xlat16_10
            = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x;\n   
            u_xlat10 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = min(u_xlat10,
            1.0);\n    u_xlat16_7 = u_xlat10 * u_xlat10 + 1.0;\n    u_xlat16_7 =
            float(1.0) / u_xlat16_7;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n   
            u_xlat16_12 = u_xlat5 * u_xlat16_2.x + (-u_xlat5);\n    u_xlat5 = u_xlat16_12
            * u_xlat5 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_2.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_2.x = u_xlat5 * 0.157079637;\n    u_xlat16_2.x = u_xlat16_7
            * u_xlat16_2.x;\n    u_xlat16_7 = u_xlat0.x;\n    u_xlat16_7 = clamp(u_xlat16_7,
            0.0, 1.0);\n    u_xlat16_12 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_2.x
            = u_xlat16_7 * u_xlat16_2.x;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * _LightColor0.xyz;\n   
            u_xlat16_2.xyw = u_xlat16_2.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_12 = u_xlat16_12
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x;\n    u_xlat16_12
            = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_12 * -2.0
            + 3.0;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12
            = u_xlat16_12 * u_xlat16_3.x;\n    u_xlat16_3.xyz = (-_SColor.xyz) +
            _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_3.xyz
            + _SColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n   
            u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_2.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump float _RampBands;\nuniform \tmediump float _RampBandsSmoothing;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3
            u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp
            float u_xlat10_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nmediump float u_xlat16_13;\nfloat
            u_xlat15;\nmediump float u_xlat16_16;\nmediump float u_xlat16_18;\nvoid
            main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x,
            0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat15
            = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16
            = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16,
            0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz
            = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * _RampBands;\n   
            u_xlat16_3.x = floor(u_xlat16_11);\n    u_xlat16_11 = fract(u_xlat16_11);\n   
            u_xlat16_8 = (-_RampBandsSmoothing) * 0.5 + 0.5;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_8);\n    u_xlat16_13 = _RampBandsSmoothing * 0.5 + 0.5;\n   
            u_xlat16_8 = (-u_xlat16_8) + u_xlat16_13;\n    u_xlat16_8 = float(1.0)
            / u_xlat16_8;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_8;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_8 * u_xlat16_11 + u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11
            / _RampBands;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin)
            + _RimMax;\n    u_xlat16_18 = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x
            = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18
            * -2.0 + 3.0;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_18)
            * u_xlat16_3.xyz;\n    u_xlat16_1.xyw = u_xlat16_3.xyz * _RimColor.xyz
            + u_xlat16_1.xyw;\n    u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_3.xyz + _SColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_1.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RAMP_BANDS
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump float _RampBands;\nuniform \tmediump float _RampBandsSmoothing;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump
            vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3
            u_xlat16_4;\nfloat u_xlat5;\nmediump float u_xlat16_5;\nmediump float
            u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump float
            u_xlat16_11;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat16_5
            = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat16_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * _RampBands;\n   
            u_xlat16_3.x = floor(u_xlat16_11);\n    u_xlat16_11 = fract(u_xlat16_11);\n   
            u_xlat16_8 = (-_RampBandsSmoothing) * 0.5 + 0.5;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_8);\n    u_xlat16_13 = _RampBandsSmoothing * 0.5 + 0.5;\n   
            u_xlat16_8 = (-u_xlat16_8) + u_xlat16_13;\n    u_xlat16_8 = float(1.0)
            / u_xlat16_8;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_8;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_8 * u_xlat16_11 + u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11
            / _RampBands;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin)
            + _RimMax;\n    u_xlat16_18 = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x
            = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18
            * -2.0 + 3.0;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_18)
            * u_xlat16_3.xyz;\n    u_xlat16_1.xyw = u_xlat16_3.xyz * _RimColor.xyz
            + u_xlat16_1.xyw;\n    u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_3.xyz + _SColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_1.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RAMP_BANDS
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump float _RampBands;\nuniform
            \tmediump float _RampBandsSmoothing;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4
            u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump
            float u_xlat16_8;\nmediump float u_xlat16_10;\nfloat u_xlat18;\nmediump
            float u_xlat16_19;\nfloat u_xlat21;\nlowp float u_xlat10_21;\nmediump
            float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat18);\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_19
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat18 = max(u_xlat16_19,
            0.00100000005);\n    u_xlat16_19 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_19) * u_xlat16_2.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.xyz
            = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ?
            1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;\n   
            u_xlat18 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n    u_xlat18 = clamp(u_xlat18,
            0.0, 1.0);\n    u_xlat10_21 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_19 = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_19
            = u_xlat10_21 * u_xlat16_19;\n    u_xlat21 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = min(u_xlat21, 1.0);\n    u_xlat16_2.x = u_xlat21 * u_xlat21
            + 1.0;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8 = u_xlat18 * u_xlat16_19
            + (-u_xlat18);\n    u_xlat18 = u_xlat16_8 * u_xlat18 + 1.0;\n    u_xlat18
            = u_xlat18 * u_xlat18 + 9.99999975e-05;\n    u_xlat21 = u_xlat16_19 *
            0.318309873;\n    u_xlat18 = u_xlat21 / u_xlat18;\n    u_xlat16_19 =
            u_xlat18 * 0.157079637;\n    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19;\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x;\n    u_xlat16_2.xzw
            = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlat16_2.xzw = u_xlat16_2.xzw
            * _SpecularColor.xyz;\n    u_xlat16_19 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_8 = (-u_xlat16_19) + u_xlat16_8;\n    u_xlat16_4.x = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_19 = (-u_xlat16_19) + u_xlat16_4.x;\n   
            u_xlat16_19 = float(1.0) / u_xlat16_19;\n    u_xlat16_19 = u_xlat16_19
            * u_xlat16_8;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_8
            = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n    u_xlat16_19 = u_xlat16_19
            * _RampBands;\n    u_xlat16_8 = floor(u_xlat16_19);\n    u_xlat16_19
            = fract(u_xlat16_19);\n    u_xlat16_4.x = (-_RampBandsSmoothing) * 0.5
            + 0.5;\n    u_xlat16_19 = u_xlat16_19 + (-u_xlat16_4.x);\n    u_xlat16_10
            = _RampBandsSmoothing * 0.5 + 0.5;\n    u_xlat16_4.x = (-u_xlat16_4.x)
            + u_xlat16_10;\n    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_4.x;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0,
            1.0);\n    u_xlat16_4.x = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_19 = u_xlat16_4.x * u_xlat16_19
            + u_xlat16_8;\n    u_xlat16_19 = u_xlat16_19 / _RampBands;\n    u_xlat16_19
            = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_4.xyz = vec3(u_xlat16_19)
            * _LightColor0.xyz;\n    u_xlat16_8 = (-_RimMin) + _RimMax;\n    u_xlat16_8
            = float(1.0) / u_xlat16_8;\n    u_xlat16_22 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_8 = u_xlat16_8 * u_xlat16_22;\n    u_xlat16_8 = clamp(u_xlat16_8,
            0.0, 1.0);\n    u_xlat16_22 = u_xlat16_8 * -2.0 + 3.0;\n    u_xlat16_8
            = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_22;\n   
            u_xlat16_4.xyz = vec3(u_xlat16_8) * u_xlat16_4.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_4.xyz * _RimColor.xyz + u_xlat16_2.xzw;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_5.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_19) * u_xlat16_5.xyz + _SColor.xyz;\n   
            u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n    u_xlat16_1.xyz
            = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    SV_Target0.xyz
            = u_xlat16_2.xyz + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump float _RampBands;\nuniform
            \tmediump float _RampBandsSmoothing;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0) uniform mediump
            sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _SpecGlossMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump
            vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3
            u_xlat16_5;\nmediump float u_xlat16_8;\nmediump float u_xlat16_10;\nfloat
            u_xlat18;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nmediump float
            u_xlat16_21;\nmediump float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat18 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat18);\n    u_xlat16_1.xyz = u_xlat0.xyz
            * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz
            * u_xlat0.xxx + u_xlat16_1.xyz;\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat16_19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat18 = max(u_xlat16_19,
            0.00100000005);\n    u_xlat16_19 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_19) * u_xlat16_2.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.xyz
            = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ?
            0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat18)
            * u_xlat3.xyz;\n    u_xlat18 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n   
            u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat16_21 = texture(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n    u_xlat16_19 = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_19 = u_xlat16_21 * u_xlat16_19;\n    u_xlat21 = u_xlat16_19
            * u_xlat16_19;\n    u_xlat16_19 = min(u_xlat21, 1.0);\n    u_xlat16_2.x
            = u_xlat21 * u_xlat21 + 1.0;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8 = u_xlat18 *
            u_xlat16_19 + (-u_xlat18);\n    u_xlat18 = u_xlat16_8 * u_xlat18 + 1.0;\n   
            u_xlat18 = u_xlat18 * u_xlat18 + 9.99999975e-05;\n    u_xlat21 = u_xlat16_19
            * 0.318309873;\n    u_xlat18 = u_xlat21 / u_xlat18;\n    u_xlat16_19
            = u_xlat18 * 0.157079637;\n    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19;\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x;\n    u_xlat16_2.xzw
            = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlat16_2.xzw = u_xlat16_2.xzw
            * _SpecularColor.xyz;\n    u_xlat16_19 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_8 = (-u_xlat16_19) + u_xlat16_8;\n    u_xlat16_4.x = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_19 = (-u_xlat16_19) + u_xlat16_4.x;\n   
            u_xlat16_19 = float(1.0) / u_xlat16_19;\n    u_xlat16_19 = u_xlat16_19
            * u_xlat16_8;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_8
            = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n    u_xlat16_19 = u_xlat16_19
            * _RampBands;\n    u_xlat16_8 = floor(u_xlat16_19);\n    u_xlat16_19
            = fract(u_xlat16_19);\n    u_xlat16_4.x = (-_RampBandsSmoothing) * 0.5
            + 0.5;\n    u_xlat16_19 = u_xlat16_19 + (-u_xlat16_4.x);\n    u_xlat16_10
            = _RampBandsSmoothing * 0.5 + 0.5;\n    u_xlat16_4.x = (-u_xlat16_4.x)
            + u_xlat16_10;\n    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_4.x;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0,
            1.0);\n    u_xlat16_4.x = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_19 = u_xlat16_4.x * u_xlat16_19
            + u_xlat16_8;\n    u_xlat16_19 = u_xlat16_19 / _RampBands;\n    u_xlat16_19
            = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_4.xyz = vec3(u_xlat16_19)
            * _LightColor0.xyz;\n    u_xlat16_8 = (-_RimMin) + _RimMax;\n    u_xlat16_8
            = float(1.0) / u_xlat16_8;\n    u_xlat16_22 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_8 = u_xlat16_8 * u_xlat16_22;\n    u_xlat16_8 = clamp(u_xlat16_8,
            0.0, 1.0);\n    u_xlat16_22 = u_xlat16_8 * -2.0 + 3.0;\n    u_xlat16_8
            = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_22;\n   
            u_xlat16_4.xyz = vec3(u_xlat16_8) * u_xlat16_4.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_4.xyz * _RimColor.xyz + u_xlat16_2.xzw;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_5.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_19) * u_xlat16_5.xyz + _SColor.xyz;\n   
            u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n    u_xlat16_1.xyz
            = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    SV_Target0.xyz
            = u_xlat16_2.xyz + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump float _RampBands;\nuniform
            \tmediump float _RampBandsSmoothing;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4
            u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump
            float u_xlat16_8;\nmediump float u_xlat16_10;\nfloat u_xlat18;\nmediump
            float u_xlat16_19;\nfloat u_xlat21;\nlowp float u_xlat10_21;\nmediump
            float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat18);\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_1.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat16_19
            = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat18 = max(u_xlat16_19,
            0.00100000005);\n    u_xlat16_19 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_19) * u_xlat16_2.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.xyz
            = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ?
            1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;\n   
            u_xlat18 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n    u_xlat18 = clamp(u_xlat18,
            0.0, 1.0);\n    u_xlat10_21 = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_19 = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_19
            = u_xlat10_21 * u_xlat16_19;\n    u_xlat21 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = min(u_xlat21, 1.0);\n    u_xlat16_2.x = u_xlat21 * u_xlat21
            + 1.0;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8 = u_xlat18 * u_xlat16_19
            + (-u_xlat18);\n    u_xlat18 = u_xlat16_8 * u_xlat18 + 1.0;\n    u_xlat18
            = u_xlat18 * u_xlat18 + 9.99999975e-05;\n    u_xlat21 = u_xlat16_19 *
            0.318309873;\n    u_xlat18 = u_xlat21 / u_xlat18;\n    u_xlat16_19 =
            u_xlat18 * 0.157079637;\n    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19;\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x;\n    u_xlat16_2.xzw
            = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlat16_2.xzw = u_xlat16_2.xzw
            * _SpecularColor.xyz;\n    u_xlat16_19 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_8 = (-u_xlat16_19) + u_xlat16_8;\n    u_xlat16_4.x = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_19 = (-u_xlat16_19) + u_xlat16_4.x;\n   
            u_xlat16_19 = float(1.0) / u_xlat16_19;\n    u_xlat16_19 = u_xlat16_19
            * u_xlat16_8;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_8
            = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n    u_xlat16_19 = u_xlat16_19
            * _RampBands;\n    u_xlat16_8 = floor(u_xlat16_19);\n    u_xlat16_19
            = fract(u_xlat16_19);\n    u_xlat16_4.x = (-_RampBandsSmoothing) * 0.5
            + 0.5;\n    u_xlat16_19 = u_xlat16_19 + (-u_xlat16_4.x);\n    u_xlat16_10
            = _RampBandsSmoothing * 0.5 + 0.5;\n    u_xlat16_4.x = (-u_xlat16_4.x)
            + u_xlat16_10;\n    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_4.x;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0,
            1.0);\n    u_xlat16_4.x = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_19 = u_xlat16_4.x * u_xlat16_19
            + u_xlat16_8;\n    u_xlat16_19 = u_xlat16_19 / _RampBands;\n    u_xlat16_19
            = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_4.xyz = vec3(u_xlat16_19)
            * _LightColor0.xyz;\n    u_xlat16_8 = (-_RimMin) + _RimMax;\n    u_xlat16_8
            = float(1.0) / u_xlat16_8;\n    u_xlat16_22 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_8 = u_xlat16_8 * u_xlat16_22;\n    u_xlat16_8 = clamp(u_xlat16_8,
            0.0, 1.0);\n    u_xlat16_22 = u_xlat16_8 * -2.0 + 3.0;\n    u_xlat16_8
            = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_22;\n   
            u_xlat16_4.xyz = vec3(u_xlat16_8) * u_xlat16_4.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_4.xyz * _RimColor.xyz + u_xlat16_2.xzw;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_5.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_19) * u_xlat16_5.xyz + _SColor.xyz;\n   
            u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n    u_xlat16_1.xyz
            = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    SV_Target0.xyz
            = u_xlat16_2.xyz + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump float _RampBands;\nuniform
            \tmediump float _RampBandsSmoothing;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0) uniform mediump
            sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _SpecGlossMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump
            vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3
            u_xlat16_5;\nmediump float u_xlat16_8;\nmediump float u_xlat16_10;\nfloat
            u_xlat18;\nmediump float u_xlat16_19;\nfloat u_xlat21;\nmediump float
            u_xlat16_21;\nmediump float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat18 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat18);\n    u_xlat16_1.xyz = u_xlat0.xyz
            * u_xlat16_1.xxx;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat16_2.xyz = _WorldSpaceLightPos0.xyz
            * u_xlat0.xxx + u_xlat16_1.xyz;\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat16_19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat18 = max(u_xlat16_19,
            0.00100000005);\n    u_xlat16_19 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_19) * u_xlat16_2.xyz;\n    u_xlat18 = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat3.xyz
            = vec3(u_xlat18) * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ?
            0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat3.xyz = vec3(u_xlat18)
            * u_xlat3.xyz;\n    u_xlat18 = dot(u_xlat3.xyz, u_xlat16_2.xyz);\n   
            u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat16_21 = texture(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n    u_xlat16_19 = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_19 = u_xlat16_21 * u_xlat16_19;\n    u_xlat21 = u_xlat16_19
            * u_xlat16_19;\n    u_xlat16_19 = min(u_xlat21, 1.0);\n    u_xlat16_2.x
            = u_xlat21 * u_xlat21 + 1.0;\n    u_xlat16_2.x = float(1.0) / u_xlat16_2.x;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_8 = u_xlat18 *
            u_xlat16_19 + (-u_xlat18);\n    u_xlat18 = u_xlat16_8 * u_xlat18 + 1.0;\n   
            u_xlat18 = u_xlat18 * u_xlat18 + 9.99999975e-05;\n    u_xlat21 = u_xlat16_19
            * 0.318309873;\n    u_xlat18 = u_xlat21 / u_xlat18;\n    u_xlat16_19
            = u_xlat18 * 0.157079637;\n    u_xlat16_19 = u_xlat16_2.x * u_xlat16_19;\n   
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x;\n   
            u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_2.x;\n    u_xlat16_2.xzw
            = vec3(u_xlat16_19) * _LightColor0.xyz;\n    u_xlat16_2.xzw = u_xlat16_2.xzw
            * _SpecularColor.xyz;\n    u_xlat16_19 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_8 = (-u_xlat16_19) + u_xlat16_8;\n    u_xlat16_4.x = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_19 = (-u_xlat16_19) + u_xlat16_4.x;\n   
            u_xlat16_19 = float(1.0) / u_xlat16_19;\n    u_xlat16_19 = u_xlat16_19
            * u_xlat16_8;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_8
            = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n   
            u_xlat16_19 = u_xlat16_19 * u_xlat16_8;\n    u_xlat16_19 = u_xlat16_19
            * _RampBands;\n    u_xlat16_8 = floor(u_xlat16_19);\n    u_xlat16_19
            = fract(u_xlat16_19);\n    u_xlat16_4.x = (-_RampBandsSmoothing) * 0.5
            + 0.5;\n    u_xlat16_19 = u_xlat16_19 + (-u_xlat16_4.x);\n    u_xlat16_10
            = _RampBandsSmoothing * 0.5 + 0.5;\n    u_xlat16_4.x = (-u_xlat16_4.x)
            + u_xlat16_10;\n    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_4.x;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0,
            1.0);\n    u_xlat16_4.x = u_xlat16_19 * -2.0 + 3.0;\n    u_xlat16_19
            = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_19 = u_xlat16_4.x * u_xlat16_19
            + u_xlat16_8;\n    u_xlat16_19 = u_xlat16_19 / _RampBands;\n    u_xlat16_19
            = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_4.xyz = vec3(u_xlat16_19)
            * _LightColor0.xyz;\n    u_xlat16_8 = (-_RimMin) + _RimMax;\n    u_xlat16_8
            = float(1.0) / u_xlat16_8;\n    u_xlat16_22 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_8 = u_xlat16_8 * u_xlat16_22;\n    u_xlat16_8 = clamp(u_xlat16_8,
            0.0, 1.0);\n    u_xlat16_22 = u_xlat16_8 * -2.0 + 3.0;\n    u_xlat16_8
            = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_22;\n   
            u_xlat16_4.xyz = vec3(u_xlat16_8) * u_xlat16_4.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_4.xyz * _RimColor.xyz + u_xlat16_2.xzw;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_1.xyz : u_xlat3.xyz;\n    u_xlat0.w
            = 1.0;\n    u_xlat16_1.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_1.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_1.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_5.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_19) * u_xlat16_5.xyz + _SColor.xyz;\n   
            u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n    u_xlat16_1.xyz
            = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    SV_Target0.xyz
            = u_xlat16_2.xyz + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TANGENT0;\nattribute highp
            vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat12);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) *
            u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    u_xlat3.xyz =
            u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy
            + (-u_xlat3.xyz);\n    u_xlat16_2.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump
            vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump float _RampBands;\nuniform
            \tmediump float _RampBandsSmoothing;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _BumpMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nbool u_xlatb0;\nvec2 u_xlat1;\nlowp vec2 u_xlat10_1;\nmediump
            vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump
            vec3 u_xlat16_5;\nfloat u_xlat6;\nmediump vec3 u_xlat16_10;\nfloat u_xlat12;\nlowp
            float u_xlat10_12;\nmediump float u_xlat16_14;\nfloat u_xlat18;\nmediump
            float u_xlat16_20;\nmediump float u_xlat16_21;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat10_1.xy = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat10_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_14
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_14 = min(u_xlat16_14, 1.0);\n    u_xlat16_14
            = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = sqrt(u_xlat16_14);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_14)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_20 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_20, 0.00100000005);\n    u_xlat16_20 = inversesqrt(u_xlat18);\n   
            u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_20);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_4.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_3.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_20 = dot(u_xlat16_4.xyz,
            u_xlat16_4.xyz);\n    u_xlat6 = max(u_xlat16_20, 0.00100000005);\n   
            u_xlat16_20 = inversesqrt(u_xlat6);\n    u_xlat16_4.xyz = vec3(u_xlat16_20)
            * u_xlat16_4.xyz;\n    u_xlat6 = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);\n   
            u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat10_12 = texture2D(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n    u_xlat16_20 = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_20 = u_xlat10_12 * u_xlat16_20;\n    u_xlat12 = u_xlat16_20
            * u_xlat16_20;\n    u_xlat16_20 = min(u_xlat12, 1.0);\n    u_xlat16_21
            = u_xlat12 * u_xlat12 + 1.0;\n    u_xlat16_21 = float(1.0) / u_xlat16_21;\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_4.x = u_xlat6
            * u_xlat16_20 + (-u_xlat6);\n    u_xlat6 = u_xlat16_4.x * u_xlat6 + 1.0;\n   
            u_xlat6 = u_xlat6 * u_xlat6 + 9.99999975e-05;\n    u_xlat12 = u_xlat16_20
            * 0.318309873;\n    u_xlat6 = u_xlat12 / u_xlat6;\n    u_xlat16_20 =
            u_xlat6 * 0.157079637;\n    u_xlat16_20 = u_xlat16_21 * u_xlat16_20;\n   
            u_xlat16_21 = u_xlat0.x;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n   
            u_xlat16_4.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_21;\n    u_xlat16_10.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;\n   
            u_xlat16_10.xyz = u_xlat16_10.xyz * _SpecularColor.xyz;\n    u_xlat16_20
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_21 = (-u_xlat16_20)
            + u_xlat16_4.x;\n    u_xlat16_4.x = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_20 = (-u_xlat16_20) + u_xlat16_4.x;\n    u_xlat16_20 = float(1.0)
            / u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;\n    u_xlat16_20
            = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_21 = u_xlat16_20 * -2.0
            + 3.0;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20
            = u_xlat16_20 * u_xlat16_21;\n    u_xlat16_20 = u_xlat16_20 * _RampBands;\n   
            u_xlat16_21 = floor(u_xlat16_20);\n    u_xlat16_20 = fract(u_xlat16_20);\n   
            u_xlat16_4.x = (-_RampBandsSmoothing) * 0.5 + 0.5;\n    u_xlat16_20 =
            u_xlat16_20 + (-u_xlat16_4.x);\n    u_xlat16_5.x = _RampBandsSmoothing
            * 0.5 + 0.5;\n    u_xlat16_4.x = (-u_xlat16_4.x) + u_xlat16_5.x;\n   
            u_xlat16_4.x = float(1.0) / u_xlat16_4.x;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_4.x;\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n   
            u_xlat16_4.x = u_xlat16_20 * -2.0 + 3.0;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_4.x * u_xlat16_20 + u_xlat16_21;\n   
            u_xlat16_20 = u_xlat16_20 / _RampBands;\n    u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n    u_xlat16_5.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;\n   
            u_xlat16_21 = (-_RimMin) + _RimMax;\n    u_xlat16_21 = float(1.0) / u_xlat16_21;\n   
            u_xlat16_4.x = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_21 = u_xlat16_21
            * u_xlat16_4.x;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n   
            u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;\n    u_xlat16_21 = u_xlat16_21
            * u_xlat16_21;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;\n    u_xlat16_5.xyz
            = vec3(u_xlat16_21) * u_xlat16_5.xyz;\n    u_xlat16_4.xyz = u_xlat16_5.xyz
            * _RimColor.xyz + u_xlat16_10.xyz;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat16_2.xyz;\n   
            u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_5.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz + _SColor.xyz;\n   
            u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz
            = u_xlat16_4.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat12);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) *
            u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    u_xlat3.xyz =
            u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy
            + (-u_xlat3.xyz);\n    u_xlat16_2.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump float _RampBands;\nuniform
            \tmediump float _RampBandsSmoothing;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _SColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform \tmediump float _IndirectIntensity;\nuniform
            \tmediump float _SingleIndirectColor;\nUNITY_LOCATION(0) uniform mediump
            sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(2)
            uniform mediump sampler2D _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin
            highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4
            vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nlayout(location = 0) out
            mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool
            u_xlatb0;\nvec2 u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nfloat
            u_xlat6;\nmediump vec3 u_xlat16_10;\nfloat u_xlat12;\nmediump float u_xlat16_12;\nmediump
            float u_xlat16_14;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nmediump
            float u_xlat16_21;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat18 = ((gl_FrontFacing ? 0xffffffffu
            : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat18)
            * u_xlat0.xyz;\n    u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_14
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_14 = min(u_xlat16_14, 1.0);\n    u_xlat16_14
            = (-u_xlat16_14) + 1.0;\n    u_xlat16_14 = sqrt(u_xlat16_14);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_14)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_20 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat18 = max(u_xlat16_20, 0.00100000005);\n    u_xlat16_20 = inversesqrt(u_xlat18);\n   
            u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_20);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat16_4.xyz = _WorldSpaceLightPos0.xyz * u_xlat0.xxx + u_xlat16_3.xyz;\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_20 = dot(u_xlat16_4.xyz,
            u_xlat16_4.xyz);\n    u_xlat6 = max(u_xlat16_20, 0.00100000005);\n   
            u_xlat16_20 = inversesqrt(u_xlat6);\n    u_xlat16_4.xyz = vec3(u_xlat16_20)
            * u_xlat16_4.xyz;\n    u_xlat6 = dot(u_xlat16_2.xyz, u_xlat16_4.xyz);\n   
            u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat16_12 = texture(_SpecGlossMap,
            vs_TEXCOORD1.xy).w;\n    u_xlat16_20 = max(_SpecularRoughness, 9.99999975e-06);\n   
            u_xlat16_20 = u_xlat16_12 * u_xlat16_20;\n    u_xlat12 = u_xlat16_20
            * u_xlat16_20;\n    u_xlat16_20 = min(u_xlat12, 1.0);\n    u_xlat16_21
            = u_xlat12 * u_xlat12 + 1.0;\n    u_xlat16_21 = float(1.0) / u_xlat16_21;\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_4.x = u_xlat6
            * u_xlat16_20 + (-u_xlat6);\n    u_xlat6 = u_xlat16_4.x * u_xlat6 + 1.0;\n   
            u_xlat6 = u_xlat6 * u_xlat6 + 9.99999975e-05;\n    u_xlat12 = u_xlat16_20
            * 0.318309873;\n    u_xlat6 = u_xlat12 / u_xlat6;\n    u_xlat16_20 =
            u_xlat6 * 0.157079637;\n    u_xlat16_20 = u_xlat16_21 * u_xlat16_20;\n   
            u_xlat16_21 = u_xlat0.x;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n   
            u_xlat16_4.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_21;\n    u_xlat16_10.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;\n   
            u_xlat16_10.xyz = u_xlat16_10.xyz * _SpecularColor.xyz;\n    u_xlat16_20
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_21 = (-u_xlat16_20)
            + u_xlat16_4.x;\n    u_xlat16_4.x = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_20 = (-u_xlat16_20) + u_xlat16_4.x;\n    u_xlat16_20 = float(1.0)
            / u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_21;\n    u_xlat16_20
            = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_21 = u_xlat16_20 * -2.0
            + 3.0;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20
            = u_xlat16_20 * u_xlat16_21;\n    u_xlat16_20 = u_xlat16_20 * _RampBands;\n   
            u_xlat16_21 = floor(u_xlat16_20);\n    u_xlat16_20 = fract(u_xlat16_20);\n   
            u_xlat16_4.x = (-_RampBandsSmoothing) * 0.5 + 0.5;\n    u_xlat16_20 =
            u_xlat16_20 + (-u_xlat16_4.x);\n    u_xlat16_5.x = _RampBandsSmoothing
            * 0.5 + 0.5;\n    u_xlat16_4.x = (-u_xlat16_4.x) + u_xlat16_5.x;\n   
            u_xlat16_4.x = float(1.0) / u_xlat16_4.x;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_4.x;\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n   
            u_xlat16_4.x = u_xlat16_20 * -2.0 + 3.0;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_4.x * u_xlat16_20 + u_xlat16_21;\n   
            u_xlat16_20 = u_xlat16_20 / _RampBands;\n    u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n    u_xlat16_5.xyz = vec3(u_xlat16_20) * _LightColor0.xyz;\n   
            u_xlat16_21 = (-_RimMin) + _RimMax;\n    u_xlat16_21 = float(1.0) / u_xlat16_21;\n   
            u_xlat16_4.x = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_21 = u_xlat16_21
            * u_xlat16_4.x;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n   
            u_xlat16_4.x = u_xlat16_21 * -2.0 + 3.0;\n    u_xlat16_21 = u_xlat16_21
            * u_xlat16_21;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_4.x;\n    u_xlat16_5.xyz
            = vec3(u_xlat16_21) * u_xlat16_5.xyz;\n    u_xlat16_4.xyz = u_xlat16_5.xyz
            * _RimColor.xyz + u_xlat16_10.xyz;\n    u_xlatb0 = 0.0<_SingleIndirectColor;\n   
            u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat16_3.xyz : u_xlat16_2.xyz;\n   
            u_xlat0.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(vec3(_IndirectIntensity, _IndirectIntensity,
            _IndirectIntensity));\n    u_xlat16_5.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz + _SColor.xyz;\n   
            u_xlat16_5.xyz = u_xlat16_5.xyz * _LightColor0.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz
            = u_xlat16_4.xyz + u_xlat16_2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump float _RampBands;\nuniform \tmediump float _RampBandsSmoothing;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3
            u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp
            float u_xlat10_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nmediump float u_xlat16_13;\nfloat
            u_xlat15;\nmediump float u_xlat16_16;\nmediump float u_xlat16_18;\nvoid
            main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x,
            0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat15
            = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16
            = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16,
            0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz
            = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * _RampBands;\n   
            u_xlat16_3.x = floor(u_xlat16_11);\n    u_xlat16_11 = fract(u_xlat16_11);\n   
            u_xlat16_8 = (-_RampBandsSmoothing) * 0.5 + 0.5;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_8);\n    u_xlat16_13 = _RampBandsSmoothing * 0.5 + 0.5;\n   
            u_xlat16_8 = (-u_xlat16_8) + u_xlat16_13;\n    u_xlat16_8 = float(1.0)
            / u_xlat16_8;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_8;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_8 * u_xlat16_11 + u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11
            / _RampBands;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin)
            + _RimMax;\n    u_xlat16_18 = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x
            = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18
            * -2.0 + 3.0;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_18)
            * u_xlat16_3.xyz;\n    u_xlat16_1.xyw = u_xlat16_3.xyz * _RimColor.xyz
            + u_xlat16_1.xyw;\n    u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_3.xyz + _SColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_1.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump float _RampBands;\nuniform \tmediump float _RampBandsSmoothing;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump
            vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3
            u_xlat16_4;\nfloat u_xlat5;\nmediump float u_xlat16_5;\nmediump float
            u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump float
            u_xlat16_11;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat16_5
            = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat16_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * _RampBands;\n   
            u_xlat16_3.x = floor(u_xlat16_11);\n    u_xlat16_11 = fract(u_xlat16_11);\n   
            u_xlat16_8 = (-_RampBandsSmoothing) * 0.5 + 0.5;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_8);\n    u_xlat16_13 = _RampBandsSmoothing * 0.5 + 0.5;\n   
            u_xlat16_8 = (-u_xlat16_8) + u_xlat16_13;\n    u_xlat16_8 = float(1.0)
            / u_xlat16_8;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_8;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_8 * u_xlat16_11 + u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11
            / _RampBands;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin)
            + _RimMax;\n    u_xlat16_18 = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x
            = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18
            * -2.0 + 3.0;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_18)
            * u_xlat16_3.xyz;\n    u_xlat16_1.xyw = u_xlat16_3.xyz * _RimColor.xyz
            + u_xlat16_1.xyw;\n    u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_11) * u_xlat16_3.xyz + _SColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_1.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TANGENT0;\nattribute highp
            vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat12);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) *
            u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    u_xlat3.xyz =
            u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy
            + (-u_xlat3.xyz);\n    u_xlat16_2.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump float _RampBands;\nuniform \tmediump float _RampBandsSmoothing;\nuniform
            \tvec4 _BumpMap_ST;\nuniform \tmediump float _BumpScale;\nuniform \tmediump
            vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump
            vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump float
            _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump float
            _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform lowp
            sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec3
            u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec2 u_xlat10_1;\nmediump
            vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat
            u_xlat5;\nmediump float u_xlat16_7;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nlowp float u_xlat10_10;\nmediump float u_xlat16_12;\nmediump
            float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nmediump
            float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat10_1.xy = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat10_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12
            = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17)
            + u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat16_17 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat5 = max(u_xlat16_17,
            0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat5);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_17) * u_xlat16_3.xyz;\n    u_xlat5 = dot(u_xlat16_2.xyz,
            u_xlat16_3.xyz);\n    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n    u_xlat10_10
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat10_10 * u_xlat16_2.x;\n   
            u_xlat10 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = min(u_xlat10,
            1.0);\n    u_xlat16_7 = u_xlat10 * u_xlat10 + 1.0;\n    u_xlat16_7 =
            float(1.0) / u_xlat16_7;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n   
            u_xlat16_12 = u_xlat5 * u_xlat16_2.x + (-u_xlat5);\n    u_xlat5 = u_xlat16_12
            * u_xlat5 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_2.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_2.x = u_xlat5 * 0.157079637;\n    u_xlat16_2.x = u_xlat16_7
            * u_xlat16_2.x;\n    u_xlat16_7 = u_xlat0.x;\n    u_xlat16_7 = clamp(u_xlat16_7,
            0.0, 1.0);\n    u_xlat16_12 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_2.x
            = u_xlat16_7 * u_xlat16_2.x;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * _LightColor0.xyz;\n   
            u_xlat16_2.xyw = u_xlat16_2.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_12 = u_xlat16_12
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x;\n    u_xlat16_12
            = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_12 * -2.0
            + 3.0;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12
            = u_xlat16_12 * u_xlat16_3.x;\n    u_xlat16_12 = u_xlat16_12 * _RampBands;\n   
            u_xlat16_3.x = floor(u_xlat16_12);\n    u_xlat16_12 = fract(u_xlat16_12);\n   
            u_xlat16_8 = (-_RampBandsSmoothing) * 0.5 + 0.5;\n    u_xlat16_12 = u_xlat16_12
            + (-u_xlat16_8);\n    u_xlat16_13 = _RampBandsSmoothing * 0.5 + 0.5;\n   
            u_xlat16_8 = (-u_xlat16_8) + u_xlat16_13;\n    u_xlat16_8 = float(1.0)
            / u_xlat16_8;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_8;\n    u_xlat16_12
            = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_12 * -2.0
            + 3.0;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12
            = u_xlat16_8 * u_xlat16_12 + u_xlat16_3.x;\n    u_xlat16_12 = u_xlat16_12
            / _RampBands;\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_12) * _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin)
            + _RimMax;\n    u_xlat16_18 = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x
            = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18
            * -2.0 + 3.0;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_18)
            * u_xlat16_3.xyz;\n    u_xlat16_2.xyw = u_xlat16_3.xyz * _RimColor.xyz
            + u_xlat16_2.xyw;\n    u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_3.xyz + _SColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz
            = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz
            * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_2.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat12);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) *
            u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    u_xlat3.xyz =
            u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy
            + (-u_xlat3.xyz);\n    u_xlat16_2.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump float _RampBands;\nuniform \tmediump float _RampBandsSmoothing;\nuniform
            \tvec4 _BumpMap_ST;\nuniform \tmediump float _BumpScale;\nuniform \tmediump
            vec4 _BaseColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump
            vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump float
            _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump float
            _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _BumpMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _SpecGlossMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3
            u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nmediump float
            u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump float
            u_xlat16_10;\nmediump float u_xlat16_12;\nmediump float u_xlat16_13;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nmediump float u_xlat16_18;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12
            = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17)
            + u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat16_17 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat5 = max(u_xlat16_17,
            0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat5);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_17) * u_xlat16_3.xyz;\n    u_xlat5 = dot(u_xlat16_2.xyz,
            u_xlat16_3.xyz);\n    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n    u_xlat16_10
            = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x;\n   
            u_xlat10 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = min(u_xlat10,
            1.0);\n    u_xlat16_7 = u_xlat10 * u_xlat10 + 1.0;\n    u_xlat16_7 =
            float(1.0) / u_xlat16_7;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n   
            u_xlat16_12 = u_xlat5 * u_xlat16_2.x + (-u_xlat5);\n    u_xlat5 = u_xlat16_12
            * u_xlat5 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_2.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_2.x = u_xlat5 * 0.157079637;\n    u_xlat16_2.x = u_xlat16_7
            * u_xlat16_2.x;\n    u_xlat16_7 = u_xlat0.x;\n    u_xlat16_7 = clamp(u_xlat16_7,
            0.0, 1.0);\n    u_xlat16_12 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_2.x
            = u_xlat16_7 * u_xlat16_2.x;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * _LightColor0.xyz;\n   
            u_xlat16_2.xyw = u_xlat16_2.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_12 = u_xlat16_12
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x;\n    u_xlat16_12
            = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_12 * -2.0
            + 3.0;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12
            = u_xlat16_12 * u_xlat16_3.x;\n    u_xlat16_12 = u_xlat16_12 * _RampBands;\n   
            u_xlat16_3.x = floor(u_xlat16_12);\n    u_xlat16_12 = fract(u_xlat16_12);\n   
            u_xlat16_8 = (-_RampBandsSmoothing) * 0.5 + 0.5;\n    u_xlat16_12 = u_xlat16_12
            + (-u_xlat16_8);\n    u_xlat16_13 = _RampBandsSmoothing * 0.5 + 0.5;\n   
            u_xlat16_8 = (-u_xlat16_8) + u_xlat16_13;\n    u_xlat16_8 = float(1.0)
            / u_xlat16_8;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_8;\n    u_xlat16_12
            = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_12 * -2.0
            + 3.0;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12
            = u_xlat16_8 * u_xlat16_12 + u_xlat16_3.x;\n    u_xlat16_12 = u_xlat16_12
            / _RampBands;\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_12) * _LightColor0.xyz;\n    u_xlat16_18 = (-_RimMin)
            + _RimMax;\n    u_xlat16_18 = float(1.0) / u_xlat16_18;\n    u_xlat16_4.x
            = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n   
            u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_18
            * -2.0 + 3.0;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_18
            = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_18)
            * u_xlat16_3.xyz;\n    u_xlat16_2.xyw = u_xlat16_3.xyz * _RimColor.xyz
            + u_xlat16_2.xyw;\n    u_xlat16_3.xyz = (-_SColor.xyz) + _HColor.xyz;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_12) * u_xlat16_3.xyz + _SColor.xyz;\n   
            u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz
            = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz
            * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz
            + u_xlat16_2.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDBASE
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        DefinedKeywords:
        - DIRECTIONAL
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - INSTANCING_ON
        - LIGHTMAP_SHADOW_MIXING
        - LIGHTPROBE_SH
        - LOD_FADE_CROSSFADE
        - SHADOWS_SCREEN
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - TCP2_MATCAP
        - TCP2_MATCAP_MASK
        - TCP2_MOBILE
        - TCP2_OCCLUSION
        - TCP2_RAMPTEXT
        - TCP2_RAMP_BANDS
        - TCP2_RAMP_BANDS_CRISP
        - TCP2_RAMP_CRISP
        - TCP2_REFLECTIONS
        - TCP2_REFLECTIONS_FRESNEL
        - TCP2_RIM_LIGHTING
        - TCP2_RIM_LIGHTING_LIGHTMASK
        - TCP2_SHADOW_LIGHT_COLOR
        - TCP2_SHADOW_TEXTURE
        - TCP2_SPECULAR
        - TCP2_SPECULAR_CRISP
        - TCP2_SPECULAR_STYLIZED
        - UNITY_SINGLE_PASS_STEREO
        - VERTEXLIGHT_ON
        - _ALPHAPREMULTIPLY_ON
        - _ALPHATEST_ON
        - _EMISSION
        - _NORMALMAP
        - _RECEIVE_SHADOWS_OFF
        - __
        - _
        KeywordGroups:
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
          hasDiscard: 1
        - Keywords:
          - __
          - INSTANCING_ON
          hasDiscard: 1
        - Keywords:
          - _
          - _RECEIVE_SHADOWS_OFF
          hasDiscard: 1
        - Keywords:
          - _
          - TCP2_MOBILE
          hasDiscard: 1
        - Keywords:
          - _
          - TCP2_RIM_LIGHTING
          hasDiscard: 1
        - Keywords:
          - _
          - TCP2_RIM_LIGHTING_LIGHTMASK
          hasDiscard: 1
        - Keywords:
          - _
          - TCP2_REFLECTIONS
          hasDiscard: 1
        - Keywords:
          - _
          - TCP2_REFLECTIONS_FRESNEL
          hasDiscard: 1
        - Keywords:
          - _
          - TCP2_MATCAP
          hasDiscard: 1
        - Keywords:
          - _
          - _NORMALMAP
          hasDiscard: 1
        - Keywords:
          - DIRECTIONAL
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - LIGHTPROBE_SH
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - VERTEXLIGHT_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          - LIGHTPROBE_SH
          hasDiscard: 0
        KeywordsMinimalCardinality: 11
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RAMP_BANDS
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RAMP_BANDS
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - LIGHTPROBE_SH
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 4
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_REFLECTIONS_FRESNEL
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: LIGHTMODE
          Value: FORWARDBASE
        - Key: QUEUE
          Value: Geometry
        - Key: RenderType
          Value: Opaque
        - Key: SHADOWSUPPORT
          Value: true
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -257
      - Shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp
            vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump
            float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n   
            u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6.x
            = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n   
            u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_6.xyz * u_xlat16_2.xxx;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3
            u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n   
            u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_6.xyz * u_xlat16_2.xxx;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp
            vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump
            float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n   
            u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6.x
            = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n   
            u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_6.xyz * u_xlat16_2.xxx;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3
            u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n   
            u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_6.xyz * u_xlat16_2.xxx;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform lowp sampler2D
            _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump
            float u_xlat16_8;\nmediump float u_xlat16_12;\nfloat u_xlat15;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat15
            = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2 = (-u_xlat16_7.x) + u_xlat16_2;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2 = u_xlat16_7.x
            * u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_7.x
            = u_xlat16_2 * -2.0 + 3.0;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;\n   
            u_xlat16_2 = u_xlat16_2 * u_xlat16_7.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_2)
            * _LightColor0.xyz;\n    u_xlat16_3.x = (-_RimMin) + _RimMax;\n    u_xlat16_3.x
            = float(1.0) / u_xlat16_3.x;\n    u_xlat16_8 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16_3.x = clamp(u_xlat16_3.x,
            0.0, 1.0);\n    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x
            = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n   
            u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;\n    u_xlat16_7.xyz
            = u_xlat16_7.xyz * _RimColor.xyz;\n    u_xlat16_3.xyz = _LightColor0.xyz
            * _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_2) * u_xlat16_3.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_7.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp
            vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0)
            out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3
            u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nmediump
            float u_xlat16_12;\nfloat u_xlat15;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2 = u_xlat0.x * 0.5 +
            0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2 = (-u_xlat16_7.x) + u_xlat16_2;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2 = u_xlat16_7.x
            * u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_7.x
            = u_xlat16_2 * -2.0 + 3.0;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;\n   
            u_xlat16_2 = u_xlat16_2 * u_xlat16_7.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_2)
            * _LightColor0.xyz;\n    u_xlat16_3.x = (-_RimMin) + _RimMax;\n    u_xlat16_3.x
            = float(1.0) / u_xlat16_3.x;\n    u_xlat16_8 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16_3.x = clamp(u_xlat16_3.x,
            0.0, 1.0);\n    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x
            = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n   
            u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;\n    u_xlat16_7.xyz
            = u_xlat16_7.xyz * _RimColor.xyz;\n    u_xlat16_3.xyz = _LightColor0.xyz
            * _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_2) * u_xlat16_3.xyz;\n   
            u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_7.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform lowp sampler2D
            _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump
            float u_xlat16_8;\nmediump float u_xlat16_12;\nfloat u_xlat15;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat15
            = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2 = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2 = (-u_xlat16_7.x) + u_xlat16_2;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2 = u_xlat16_7.x
            * u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_7.x
            = u_xlat16_2 * -2.0 + 3.0;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;\n   
            u_xlat16_2 = u_xlat16_2 * u_xlat16_7.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_2)
            * _LightColor0.xyz;\n    u_xlat16_3.x = (-_RimMin) + _RimMax;\n    u_xlat16_3.x
            = float(1.0) / u_xlat16_3.x;\n    u_xlat16_8 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16_3.x = clamp(u_xlat16_3.x,
            0.0, 1.0);\n    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x
            = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n   
            u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;\n    u_xlat16_7.xyz
            = u_xlat16_7.xyz * _RimColor.xyz;\n    u_xlat16_3.xyz = _LightColor0.xyz
            * _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_2) * u_xlat16_3.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_7.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp
            vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0)
            out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3
            u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_8;\nmediump
            float u_xlat16_12;\nfloat u_xlat15;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2 = u_xlat0.x * 0.5 +
            0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2 = (-u_xlat16_7.x) + u_xlat16_2;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2 = u_xlat16_7.x
            * u_xlat16_2;\n    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);\n    u_xlat16_7.x
            = u_xlat16_2 * -2.0 + 3.0;\n    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;\n   
            u_xlat16_2 = u_xlat16_2 * u_xlat16_7.x;\n    u_xlat16_7.xyz = vec3(u_xlat16_2)
            * _LightColor0.xyz;\n    u_xlat16_3.x = (-_RimMin) + _RimMax;\n    u_xlat16_3.x
            = float(1.0) / u_xlat16_3.x;\n    u_xlat16_8 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16_3.x = clamp(u_xlat16_3.x,
            0.0, 1.0);\n    u_xlat16_8 = u_xlat16_3.x * -2.0 + 3.0;\n    u_xlat16_3.x
            = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n   
            u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;\n    u_xlat16_7.xyz
            = u_xlat16_7.xyz * _RimColor.xyz;\n    u_xlat16_3.xyz = _LightColor0.xyz
            * _HColor.xyz;\n    u_xlat16_3.xyz = vec3(u_xlat16_2) * u_xlat16_3.xyz;\n   
            u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_7.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform lowp sampler2D _BaseMap;\nuniform lowp
            sampler2D _BumpMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define
            SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec2
            u_xlat1;\nlowp vec2 u_xlat10_1;\nmediump vec4 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat1.xy
            = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n    u_xlat10_1.xy
            = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy = u_xlat10_1.yx
            * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_10 = dot(u_xlat16_2.xy,
            u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_BumpScale);\n   
            u_xlat16_10 = min(u_xlat16_10, 1.0);\n    u_xlat16_10 = (-u_xlat16_10)
            + 1.0;\n    u_xlat16_10 = sqrt(u_xlat16_10);\n    u_xlat16_3.xyz = u_xlat16_2.yyy
            * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD2.xyz
            + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_10) * u_xlat0.xyz
            + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n   
            u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6.x
            = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n   
            u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_6.xyz * u_xlat16_2.xxx;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TANGENT0;\nin highp vec4 in_TEXCOORD0;\nout highp vec3
            vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout
            highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4
            vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump float
            u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _BumpMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin
            highp vec4 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nvec2 u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump
            vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump
            float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy
            + _BumpMap_ST.zw;\n    u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n   
            u_xlat16_2.xy = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n   
            u_xlat16_10 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy =
            u_xlat16_2.xy * vec2(_BumpScale);\n    u_xlat16_10 = min(u_xlat16_10,
            1.0);\n    u_xlat16_10 = (-u_xlat16_10) + 1.0;\n    u_xlat16_10 = sqrt(u_xlat16_10);\n   
            u_xlat16_3.xyz = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw
            = u_xlat16_2.xxx * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz
            = vec3(u_xlat16_10) * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x =
            dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_6.xyz * u_xlat16_2.xxx;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp
            vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_6;\nmediump
            float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n   
            u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6.x
            = (-u_xlat16_6.x) + u_xlat16_10;\n    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n   
            u_xlat16_2.x = u_xlat16_6.x * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_6.xyz * u_xlat16_2.xxx;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3
            u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_6;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n   
            u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat12 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_6.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6.x) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_10;\n   
            u_xlat16_6.x = float(1.0) / u_xlat16_6.x;\n    u_xlat16_2.x = u_xlat16_6.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6.x;\n   
            u_xlat16_6.xyz = _LightColor0.xyz * _HColor.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_6.xyz * u_xlat16_2.xxx;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform lowp sampler2D _BaseMap;\nvarying highp
            vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_6;\nmediump
            float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6) + u_xlat16_2.x;\n   
            u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6
            = (-u_xlat16_6) + u_xlat16_10;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n   
            u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_6 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3
            u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            float u_xlat16_6;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n   
            u_xlat12 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6) + u_xlat16_2.x;\n   
            u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6
            = (-u_xlat16_6) + u_xlat16_10;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n   
            u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_6 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform lowp sampler2D
            _BaseMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump
            float u_xlat16_12;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat15
            = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * _LightColor0.xyz;\n    u_xlat16_2.x = (-_RimMin) + _RimMax;\n    u_xlat16_2.x
            = float(1.0) / u_xlat16_2.x;\n    u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_18 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * _RimColor.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nin highp vec3 vs_NORMAL0;\nin highp
            vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0)
            out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3
            u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat1.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * _LightColor0.xyz;\n    u_xlat16_2.x = (-_RimMin) + _RimMax;\n    u_xlat16_2.x
            = float(1.0) / u_xlat16_2.x;\n    u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_18 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * _RimColor.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform lowp sampler2D _BaseMap;\nuniform lowp
            sampler2D _BumpMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define
            SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec2
            u_xlat1;\nlowp vec2 u_xlat10_1;\nmediump vec4 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump float u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat1.xy
            = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n    u_xlat10_1.xy
            = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy = u_xlat10_1.yx
            * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_10 = dot(u_xlat16_2.xy,
            u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_BumpScale);\n   
            u_xlat16_10 = min(u_xlat16_10, 1.0);\n    u_xlat16_10 = (-u_xlat16_10)
            + 1.0;\n    u_xlat16_10 = sqrt(u_xlat16_10);\n    u_xlat16_3.xyz = u_xlat16_2.yyy
            * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD2.xyz
            + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_10) * u_xlat0.xyz
            + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6) + u_xlat16_2.x;\n   
            u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6
            = (-u_xlat16_6) + u_xlat16_10;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n   
            u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_6 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TANGENT0;\nin highp vec4 in_TEXCOORD0;\nout highp vec3
            vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout
            highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4
            vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump float
            u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _BumpMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin
            highp vec4 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nvec2 u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump
            vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_6;\nmediump
            float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy
            + _BumpMap_ST.zw;\n    u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n   
            u_xlat16_2.xy = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n   
            u_xlat16_10 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy =
            u_xlat16_2.xy * vec2(_BumpScale);\n    u_xlat16_10 = min(u_xlat16_10,
            1.0);\n    u_xlat16_10 = (-u_xlat16_10) + 1.0;\n    u_xlat16_10 = sqrt(u_xlat16_10);\n   
            u_xlat16_3.xyz = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw
            = u_xlat16_2.xxx * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz
            = vec3(u_xlat16_10) * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x =
            dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_6 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6 = (-u_xlat16_6) + u_xlat16_10;\n   
            u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_2.x = u_xlat16_6
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6;\n    u_xlat16_2.xyz
            = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * _LightColor0.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_3.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz
            = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform lowp sampler2D _BaseMap;\nuniform lowp
            sampler2D _BumpMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define
            SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec2
            u_xlat1;\nlowp vec2 u_xlat10_1;\nmediump vec4 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump float u_xlat16_6;\nmediump float u_xlat16_10;\nfloat
            u_xlat12;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat1.xy
            = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n    u_xlat10_1.xy
            = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy = u_xlat10_1.yx
            * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_10 = dot(u_xlat16_2.xy,
            u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy * vec2(_BumpScale);\n   
            u_xlat16_10 = min(u_xlat16_10, 1.0);\n    u_xlat16_10 = (-u_xlat16_10)
            + 1.0;\n    u_xlat16_10 = sqrt(u_xlat16_10);\n    u_xlat16_3.xyz = u_xlat16_2.yyy
            * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * vs_TEXCOORD2.xyz
            + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_10) * u_xlat0.xyz
            + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n   
            u_xlat16_2.x = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_6 = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_2.x = (-u_xlat16_6) + u_xlat16_2.x;\n   
            u_xlat16_10 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_6
            = (-u_xlat16_6) + u_xlat16_10;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n   
            u_xlat16_2.x = u_xlat16_6 * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_6 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_2.xyz =
            u_xlat16_2.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w =
            1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TANGENT0;\nin highp vec4 in_TEXCOORD0;\nout highp vec3
            vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout
            highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4
            vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump float
            u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _BumpMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin
            highp vec4 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nvec2 u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump
            vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_6;\nmediump
            float u_xlat16_10;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat12 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy
            + _BumpMap_ST.zw;\n    u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n   
            u_xlat16_2.xy = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n   
            u_xlat16_10 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy =
            u_xlat16_2.xy * vec2(_BumpScale);\n    u_xlat16_10 = min(u_xlat16_10,
            1.0);\n    u_xlat16_10 = (-u_xlat16_10) + 1.0;\n    u_xlat16_10 = sqrt(u_xlat16_10);\n   
            u_xlat16_3.xyz = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw
            = u_xlat16_2.xxx * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz
            = vec3(u_xlat16_10) * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x =
            dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x
            = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n   
            u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x
            * 0.5 + 0.5;\n    u_xlat16_6 = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_6) + u_xlat16_2.x;\n    u_xlat16_10 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_6 = (-u_xlat16_6) + u_xlat16_10;\n   
            u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_2.x = u_xlat16_6
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_6 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_6;\n    u_xlat16_2.xyz
            = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            * _LightColor0.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_3.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz
            = u_xlat16_2.xyz * u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TANGENT0;\nattribute highp
            vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat12);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) *
            u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    u_xlat3.xyz =
            u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy
            + (-u_xlat3.xyz);\n    u_xlat16_2.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform lowp sampler2D
            _BaseMap;\nuniform lowp sampler2D _BumpMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp
            vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec2 u_xlat1;\nlowp vec2 u_xlat10_1;\nmediump vec4
            u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump
            vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat u_xlat15;\nmediump
            float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat10_1.xy = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat10_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12
            = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * _LightColor0.xyz;\n    u_xlat16_2.x = (-_RimMin) + _RimMax;\n    u_xlat16_2.x
            = float(1.0) / u_xlat16_2.x;\n    u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_18 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * _RimColor.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat12);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) *
            u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    u_xlat3.xyz =
            u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy
            + (-u_xlat3.xyz);\n    u_xlat16_2.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _BumpMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec2
            u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump
            float u_xlat16_12;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12
            = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * _LightColor0.xyz;\n    u_xlat16_2.x = (-_RimMin) + _RimMax;\n    u_xlat16_2.x
            = float(1.0) / u_xlat16_2.x;\n    u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_18 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * _RimColor.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TANGENT0;\nattribute highp
            vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat12);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) *
            u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    u_xlat3.xyz =
            u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy
            + (-u_xlat3.xyz);\n    u_xlat16_2.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump
            vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nuniform lowp sampler2D
            _BaseMap;\nuniform lowp sampler2D _BumpMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp
            vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec2 u_xlat1;\nlowp vec2 u_xlat10_1;\nmediump vec4
            u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump
            vec3 u_xlat16_7;\nmediump float u_xlat16_12;\nfloat u_xlat15;\nmediump
            float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat10_1.xy = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat10_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12
            = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * _LightColor0.xyz;\n    u_xlat16_2.x = (-_RimMin) + _RimMax;\n    u_xlat16_2.x
            = float(1.0) / u_xlat16_2.x;\n    u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_18 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * _RimColor.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat12);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) *
            u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    u_xlat3.xyz =
            u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy
            + (-u_xlat3.xyz);\n    u_xlat16_2.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _RampSmoothing;\nuniform
            \tmediump float _RampThreshold;\nuniform \tvec4 _BumpMap_ST;\nuniform
            \tmediump float _BumpScale;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump vec4 _HColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump
            float _RimMax;\nuniform \tmediump vec4 _RimColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _BumpMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec2
            u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_7;\nmediump
            float u_xlat16_12;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid
            main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12
            = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x
            = dot(u_xlat16_2.xyz, u_xlat0.xyz);\n    u_xlat16_2.x = u_xlat0.x * 0.5
            + 0.5;\n    u_xlat16_7.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_2.x = (-u_xlat16_7.x) + u_xlat16_2.x;\n    u_xlat16_12 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_12;\n   
            u_xlat16_7.x = float(1.0) / u_xlat16_7.x;\n    u_xlat16_2.x = u_xlat16_7.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n   
            u_xlat16_7.x = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x = u_xlat16_2.x
            * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_7.x;\n   
            u_xlat16_7.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_2.xxx * _HColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * _LightColor0.xyz;\n    u_xlat16_2.x = (-_RimMin) + _RimMax;\n    u_xlat16_2.x
            = float(1.0) / u_xlat16_2.x;\n    u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n   
            u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n    u_xlat16_2.x = clamp(u_xlat16_2.x,
            0.0, 1.0);\n    u_xlat16_18 = u_xlat16_2.x * -2.0 + 3.0;\n    u_xlat16_2.x
            = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_18;\n   
            u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_7.xyz;\n    u_xlat16_2.xyz
            = u_xlat16_2.xyz * _RimColor.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tvec4 _EmissionMap_ST;\nuniform
            \tmediump vec4 _EmissionColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _EmissionMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3
            u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp
            float u_xlat10_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat0.xy
            = vs_TEXCOORD1.zw * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n    u_xlat10_0.xyz
            = texture2D(_EmissionMap, u_xlat0.xy).xyz;\n    u_xlat16_1.xyw = _EmissionColor.xyz
            * u_xlat10_0.xyz + u_xlat16_1.xyw;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n   
            u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_11) * _HColor.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_1.xyw;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tvec4 _EmissionMap_ST;\nuniform
            \tmediump vec4 _EmissionColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _EmissionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D
            _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nmediump float
            u_xlat16_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n   
            u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat2.xyz);\n    u_xlat16_5 = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_1.x = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_1.x
            = u_xlat16_5 * u_xlat16_1.x;\n    u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n   
            u_xlat16_1.x = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5
            + 1.0;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_1.x =
            u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11 = u_xlat15 * u_xlat16_1.x
            + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 * u_xlat15 + 1.0;\n    u_xlat5
            = u_xlat5 * u_xlat5 + 9.99999975e-05;\n    u_xlat10 = u_xlat16_1.x *
            0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n    u_xlat16_1.x = u_xlat5
            * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_6
            = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_11
            = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n   
            u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat0.xy = vs_TEXCOORD1.zw
            * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n    u_xlat16_0.xyz = texture(_EmissionMap,
            u_xlat0.xy).xyz;\n    u_xlat16_1.xyw = _EmissionColor.xyz * u_xlat16_0.xyz
            + u_xlat16_1.xyw;\n    u_xlat16_3.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n   
            u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * _HColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * _LightColor0.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz
            = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_1.xyw;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tvec4 _EmissionMap_ST;\nuniform
            \tmediump vec4 _EmissionColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _EmissionMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3
            u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp
            float u_xlat10_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat0.xy
            = vs_TEXCOORD1.zw * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n    u_xlat10_0.xyz
            = texture2D(_EmissionMap, u_xlat0.xy).xyz;\n    u_xlat16_1.xyw = _EmissionColor.xyz
            * u_xlat10_0.xyz + u_xlat16_1.xyw;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n   
            u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_11) * _HColor.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_1.xyw;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tvec4 _EmissionMap_ST;\nuniform
            \tmediump vec4 _EmissionColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _EmissionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D
            _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nmediump float
            u_xlat16_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n   
            u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat2.xyz);\n    u_xlat16_5 = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_1.x = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_1.x
            = u_xlat16_5 * u_xlat16_1.x;\n    u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n   
            u_xlat16_1.x = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5
            + 1.0;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_1.x =
            u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11 = u_xlat15 * u_xlat16_1.x
            + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 * u_xlat15 + 1.0;\n    u_xlat5
            = u_xlat5 * u_xlat5 + 9.99999975e-05;\n    u_xlat10 = u_xlat16_1.x *
            0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n    u_xlat16_1.x = u_xlat5
            * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_6
            = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_11
            = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n   
            u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat0.xy = vs_TEXCOORD1.zw
            * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n    u_xlat16_0.xyz = texture(_EmissionMap,
            u_xlat0.xy).xyz;\n    u_xlat16_1.xyw = _EmissionColor.xyz * u_xlat16_0.xyz
            + u_xlat16_1.xyw;\n    u_xlat16_3.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n   
            u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing
            * 0.5 + _RampThreshold;\n    u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n   
            u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * _HColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * _LightColor0.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n   
            u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz
            = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_1.xyw;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tvec4 _EmissionMap_ST;\nuniform
            \tmediump vec4 _EmissionColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _EmissionMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3
            u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp
            float u_xlat10_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15
            = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0,
            1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_3.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11
            = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5
            + _RampThreshold;\n    u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n   
            u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * _LightColor0.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat16_11)
            * _HColor.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _LightColor0.xyz;\n   
            u_xlat16_11 = (-_RimMin) + _RimMax;\n    u_xlat16_11 = float(1.0) / u_xlat16_11;\n   
            u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_18;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_18 = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_18;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * u_xlat16_3.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * _RimColor.xyz;\n    u_xlat0.xy = vs_TEXCOORD1.zw * _EmissionMap_ST.xy
            + _EmissionMap_ST.zw;\n    u_xlat10_0.xyz = texture2D(_EmissionMap, u_xlat0.xy).xyz;\n   
            u_xlat16_3.xyz = _EmissionColor.xyz * u_xlat10_0.xyz + u_xlat16_3.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyw * _SpecularColor.xyz + u_xlat16_3.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz
            * u_xlat16_4.xyz + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tvec4 _EmissionMap_ST;\nuniform
            \tmediump vec4 _EmissionColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(2)
            uniform mediump sampler2D _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin
            highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4
            vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nmediump float
            u_xlat16_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat16_5
            = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat16_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_3.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11
            = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5
            + _RampThreshold;\n    u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n   
            u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * _LightColor0.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat16_11)
            * _HColor.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _LightColor0.xyz;\n   
            u_xlat16_11 = (-_RimMin) + _RimMax;\n    u_xlat16_11 = float(1.0) / u_xlat16_11;\n   
            u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_18;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_18 = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_18;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * u_xlat16_3.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * _RimColor.xyz;\n    u_xlat0.xy = vs_TEXCOORD1.zw * _EmissionMap_ST.xy
            + _EmissionMap_ST.zw;\n    u_xlat16_0.xyz = texture(_EmissionMap, u_xlat0.xy).xyz;\n   
            u_xlat16_3.xyz = _EmissionColor.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyw * _SpecularColor.xyz + u_xlat16_3.xyz;\n   
            u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz
            * u_xlat16_4.xyz + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tvec4 _EmissionMap_ST;\nuniform
            \tmediump vec4 _EmissionColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _EmissionMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3
            u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp
            float u_xlat10_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15
            = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0,
            1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_3.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11
            = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5
            + _RampThreshold;\n    u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n   
            u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * _LightColor0.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat16_11)
            * _HColor.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _LightColor0.xyz;\n   
            u_xlat16_11 = (-_RimMin) + _RimMax;\n    u_xlat16_11 = float(1.0) / u_xlat16_11;\n   
            u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_18;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_18 = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_18;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * u_xlat16_3.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * _RimColor.xyz;\n    u_xlat0.xy = vs_TEXCOORD1.zw * _EmissionMap_ST.xy
            + _EmissionMap_ST.zw;\n    u_xlat10_0.xyz = texture2D(_EmissionMap, u_xlat0.xy).xyz;\n   
            u_xlat16_3.xyz = _EmissionColor.xyz * u_xlat10_0.xyz + u_xlat16_3.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyw * _SpecularColor.xyz + u_xlat16_3.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz
            * u_xlat16_4.xyz + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tvec4 _EmissionMap_ST;\nuniform
            \tmediump vec4 _EmissionColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(2)
            uniform mediump sampler2D _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin
            highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4
            vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nmediump float
            u_xlat16_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat16_5
            = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat16_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_3.x = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11
            = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5
            + _RampThreshold;\n    u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n   
            u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * _LightColor0.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat16_11)
            * _HColor.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _LightColor0.xyz;\n   
            u_xlat16_11 = (-_RimMin) + _RimMax;\n    u_xlat16_11 = float(1.0) / u_xlat16_11;\n   
            u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_18;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_18 = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_18;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * u_xlat16_3.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            * _RimColor.xyz;\n    u_xlat0.xy = vs_TEXCOORD1.zw * _EmissionMap_ST.xy
            + _EmissionMap_ST.zw;\n    u_xlat16_0.xyz = texture(_EmissionMap, u_xlat0.xy).xyz;\n   
            u_xlat16_3.xyz = _EmissionColor.xyz * u_xlat16_0.xyz + u_xlat16_3.xyz;\n   
            u_xlat16_1.xyz = u_xlat16_1.xyw * _SpecularColor.xyz + u_xlat16_3.xyz;\n   
            u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz
            = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz
            * u_xlat16_4.xyz + u_xlat16_1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tvec4 _BumpMap_ST;\nuniform \tmediump float _BumpScale;\nuniform \tmediump
            vec4 _BaseColor;\nuniform \tvec4 _EmissionMap_ST;\nuniform \tmediump
            vec4 _EmissionColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform lowp
            sampler2D _EmissionMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec2 u_xlat10_1;\nmediump vec4
            u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat
            u_xlat5;\nmediump float u_xlat16_7;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nlowp float u_xlat10_10;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat10_1.xy = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat10_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12
            = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17)
            + u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat16_17 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat5 = max(u_xlat16_17,
            0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat5);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_17) * u_xlat16_3.xyz;\n    u_xlat5 = dot(u_xlat16_2.xyz,
            u_xlat16_3.xyz);\n    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n    u_xlat10_10
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat10_10 * u_xlat16_2.x;\n   
            u_xlat10 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = min(u_xlat10,
            1.0);\n    u_xlat16_7 = u_xlat10 * u_xlat10 + 1.0;\n    u_xlat16_7 =
            float(1.0) / u_xlat16_7;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n   
            u_xlat16_12 = u_xlat5 * u_xlat16_2.x + (-u_xlat5);\n    u_xlat5 = u_xlat16_12
            * u_xlat5 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_2.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_2.x = u_xlat5 * 0.157079637;\n    u_xlat16_2.x = u_xlat16_7
            * u_xlat16_2.x;\n    u_xlat16_7 = u_xlat0.x;\n    u_xlat16_7 = clamp(u_xlat16_7,
            0.0, 1.0);\n    u_xlat16_12 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_2.x
            = u_xlat16_7 * u_xlat16_2.x;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * _LightColor0.xyz;\n   
            u_xlat16_2.xyw = u_xlat16_2.xyw * _SpecularColor.xyz;\n    u_xlat0.xy
            = vs_TEXCOORD1.zw * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n    u_xlat10_0.xyz
            = texture2D(_EmissionMap, u_xlat0.xy).xyz;\n    u_xlat16_2.xyw = _EmissionColor.xyz
            * u_xlat10_0.xyz + u_xlat16_2.xyw;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_12 = u_xlat16_12 + (-u_xlat16_3.x);\n   
            u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x;\n    u_xlat16_12 = clamp(u_xlat16_12,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_12 * -2.0 + 3.0;\n    u_xlat16_12
            = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_12) * _HColor.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_2.xyw;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TANGENT0;\nin highp vec4 in_TEXCOORD0;\nout highp vec3
            vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout
            highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4
            vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump float
            u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tvec4 _BumpMap_ST;\nuniform \tmediump float _BumpScale;\nuniform \tmediump
            vec4 _BaseColor;\nuniform \tvec4 _EmissionMap_ST;\nuniform \tmediump
            vec4 _EmissionColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _BumpMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(3)
            uniform mediump sampler2D _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin
            highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4
            vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nlayout(location = 0) out
            mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3
            u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nmediump float
            u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump float
            u_xlat16_10;\nmediump float u_xlat16_12;\nfloat u_xlat15;\nmediump float
            u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12
            = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17)
            + u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat16_17 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat5 = max(u_xlat16_17,
            0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat5);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_17) * u_xlat16_3.xyz;\n    u_xlat5 = dot(u_xlat16_2.xyz,
            u_xlat16_3.xyz);\n    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n    u_xlat16_10
            = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x;\n   
            u_xlat10 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = min(u_xlat10,
            1.0);\n    u_xlat16_7 = u_xlat10 * u_xlat10 + 1.0;\n    u_xlat16_7 =
            float(1.0) / u_xlat16_7;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n   
            u_xlat16_12 = u_xlat5 * u_xlat16_2.x + (-u_xlat5);\n    u_xlat5 = u_xlat16_12
            * u_xlat5 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_2.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_2.x = u_xlat5 * 0.157079637;\n    u_xlat16_2.x = u_xlat16_7
            * u_xlat16_2.x;\n    u_xlat16_7 = u_xlat0.x;\n    u_xlat16_7 = clamp(u_xlat16_7,
            0.0, 1.0);\n    u_xlat16_12 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_2.x
            = u_xlat16_7 * u_xlat16_2.x;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * _LightColor0.xyz;\n   
            u_xlat16_2.xyw = u_xlat16_2.xyw * _SpecularColor.xyz;\n    u_xlat0.xy
            = vs_TEXCOORD1.zw * _EmissionMap_ST.xy + _EmissionMap_ST.zw;\n    u_xlat16_0.xyz
            = texture(_EmissionMap, u_xlat0.xy).xyz;\n    u_xlat16_2.xyw = _EmissionColor.xyz
            * u_xlat16_0.xyz + u_xlat16_2.xyw;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_12 = u_xlat16_12 + (-u_xlat16_3.x);\n   
            u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x;\n    u_xlat16_12 = clamp(u_xlat16_12,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_12 * -2.0 + 3.0;\n    u_xlat16_12
            = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_12) * _HColor.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_2.xyw;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp float u_xlat10_5;\nmediump
            float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump
            float u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nvoid
            main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x,
            0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat15
            = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16
            = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16,
            0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz
            = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * _HColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_1.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nmediump float
            u_xlat16_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n   
            u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat2.xyz);\n    u_xlat16_5 = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_1.x = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_1.x
            = u_xlat16_5 * u_xlat16_1.x;\n    u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n   
            u_xlat16_1.x = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5
            + 1.0;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_1.x =
            u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11 = u_xlat15 * u_xlat16_1.x
            + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 * u_xlat15 + 1.0;\n    u_xlat5
            = u_xlat5 * u_xlat5 + 9.99999975e-05;\n    u_xlat10 = u_xlat16_1.x *
            0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n    u_xlat16_1.x = u_xlat5
            * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_6
            = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_11
            = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n   
            u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n   
            u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_11) * _HColor.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_1.xyw;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec3
            vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp float u_xlat10_5;\nmediump
            float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump
            float u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nvoid
            main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x,
            0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat15
            = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16
            = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16,
            0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz
            = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1
            : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * _HColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_1.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout
            highp vec3 vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4
            vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n   
            vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD0.w = 0.0;\n   
            vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    vs_TEXCOORD7 = vec4(0.0, 0.0,
            0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nmediump float
            u_xlat16_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) +
            _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 0xffffffffu : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz =
            vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n   
            u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat2.xyz);\n    u_xlat16_5 = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_1.x = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_1.x
            = u_xlat16_5 * u_xlat16_1.x;\n    u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n   
            u_xlat16_1.x = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5
            + 1.0;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_1.x =
            u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11 = u_xlat15 * u_xlat16_1.x
            + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 * u_xlat15 + 1.0;\n    u_xlat5
            = u_xlat5 * u_xlat5 + 9.99999975e-05;\n    u_xlat10 = u_xlat16_1.x *
            0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n    u_xlat16_1.x = u_xlat5
            * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_6
            = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_11
            = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n   
            u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n   
            u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n   
            u_xlat16_3.xyz = vec3(u_xlat16_11) * _HColor.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * _LightColor0.xyz;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat16_1.xyw;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp float u_xlat10_5;\nmediump
            float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump
            float u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nmediump
            float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * _LightColor0.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat16_11) * _HColor.xyz;\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * _LightColor0.xyz;\n    u_xlat16_11
            = (-_RimMin) + _RimMax;\n    u_xlat16_11 = float(1.0) / u_xlat16_11;\n   
            u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_18;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_18 = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_18;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * u_xlat16_3.xyz;\n    u_xlat16_1.xyz = u_xlat16_3.xyz
            * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _SpecGlossMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nmediump float
            u_xlat16_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat16_5
            = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat16_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * _LightColor0.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat16_11) * _HColor.xyz;\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * _LightColor0.xyz;\n    u_xlat16_11
            = (-_RimMin) + _RimMax;\n    u_xlat16_11 = float(1.0) / u_xlat16_11;\n   
            u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_18;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_18 = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_18;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * u_xlat16_3.xyz;\n    u_xlat16_1.xyz = u_xlat16_3.xyz
            * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp float u_xlat10_5;\nmediump
            float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump
            float u_xlat16_11;\nfloat u_xlat15;\nmediump float u_xlat16_16;\nmediump
            float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n   
            u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n   
            u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x =
            dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * _LightColor0.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat16_11) * _HColor.xyz;\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * _LightColor0.xyz;\n    u_xlat16_11
            = (-_RimMin) + _RimMax;\n    u_xlat16_11 = float(1.0) / u_xlat16_11;\n   
            u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_18;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_18 = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_18;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * u_xlat16_3.xyz;\n    u_xlat16_1.xyz = u_xlat16_3.xyz
            * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _SpecGlossMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nmediump float
            u_xlat16_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nfloat u_xlat15;\nmediump float
            u_xlat16_16;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15,
            0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat16_5
            = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat16_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * _LightColor0.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat16_11) * _HColor.xyz;\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * _LightColor0.xyz;\n    u_xlat16_11
            = (-_RimMin) + _RimMax;\n    u_xlat16_11 = float(1.0) / u_xlat16_11;\n   
            u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_18;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_18 = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_18;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * u_xlat16_3.xyz;\n    u_xlat16_1.xyz = u_xlat16_3.xyz
            * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp
            vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tvec4 _BumpMap_ST;\nuniform \tmediump float _BumpScale;\nuniform \tmediump
            vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform lowp
            sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec3
            u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec2 u_xlat10_1;\nmediump
            vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat
            u_xlat5;\nmediump float u_xlat16_7;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nlowp float u_xlat10_10;\nmediump float u_xlat16_12;\nfloat
            u_xlat15;\nmediump float u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat10_1.xy = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat10_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12
            = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17)
            + u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat16_17 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat5 = max(u_xlat16_17,
            0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat5);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_17) * u_xlat16_3.xyz;\n    u_xlat5 = dot(u_xlat16_2.xyz,
            u_xlat16_3.xyz);\n    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n    u_xlat10_10
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat10_10 * u_xlat16_2.x;\n   
            u_xlat10 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = min(u_xlat10,
            1.0);\n    u_xlat16_7 = u_xlat10 * u_xlat10 + 1.0;\n    u_xlat16_7 =
            float(1.0) / u_xlat16_7;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n   
            u_xlat16_12 = u_xlat5 * u_xlat16_2.x + (-u_xlat5);\n    u_xlat5 = u_xlat16_12
            * u_xlat5 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_2.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_2.x = u_xlat5 * 0.157079637;\n    u_xlat16_2.x = u_xlat16_7
            * u_xlat16_2.x;\n    u_xlat16_7 = u_xlat0.x;\n    u_xlat16_7 = clamp(u_xlat16_7,
            0.0, 1.0);\n    u_xlat16_12 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_2.x
            = u_xlat16_7 * u_xlat16_2.x;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * _LightColor0.xyz;\n   
            u_xlat16_2.xyw = u_xlat16_2.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_12 = u_xlat16_12
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x;\n    u_xlat16_12
            = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_12 * -2.0
            + 3.0;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12
            = u_xlat16_12 * u_xlat16_3.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_12)
            * _HColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n   
            u_xlat10_0.xyz = texture2D(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_2.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TANGENT0;\nin highp vec4 in_TEXCOORD0;\nout highp vec3
            vs_NORMAL0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout
            highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4
            vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nmediump float
            u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat1.xyz
            = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz
            + u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12
            = inversesqrt(u_xlat12);\n    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.w = 0.0;\n    u_xlat2.xyz
            = u_xlat0.zxy * u_xlat1.yzx;\n    u_xlat0.xyz = u_xlat0.yzx * u_xlat1.zxy
            + (-u_xlat2.xyz);\n    u_xlat16_3 = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * vec3(u_xlat16_3);\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tvec4 _BumpMap_ST;\nuniform \tmediump float _BumpScale;\nuniform \tmediump
            vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _SpecularRoughness;\nuniform \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1) uniform mediump
            sampler2D _BumpMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _SpecGlossMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3
            u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nmediump float
            u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump float
            u_xlat16_10;\nmediump float u_xlat16_12;\nfloat u_xlat15;\nmediump float
            u_xlat16_17;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu : uint(0))
            != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12
            = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17)
            + u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat16_17 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat5 = max(u_xlat16_17,
            0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat5);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_17) * u_xlat16_3.xyz;\n    u_xlat5 = dot(u_xlat16_2.xyz,
            u_xlat16_3.xyz);\n    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n    u_xlat16_10
            = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x;\n   
            u_xlat10 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = min(u_xlat10,
            1.0);\n    u_xlat16_7 = u_xlat10 * u_xlat10 + 1.0;\n    u_xlat16_7 =
            float(1.0) / u_xlat16_7;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n   
            u_xlat16_12 = u_xlat5 * u_xlat16_2.x + (-u_xlat5);\n    u_xlat5 = u_xlat16_12
            * u_xlat5 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_2.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_2.x = u_xlat5 * 0.157079637;\n    u_xlat16_2.x = u_xlat16_7
            * u_xlat16_2.x;\n    u_xlat16_7 = u_xlat0.x;\n    u_xlat16_7 = clamp(u_xlat16_7,
            0.0, 1.0);\n    u_xlat16_12 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_2.x
            = u_xlat16_7 * u_xlat16_2.x;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * _LightColor0.xyz;\n   
            u_xlat16_2.xyw = u_xlat16_2.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_12 = u_xlat16_12
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x;\n    u_xlat16_12
            = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_12 * -2.0
            + 3.0;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12
            = u_xlat16_12 * u_xlat16_3.x;\n    u_xlat16_3.xyz = vec3(u_xlat16_12)
            * _HColor.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * _LightColor0.xyz;\n   
            u_xlat16_0.xyz = texture(_BaseMap, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_4.xyz
            = u_xlat16_0.xyz * _BaseColor.xyz;\n    SV_Target0.xyz = u_xlat16_4.xyz
            * u_xlat16_3.xyz + u_xlat16_2.xyw;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump float _RampBands;\nuniform \tmediump float _RampBandsSmoothing;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp float u_xlat10_5;\nmediump
            float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump
            float u_xlat16_11;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump
            float u_xlat16_16;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15
            = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0,
            1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * _RampBands;\n   
            u_xlat16_3.x = floor(u_xlat16_11);\n    u_xlat16_11 = fract(u_xlat16_11);\n   
            u_xlat16_8 = (-_RampBandsSmoothing) * 0.5 + 0.5;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_8);\n    u_xlat16_13 = _RampBandsSmoothing * 0.5 + 0.5;\n   
            u_xlat16_8 = (-u_xlat16_8) + u_xlat16_13;\n    u_xlat16_8 = float(1.0)
            / u_xlat16_8;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_8;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_8 * u_xlat16_11 + u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11
            / _RampBands;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * _LightColor0.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat16_11)
            * _HColor.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _LightColor0.xyz;\n   
            u_xlat16_11 = (-_RimMin) + _RimMax;\n    u_xlat16_11 = float(1.0) / u_xlat16_11;\n   
            u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_18;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_18 = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_18;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * u_xlat16_3.xyz;\n    u_xlat16_1.xyz = u_xlat16_3.xyz
            * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump float _RampBands;\nuniform \tmediump float _RampBandsSmoothing;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _SpecGlossMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nmediump float
            u_xlat16_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nmediump float u_xlat16_13;\nfloat
            u_xlat15;\nmediump float u_xlat16_16;\nmediump float u_xlat16_18;\nvoid
            main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x,
            0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat15
            = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16
            = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16,
            0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz
            = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu
            : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15)
            * u_xlat0.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n   
            u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat2.xyz);\n    u_xlat16_5 = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_1.x = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_1.x
            = u_xlat16_5 * u_xlat16_1.x;\n    u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n   
            u_xlat16_1.x = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5
            + 1.0;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_1.x =
            u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11 = u_xlat15 * u_xlat16_1.x
            + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 * u_xlat15 + 1.0;\n    u_xlat5
            = u_xlat5 * u_xlat5 + 9.99999975e-05;\n    u_xlat10 = u_xlat16_1.x *
            0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n    u_xlat16_1.x = u_xlat5
            * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_6
            = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_11
            = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n   
            u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n   
            u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n   
            u_xlat16_11 = u_xlat16_11 * _RampBands;\n    u_xlat16_3.x = floor(u_xlat16_11);\n   
            u_xlat16_11 = fract(u_xlat16_11);\n    u_xlat16_8 = (-_RampBandsSmoothing)
            * 0.5 + 0.5;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_8);\n    u_xlat16_13
            = _RampBandsSmoothing * 0.5 + 0.5;\n    u_xlat16_8 = (-u_xlat16_8) +
            u_xlat16_13;\n    u_xlat16_8 = float(1.0) / u_xlat16_8;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_8;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0,
            1.0);\n    u_xlat16_8 = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 =
            u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_8 * u_xlat16_11
            + u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 / _RampBands;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * _LightColor0.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat16_11) * _HColor.xyz;\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * _LightColor0.xyz;\n    u_xlat16_11
            = (-_RimMin) + _RimMax;\n    u_xlat16_11 = float(1.0) / u_xlat16_11;\n   
            u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_18;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_18 = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_18;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * u_xlat16_3.xyz;\n    u_xlat16_1.xyz = u_xlat16_3.xyz
            * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp
            vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump float _RampBands;\nuniform \tmediump float _RampBandsSmoothing;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp sampler2D _SpecGlossMap;\nvarying highp vec3 vs_NORMAL0;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec3 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nlowp float u_xlat10_5;\nmediump
            float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump
            float u_xlat16_11;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump
            float u_xlat16_16;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz
            = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_1.x =
            dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x, 0.00100000005);\n   
            u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15 = dot(_WorldSpaceLightPos0.xyz,
            _WorldSpaceLightPos0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n   
            u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n    u_xlat16_1.xyz
            = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16 = dot(u_xlat16_1.xyz,
            u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16, 0.00100000005);\n   
            u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz = vec3(u_xlat16_16)
            * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx *
            vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 1 : 0) != 0) ? 1.0
            : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat15
            = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0,
            1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat10_5
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_1.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_1.x = u_xlat10_5 * u_xlat16_1.x;\n   
            u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = min(u_xlat5,
            1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5 + 1.0;\n    u_xlat16_6 = float(1.0)
            / u_xlat16_6;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11
            = u_xlat15 * u_xlat16_1.x + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 *
            u_xlat15 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_1.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_1.x = u_xlat5 * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6
            * u_xlat16_1.x;\n    u_xlat16_6 = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6,
            0.0, 1.0);\n    u_xlat16_11 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x
            = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n   
            u_xlat16_1.xyw = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 * _RampBands;\n   
            u_xlat16_3.x = floor(u_xlat16_11);\n    u_xlat16_11 = fract(u_xlat16_11);\n   
            u_xlat16_8 = (-_RampBandsSmoothing) * 0.5 + 0.5;\n    u_xlat16_11 = u_xlat16_11
            + (-u_xlat16_8);\n    u_xlat16_13 = _RampBandsSmoothing * 0.5 + 0.5;\n   
            u_xlat16_8 = (-u_xlat16_8) + u_xlat16_13;\n    u_xlat16_8 = float(1.0)
            / u_xlat16_8;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_8;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_11 * -2.0
            + 3.0;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11
            = u_xlat16_8 * u_xlat16_11 + u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11
            / _RampBands;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * _LightColor0.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat16_11)
            * _HColor.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _LightColor0.xyz;\n   
            u_xlat16_11 = (-_RimMin) + _RimMax;\n    u_xlat16_11 = float(1.0) / u_xlat16_11;\n   
            u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_18;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_18 = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_18;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * u_xlat16_3.xyz;\n    u_xlat16_1.xyz = u_xlat16_3.xyz
            * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n   
            u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat9);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD7 =
            vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump float _RampBands;\nuniform \tmediump float _RampBandsSmoothing;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform
            \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump
            vec4 _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform
            \tmediump vec4 _SpecularColor;\nUNITY_LOCATION(0) uniform mediump sampler2D
            _BaseMap;\nUNITY_LOCATION(1) uniform mediump sampler2D _SpecGlossMap;\nin
            highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin
            highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump
            vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nmediump float
            u_xlat16_5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_11;\nmediump float u_xlat16_13;\nfloat
            u_xlat15;\nmediump float u_xlat16_16;\nmediump float u_xlat16_18;\nvoid
            main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            u_xlat16_1.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = max(u_xlat16_1.x,
            0.00100000005);\n    u_xlat16_1.x = inversesqrt(u_xlat15);\n    u_xlat15
            = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat15
            = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * _WorldSpaceLightPos0.xyz;\n   
            u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx + u_xlat2.xyz;\n    u_xlat16_16
            = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);\n    u_xlat0.x = max(u_xlat16_16,
            0.00100000005);\n    u_xlat16_16 = inversesqrt(u_xlat0.x);\n    u_xlat16_1.xyz
            = vec3(u_xlat16_16) * u_xlat16_1.xyz;\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu
            : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15)
            * u_xlat0.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n   
            u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz,
            u_xlat2.xyz);\n    u_xlat16_5 = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n   
            u_xlat16_1.x = max(_SpecularRoughness, 9.99999975e-06);\n    u_xlat16_1.x
            = u_xlat16_5 * u_xlat16_1.x;\n    u_xlat5 = u_xlat16_1.x * u_xlat16_1.x;\n   
            u_xlat16_1.x = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * u_xlat5
            + 1.0;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_1.x =
            u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_11 = u_xlat15 * u_xlat16_1.x
            + (-u_xlat15);\n    u_xlat5 = u_xlat16_11 * u_xlat15 + 1.0;\n    u_xlat5
            = u_xlat5 * u_xlat5 + 9.99999975e-05;\n    u_xlat10 = u_xlat16_1.x *
            0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n    u_xlat16_1.x = u_xlat5
            * 0.157079637;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_6
            = u_xlat0.x;\n    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);\n    u_xlat16_11
            = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n   
            u_xlat16_1.xyw = u_xlat16_1.xxx * _LightColor0.xyz;\n    u_xlat16_1.xyw
            = u_xlat16_1.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x = (-_RampSmoothing)
            * 0.5 + _RampThreshold;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n   
            u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n    u_xlat16_3.x
            = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0) / u_xlat16_3.x;\n   
            u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n    u_xlat16_11 = clamp(u_xlat16_11,
            0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_3.x;\n   
            u_xlat16_11 = u_xlat16_11 * _RampBands;\n    u_xlat16_3.x = floor(u_xlat16_11);\n   
            u_xlat16_11 = fract(u_xlat16_11);\n    u_xlat16_8 = (-_RampBandsSmoothing)
            * 0.5 + 0.5;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_8);\n    u_xlat16_13
            = _RampBandsSmoothing * 0.5 + 0.5;\n    u_xlat16_8 = (-u_xlat16_8) +
            u_xlat16_13;\n    u_xlat16_8 = float(1.0) / u_xlat16_8;\n    u_xlat16_11
            = u_xlat16_11 * u_xlat16_8;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0,
            1.0);\n    u_xlat16_8 = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 =
            u_xlat16_11 * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_8 * u_xlat16_11
            + u_xlat16_3.x;\n    u_xlat16_11 = u_xlat16_11 / _RampBands;\n    u_xlat16_11
            = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_3.xyz = vec3(u_xlat16_11)
            * _LightColor0.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat16_11) * _HColor.xyz;\n   
            u_xlat16_4.xyz = u_xlat16_4.xyz * _LightColor0.xyz;\n    u_xlat16_11
            = (-_RimMin) + _RimMax;\n    u_xlat16_11 = float(1.0) / u_xlat16_11;\n   
            u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_18;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n   
            u_xlat16_18 = u_xlat16_11 * -2.0 + 3.0;\n    u_xlat16_11 = u_xlat16_11
            * u_xlat16_11;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_18;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_11) * u_xlat16_3.xyz;\n    u_xlat16_1.xyz = u_xlat16_3.xyz
            * _RimColor.xyz + u_xlat16_1.xyw;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tvec4 unity_WorldTransformParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec4 in_TANGENT0;\nattribute highp
            vec4 in_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec4
            vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat12);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) *
            u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    u_xlat3.xyz =
            u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy
            + (-u_xlat3.xyz);\n    u_xlat16_2.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4
            _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump float _RampBands;\nuniform \tmediump float _RampBandsSmoothing;\nuniform
            \tvec4 _BumpMap_ST;\nuniform \tmediump float _BumpScale;\nuniform \tmediump
            vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nuniform lowp sampler2D _BaseMap;\nuniform lowp
            sampler2D _BumpMap;\nuniform lowp sampler2D _SpecGlossMap;\nvarying highp
            vec3 vs_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\n#define
            SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3
            u_xlat1;\nlowp vec2 u_xlat10_1;\nmediump vec4 u_xlat16_2;\nmediump vec3
            u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nmediump float
            u_xlat16_7;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nlowp float u_xlat10_10;\nmediump
            float u_xlat16_12;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump
            float u_xlat16_17;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x
            = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing
            ? 1 : 0) != 0) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n   
            u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat10_1.xy = texture2D(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat10_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12
            = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17)
            + u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat16_17 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat5 = max(u_xlat16_17,
            0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat5);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_17) * u_xlat16_3.xyz;\n    u_xlat5 = dot(u_xlat16_2.xyz,
            u_xlat16_3.xyz);\n    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n    u_xlat10_10
            = texture2D(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat10_10 * u_xlat16_2.x;\n   
            u_xlat10 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = min(u_xlat10,
            1.0);\n    u_xlat16_7 = u_xlat10 * u_xlat10 + 1.0;\n    u_xlat16_7 =
            float(1.0) / u_xlat16_7;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n   
            u_xlat16_12 = u_xlat5 * u_xlat16_2.x + (-u_xlat5);\n    u_xlat5 = u_xlat16_12
            * u_xlat5 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_2.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_2.x = u_xlat5 * 0.157079637;\n    u_xlat16_2.x = u_xlat16_7
            * u_xlat16_2.x;\n    u_xlat16_7 = u_xlat0.x;\n    u_xlat16_7 = clamp(u_xlat16_7,
            0.0, 1.0);\n    u_xlat16_12 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_2.x
            = u_xlat16_7 * u_xlat16_2.x;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * _LightColor0.xyz;\n   
            u_xlat16_2.xyw = u_xlat16_2.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_12 = u_xlat16_12
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x;\n    u_xlat16_12
            = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_12 * -2.0
            + 3.0;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12
            = u_xlat16_12 * u_xlat16_3.x;\n    u_xlat16_12 = u_xlat16_12 * _RampBands;\n   
            u_xlat16_3.x = floor(u_xlat16_12);\n    u_xlat16_12 = fract(u_xlat16_12);\n   
            u_xlat16_8 = (-_RampBandsSmoothing) * 0.5 + 0.5;\n    u_xlat16_12 = u_xlat16_12
            + (-u_xlat16_8);\n    u_xlat16_13 = _RampBandsSmoothing * 0.5 + 0.5;\n   
            u_xlat16_8 = (-u_xlat16_8) + u_xlat16_13;\n    u_xlat16_8 = float(1.0)
            / u_xlat16_8;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_8;\n    u_xlat16_12
            = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_12 * -2.0
            + 3.0;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12
            = u_xlat16_8 * u_xlat16_12 + u_xlat16_3.x;\n    u_xlat16_12 = u_xlat16_12
            / _RampBands;\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_12) * _LightColor0.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat16_12)
            * _HColor.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _LightColor0.xyz;\n   
            u_xlat16_12 = (-_RimMin) + _RimMax;\n    u_xlat16_12 = float(1.0) / u_xlat16_12;\n   
            u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_12 = u_xlat16_12
            * u_xlat16_18;\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n   
            u_xlat16_18 = u_xlat16_12 * -2.0 + 3.0;\n    u_xlat16_12 = u_xlat16_12
            * u_xlat16_12;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_18;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_12) * u_xlat16_3.xyz;\n    u_xlat16_2.xyz = u_xlat16_3.xyz
            * _RimColor.xyz + u_xlat16_2.xyw;\n    u_xlat10_0.xyz = texture2D(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 unity_WorldTransformParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nin
            highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin
            highp vec4 in_TEXCOORD0;\nout highp vec3 vs_NORMAL0;\nout highp vec4
            vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout
            highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD7;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nfloat u_xlat12;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz
            * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n   
            u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    vs_NORMAL0.xyz = u_xlat1.xyz;\n   
            vs_TEXCOORD0.xyz = u_xlat0.xyz;\n    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n   
            vs_TEXCOORD0.w = 0.0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    vs_TEXCOORD1.zw = in_TEXCOORD0.xy;\n    u_xlat16_2.x
            = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat16_2.x, 0.00100000005);\n   
            u_xlat16_2.x = inversesqrt(u_xlat12);\n    u_xlat16_2.xyz = u_xlat0.xyz
            * u_xlat16_2.xxx;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat0.x = max(u_xlat0.x, 0.0);\n    vs_TEXCOORD2.w = (-u_xlat0.x) +
            1.0;\n    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) *
            u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    u_xlat3.xyz =
            u_xlat0.yzx * u_xlat1.zxy;\n    u_xlat0.xyz = u_xlat1.yzx * u_xlat0.zxy
            + (-u_xlat3.xyz);\n    u_xlat16_2.x = in_TANGENT0.w * unity_WorldTransformParams.w;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    vs_TEXCOORD3.w
            = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform
            \tmediump float _RampSmoothing;\nuniform \tmediump float _RampThreshold;\nuniform
            \tmediump float _RampBands;\nuniform \tmediump float _RampBandsSmoothing;\nuniform
            \tvec4 _BumpMap_ST;\nuniform \tmediump float _BumpScale;\nuniform \tmediump
            vec4 _BaseColor;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump
            float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4
            _RimColor;\nuniform \tmediump float _SpecularRoughness;\nuniform \tmediump
            vec4 _SpecularColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(1)
            uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(2) uniform mediump
            sampler2D _SpecGlossMap;\nin highp vec3 vs_NORMAL0;\nin highp vec4 vs_TEXCOORD0;\nin
            highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4
            vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3
            u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec2 u_xlat16_1;\nmediump
            vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat
            u_xlat5;\nmediump float u_xlat16_7;\nmediump float u_xlat16_8;\nfloat
            u_xlat10;\nmediump float u_xlat16_10;\nmediump float u_xlat16_12;\nmediump
            float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nmediump
            float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz,
            vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz
            = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat15 = ((gl_FrontFacing ? 0xffffffffu
            : uint(0)) != uint(0)) ? 1.0 : -1.0;\n    u_xlat0.xyz = vec3(u_xlat15)
            * u_xlat0.xyz;\n    u_xlat1.xy = vs_TEXCOORD1.zw * _BumpMap_ST.xy + _BumpMap_ST.zw;\n   
            u_xlat16_1.xy = texture(_BumpMap, u_xlat1.xy).yw;\n    u_xlat16_2.xy
            = u_xlat16_1.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_12
            = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_2.xy = u_xlat16_2.xy
            * vec2(_BumpScale);\n    u_xlat16_12 = min(u_xlat16_12, 1.0);\n    u_xlat16_12
            = (-u_xlat16_12) + 1.0;\n    u_xlat16_12 = sqrt(u_xlat16_12);\n    u_xlat16_3.xyz
            = u_xlat16_2.yyy * vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyw = u_xlat16_2.xxx
            * vs_TEXCOORD2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_12)
            * u_xlat0.xyz + u_xlat16_2.xyw;\n    u_xlat0.xyz = (-vs_TEXCOORD0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    u_xlat16_17 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat15 = max(u_xlat16_17, 0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat15);\n   
            u_xlat15 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n   
            u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) *
            _WorldSpaceLightPos0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_17)
            + u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat1.xyz);\n   
            u_xlat16_17 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat5 = max(u_xlat16_17,
            0.00100000005);\n    u_xlat16_17 = inversesqrt(u_xlat5);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_17) * u_xlat16_3.xyz;\n    u_xlat5 = dot(u_xlat16_2.xyz,
            u_xlat16_3.xyz);\n    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n    u_xlat16_10
            = texture(_SpecGlossMap, vs_TEXCOORD1.xy).w;\n    u_xlat16_2.x = max(_SpecularRoughness,
            9.99999975e-06);\n    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x;\n   
            u_xlat10 = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = min(u_xlat10,
            1.0);\n    u_xlat16_7 = u_xlat10 * u_xlat10 + 1.0;\n    u_xlat16_7 =
            float(1.0) / u_xlat16_7;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n   
            u_xlat16_12 = u_xlat5 * u_xlat16_2.x + (-u_xlat5);\n    u_xlat5 = u_xlat16_12
            * u_xlat5 + 1.0;\n    u_xlat5 = u_xlat5 * u_xlat5 + 9.99999975e-05;\n   
            u_xlat10 = u_xlat16_2.x * 0.318309873;\n    u_xlat5 = u_xlat10 / u_xlat5;\n   
            u_xlat16_2.x = u_xlat5 * 0.157079637;\n    u_xlat16_2.x = u_xlat16_7
            * u_xlat16_2.x;\n    u_xlat16_7 = u_xlat0.x;\n    u_xlat16_7 = clamp(u_xlat16_7,
            0.0, 1.0);\n    u_xlat16_12 = u_xlat0.x * 0.5 + 0.5;\n    u_xlat16_2.x
            = u_xlat16_7 * u_xlat16_2.x;\n    u_xlat16_2.xyw = u_xlat16_2.xxx * _LightColor0.xyz;\n   
            u_xlat16_2.xyw = u_xlat16_2.xyw * _SpecularColor.xyz;\n    u_xlat16_3.x
            = (-_RampSmoothing) * 0.5 + _RampThreshold;\n    u_xlat16_12 = u_xlat16_12
            + (-u_xlat16_3.x);\n    u_xlat16_8 = _RampSmoothing * 0.5 + _RampThreshold;\n   
            u_xlat16_3.x = (-u_xlat16_3.x) + u_xlat16_8;\n    u_xlat16_3.x = float(1.0)
            / u_xlat16_3.x;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_3.x;\n    u_xlat16_12
            = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_12 * -2.0
            + 3.0;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12
            = u_xlat16_12 * u_xlat16_3.x;\n    u_xlat16_12 = u_xlat16_12 * _RampBands;\n   
            u_xlat16_3.x = floor(u_xlat16_12);\n    u_xlat16_12 = fract(u_xlat16_12);\n   
            u_xlat16_8 = (-_RampBandsSmoothing) * 0.5 + 0.5;\n    u_xlat16_12 = u_xlat16_12
            + (-u_xlat16_8);\n    u_xlat16_13 = _RampBandsSmoothing * 0.5 + 0.5;\n   
            u_xlat16_8 = (-u_xlat16_8) + u_xlat16_13;\n    u_xlat16_8 = float(1.0)
            / u_xlat16_8;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_8;\n    u_xlat16_12
            = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat16_8 = u_xlat16_12 * -2.0
            + 3.0;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_12;\n    u_xlat16_12
            = u_xlat16_8 * u_xlat16_12 + u_xlat16_3.x;\n    u_xlat16_12 = u_xlat16_12
            / _RampBands;\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_12) * _LightColor0.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat16_12)
            * _HColor.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * _LightColor0.xyz;\n   
            u_xlat16_12 = (-_RimMin) + _RimMax;\n    u_xlat16_12 = float(1.0) / u_xlat16_12;\n   
            u_xlat16_18 = vs_TEXCOORD2.w + (-_RimMin);\n    u_xlat16_12 = u_xlat16_12
            * u_xlat16_18;\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n   
            u_xlat16_18 = u_xlat16_12 * -2.0 + 3.0;\n    u_xlat16_12 = u_xlat16_12
            * u_xlat16_12;\n    u_xlat16_12 = u_xlat16_12 * u_xlat16_18;\n    u_xlat16_3.xyz
            = vec3(u_xlat16_12) * u_xlat16_3.xyz;\n    u_xlat16_2.xyz = u_xlat16_3.xyz
            * _RimColor.xyz + u_xlat16_2.xyw;\n    u_xlat16_0.xyz = texture(_BaseMap,
            vs_TEXCOORD1.xy).xyz;\n    u_xlat16_3.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n   
            SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 1
          SubShaderIndex: 0
          Keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          Tags:
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: LIGHTMODE
            Value: FORWARDADD
          - Key: QUEUE
            Value: Geometry
          - Key: RenderType
            Value: Opaque
          - Key: SHADOWSUPPORT
            Value: true
        DefinedKeywords:
        - DIRECTIONAL
        - DIRECTIONAL_COOKIE
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - INSTANCING_ON
        - LIGHTMAP_SHADOW_MIXING
        - LOD_FADE_CROSSFADE
        - POINT
        - POINT_COOKIE
        - SHADOWS_CUBE
        - SHADOWS_DEPTH
        - SHADOWS_SCREEN
        - SHADOWS_SHADOWMASK
        - SHADOWS_SOFT
        - SPOT
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - TCP2_MOBILE
        - TCP2_RAMPTEXT
        - TCP2_RAMP_BANDS
        - TCP2_RAMP_BANDS_CRISP
        - TCP2_RAMP_CRISP
        - TCP2_RIM_LIGHTING
        - TCP2_RIM_LIGHTING_LIGHTMASK
        - TCP2_SHADOW_LIGHT_COLOR
        - TCP2_SHADOW_TEXTURE
        - TCP2_SPECULAR
        - TCP2_SPECULAR_CRISP
        - TCP2_SPECULAR_STYLIZED
        - UNITY_SINGLE_PASS_STEREO
        - _ALPHAPREMULTIPLY_ON
        - _ALPHATEST_ON
        - _EMISSION
        - _NORMALMAP
        - _RECEIVE_SHADOWS_OFF
        - __
        - _
        KeywordGroups:
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
          hasDiscard: 1
        - Keywords:
          - __
          - INSTANCING_ON
          hasDiscard: 1
        - Keywords:
          - _
          - _RECEIVE_SHADOWS_OFF
          hasDiscard: 1
        - Keywords:
          - _
          - TCP2_MOBILE
          hasDiscard: 1
        - Keywords:
          - _
          - TCP2_RIM_LIGHTING
          hasDiscard: 1
        - Keywords:
          - _
          - TCP2_RIM_LIGHTING_LIGHTMASK
          hasDiscard: 1
        - Keywords:
          - _
          - _NORMALMAP
          hasDiscard: 1
        - Keywords:
          - POINT
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          hasDiscard: 0
        - Keywords:
          - SPOT
          hasDiscard: 0
        - Keywords:
          - POINT_COOKIE
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL_COOKIE
          hasDiscard: 0
        - Keywords:
          - POINT
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - SPOT
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - POINT
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - SPOT
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          hasDiscard: 0
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - SHADOWS_SOFT
          hasDiscard: 0
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - SHADOWS_SOFT
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - SHADOWS_SOFT
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - SPOT
          - SHADOWS_DEPTH
          - SHADOWS_SOFT
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - DIRECTIONAL_COOKIE
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          hasDiscard: 0
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - SHADOWS_SOFT
          hasDiscard: 0
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - SHADOWS_SOFT
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - SHADOWS_SOFT
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - POINT
          - SHADOWS_CUBE
          - SHADOWS_SOFT
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          hasDiscard: 0
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - SHADOWS_SOFT
          hasDiscard: 0
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - SHADOWS_SOFT
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - SHADOWS_SOFT
          - SHADOWS_SHADOWMASK
          hasDiscard: 0
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        - Keywords:
          - POINT_COOKIE
          - SHADOWS_CUBE
          - SHADOWS_SOFT
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
          hasDiscard: 0
        KeywordsMinimalCardinality: 47
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - _RECEIVE_SHADOWS_OFF
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - _NORMALMAP
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
          - _EMISSION
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _RECEIVE_SHADOWS_OFF
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 5
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        - shaderCompilerPlatform: 9
          shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
          passType: 5
          passId: 1
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - DIRECTIONAL
          - TCP2_MOBILE
          - TCP2_RIM_LIGHTING_LIGHTMASK
          - _NORMALMAP
          - TCP2_RAMP_BANDS
          - TCP2_RIM_LIGHTING
          - TCP2_SHADOW_LIGHT_COLOR
          - TCP2_SPECULAR
        CompilationErrors: []
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 0
        SerializedObjectId: 1
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: LIGHTMODE
          Value: FORWARDADD
        - Key: QUEUE
          Value: Geometry
        - Key: RenderType
          Value: Opaque
        - Key: SHADOWSUPPORT
          Value: true
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -257
      - Shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
        ShaderVariants: []
        DefinedKeywords:
        - INSTANCING_ON
        - LOD_FADE_CROSSFADE
        - SHADOWS_CUBE
        - SHADOWS_DEPTH
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - _ALPHATEST_ON
        - __
        KeywordGroups:
        - Keywords:
          - __
          - INSTANCING_ON
          hasDiscard: 1
        - Keywords:
          - SHADOWS_DEPTH
          hasDiscard: 0
        - Keywords:
          - SHADOWS_CUBE
          hasDiscard: 0
        KeywordsMinimalCardinality: 2
        ContainsInvalidVariant: 0
        VariantStructures: []
        CompilationErrors: []
        HasDepthReader: 0
        Id: 2
        SubShaderIndex: 0
        SerializedObjectId: 2
        Tags:
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: LIGHTMODE
          Value: SHADOWCASTER
        - Key: QUEUE
          Value: Geometry
        - Key: RenderType
          Value: Opaque
        - Key: SHADOWSUPPORT
          Value: true
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: QUEUE
        Value: Geometry
      - Key: RenderType
        Value: Opaque
    Shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
    ShaderPath: Assets/JMO Assets/Toony Colors Pro/Shaders/Hybrid 2/TCP2 Hybrid Shader
      2.tcp2shader
    ShaderDefinedKeywords:
    - DIRECTIONAL
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - LIGHTPROBE_SH
    - SHADOWS_SCREEN
    - TCP2_MATCAP
    - TCP2_MATCAP_MASK
    - TCP2_MOBILE
    - TCP2_OCCLUSION
    - TCP2_RAMPTEXT
    - TCP2_RAMP_BANDS
    - TCP2_RAMP_BANDS_CRISP
    - TCP2_RAMP_CRISP
    - TCP2_REFLECTIONS
    - TCP2_REFLECTIONS_FRESNEL
    - TCP2_RIM_LIGHTING
    - TCP2_RIM_LIGHTING_LIGHTMASK
    - TCP2_SHADOW_LIGHT_COLOR
    - TCP2_SHADOW_TEXTURE
    - TCP2_SPECULAR
    - TCP2_SPECULAR_CRISP
    - TCP2_SPECULAR_STYLIZED
    - VERTEXLIGHT_ON
    - _ALPHAPREMULTIPLY_ON
    - _ALPHATEST_ON
    - _EMISSION
    - _NORMALMAP
    - _RECEIVE_SHADOWS_OFF
    - DIRECTIONAL_COOKIE
    - POINT
    - POINT_COOKIE
    - SHADOWS_DEPTH
    - SHADOWS_SHADOWMASK
    - SPOT
    - INSTANCING_ON
    - LIGHTMAP_SHADOW_MIXING
    - LOD_FADE_CROSSFADE
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    - _
    - SHADOWS_CUBE
    - SHADOWS_SOFT
    fallbackShader: {fileID: 17, guid: 0000000000000000e000000000000000, type: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_SHADOW_LIGHT_COLOR
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_SHADOW_LIGHT_COLOR
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_SHADOW_LIGHT_COLOR
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_SHADOW_LIGHT_COLOR
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _NORMALMAP
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _NORMALMAP
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _NORMALMAP
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _NORMALMAP
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _NORMALMAP
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _NORMALMAP
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - _NORMALMAP
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - _NORMALMAP
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _NORMALMAP
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _NORMALMAP
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - _NORMALMAP
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - _NORMALMAP
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RAMP_BANDS
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RAMP_BANDS
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_RAMP_BANDS
      - TCP2_RIM_LIGHTING
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_RAMP_BANDS
      - TCP2_RIM_LIGHTING
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_RAMP_BANDS
      - TCP2_RIM_LIGHTING
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_RAMP_BANDS
      - TCP2_RIM_LIGHTING
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_RAMP_BANDS
      - TCP2_RIM_LIGHTING
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - LIGHTPROBE_SH
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_RAMP_BANDS
      - TCP2_RIM_LIGHTING
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_RAMP_BANDS
      - TCP2_RIM_LIGHTING
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_RAMP_BANDS
      - TCP2_RIM_LIGHTING
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_RAMP_BANDS
      - TCP2_RIM_LIGHTING
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 4
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_REFLECTIONS_FRESNEL
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_RAMP_BANDS
      - TCP2_RIM_LIGHTING
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_SHADOW_LIGHT_COLOR
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_SHADOW_LIGHT_COLOR
      - _RECEIVE_SHADOWS_OFF
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _NORMALMAP
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _NORMALMAP
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _NORMALMAP
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - _NORMALMAP
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - _NORMALMAP
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - _NORMALMAP
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
      - _EMISSION
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_RAMP_BANDS
      - TCP2_RIM_LIGHTING
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - TCP2_RAMP_BANDS
      - TCP2_RIM_LIGHTING
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_RAMP_BANDS
      - TCP2_RIM_LIGHTING
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _RECEIVE_SHADOWS_OFF
      - TCP2_RAMP_BANDS
      - TCP2_RIM_LIGHTING
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 5
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_RAMP_BANDS
      - TCP2_RIM_LIGHTING
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
    - shaderCompilerPlatform: 9
      shader: {fileID: -6465566751694194690, guid: edd7abf643fa4bc4e8561d4c280c97cf, type: 3}
      passType: 5
      passId: 1
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - DIRECTIONAL
      - TCP2_MOBILE
      - TCP2_RIM_LIGHTING_LIGHTMASK
      - _NORMALMAP
      - TCP2_RAMP_BANDS
      - TCP2_RIM_LIGHTING
      - TCP2_SHADOW_LIGHT_COLOR
      - TCP2_SPECULAR
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0
            = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvoid
            main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n   
            u_xlat0 = u_xlat10_0 + _TextureSampleAdd;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n   
            SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin
            highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4
            vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4
            u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0
            = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1
            = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp
            vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 =
            texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat16_0 + _TextureSampleAdd;\n   
            u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n   
            SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0
            = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nmediump
            float u_xlat16_1;\nbool u_xlatb2;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat10_0 + _TextureSampleAdd;\n   
            u_xlat16_1 = u_xlat0.w * vs_COLOR0.w + -0.00100000005;\n    u_xlat0 =
            u_xlat0 * vs_COLOR0;\n    u_xlatb2 = u_xlat16_1<0.0;\n    if(u_xlatb2){discard;}\n   
            SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin
            highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4
            vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4
            u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0
            = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1
            = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp
            vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nvoid
            main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n   
            u_xlat0 = u_xlat16_0 + _TextureSampleAdd;\n    u_xlat16_1 = u_xlat0.w
            * vs_COLOR0.w + -0.00100000005;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n   
            u_xlatb2 = u_xlat16_1<0.0;\n    if(u_xlatb2){discard;}\n    SV_Target0.xyz
            = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0
            = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nlowp vec4
            u_xlat10_1;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx,
            _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw,
            vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n   
            u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z
            ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n   
            u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n   
            u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1
            + _TextureSampleAdd;\n    u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat0.x
            = u_xlat0.x * u_xlat1.w;\n    SV_Target0.xyz = u_xlat0.xxx * u_xlat1.xyz;\n   
            SV_Target0.w = u_xlat0.x;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin
            highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4
            vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4
            u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0
            = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1
            = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform
            \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlatb0.xy =
            greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw
            = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x
            = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0)
            : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w
            = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n   
            u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_1 = texture(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n   
            u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat0.x = u_xlat0.x * u_xlat1.w;\n   
            SV_Target0.xyz = u_xlat0.xxx * u_xlat1.xyz;\n    SV_Target0.w = u_xlat0.x;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump
            vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4
            vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0
            = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nlowp vec4
            u_xlat10_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlatb0.xy
            = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw
            = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x
            = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0)
            : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w
            = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n   
            u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n   
            u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat16_2 = u_xlat1.w * u_xlat0.x
            + -0.00100000005;\n    u_xlat0.x = u_xlat0.x * u_xlat1.w;\n    SV_Target0.xyz
            = u_xlat0.xxx * u_xlat1.xyz;\n    SV_Target0.w = u_xlat0.x;\n    u_xlatb0.x
            = u_xlat16_2<0.0;\n    if(u_xlatb0.x){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin
            highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4
            vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4
            u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0
            = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy
            = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1
            = in_POSITION0;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform
            \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n   
            u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n   
            u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n   
            u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y
            ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n   
            u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw
            * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_1
            = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n   
            u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat16_2 = u_xlat1.w * u_xlat0.x
            + -0.00100000005;\n    u_xlat0.x = u_xlat0.x * u_xlat1.w;\n    SV_Target0.xyz
            = u_xlat0.xxx * u_xlat1.xyz;\n    SV_Target0.w = u_xlat0.x;\n    u_xlatb0.x
            = u_xlat16_2<0.0;\n    if(u_xlatb0.x){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        DefinedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - UNITY_UI_ALPHACLIP
        - UNITY_UI_CLIP_RECT
        - __
        KeywordGroups:
        - Keywords:
          - __
          - UNITY_UI_CLIP_RECT
          hasDiscard: 1
        - Keywords:
          - __
          - UNITY_UI_ALPHACLIP
          hasDiscard: 1
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 5
          shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 9
          shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: CanUseSpriteAtlas
          Value: true
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
      Tags:
      - Key: CanUseSpriteAtlas
        Value: true
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
    Shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
    ShaderPath: Packages/com.coffee.ui-particle/Shaders/UIAdditive.shader
    ShaderDefinedKeywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 5
      shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 9
      shader: {fileID: 4800000, guid: ecfa8f5732b504ef98fba10aa18d0326, type: 3}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
      - UNITY_UI_CLIP_RECT
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform
            \tfloat _UIMaskSoftnessY;\nuniform \tint _UIVertexColorAlwaysGammaSpace;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvec4 u_xlat0;\nbvec3 u_xlatb0;\nvec4 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat16_2.xyz
            = in_COLOR0.xyz * vec3(0.265884995, 0.265884995, 0.265884995) + vec3(0.736584008,
            0.736584008, 0.736584008);\n    u_xlat16_2.xyz = in_COLOR0.xyz * u_xlat16_2.xyz
            + vec3(-0.00980184041, -0.00980184041, -0.00980184041);\n    u_xlat16_2.xyz
            = in_COLOR0.xyz * u_xlat16_2.xyz + vec3(0.00319697009, 0.00319697009,
            0.00319697009);\n    u_xlat16_3.xyz = in_COLOR0.xyz * vec3(0.0849710032,
            0.0849710032, 0.0849710032) + vec3(-0.000163029006, -0.000163029006,
            -0.000163029006);\n    u_xlatb0.xyz = lessThan(in_COLOR0.xyzx, vec4(0.0725490004,
            0.0725490004, 0.0725490004, 0.0)).xyz;\n    {\n        vec3 hlslcc_movcTemp
            = u_xlat16_2;\n        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_3.x
            : u_xlat16_2.x;\n        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_3.y
            : u_xlat16_2.y;\n        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_3.z
            : u_xlat16_2.z;\n        u_xlat16_2 = hlslcc_movcTemp;\n    }\n    u_xlat1.xyz
            = (int(_UIVertexColorAlwaysGammaSpace) != 0) ? u_xlat16_2.xyz : in_COLOR0.xyz;\n   
            u_xlat1.w = in_COLOR0.w;\n    u_xlat1 = u_xlat1 * _Color;\n    vs_COLOR0
            = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy
            * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy
            * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n   
            u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25)
            + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n   
            u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy
            = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy
            = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4
            u_xlat1;\nlowp vec4 u_xlat10_1;\nfloat unity_roundEven(float x) { float
            y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2
            unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x);
            a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4
            unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid
            main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x
            = unity_roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n   
            u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1
            + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0
            = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n   
            SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform
            \tfloat _UIMaskSoftnessX;\nuniform \tfloat _UIMaskSoftnessY;\nuniform
            \tint _UIVertexColorAlwaysGammaSpace;\nin highp vec4 in_POSITION0;\nin
            highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4
            vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout
            highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nbvec3 u_xlatb0;\nvec4 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat16_2.xyz
            = in_COLOR0.xyz * vec3(0.265884995, 0.265884995, 0.265884995) + vec3(0.736584008,
            0.736584008, 0.736584008);\n    u_xlat16_2.xyz = in_COLOR0.xyz * u_xlat16_2.xyz
            + vec3(-0.00980184041, -0.00980184041, -0.00980184041);\n    u_xlat16_2.xyz
            = in_COLOR0.xyz * u_xlat16_2.xyz + vec3(0.00319697009, 0.00319697009,
            0.00319697009);\n    u_xlat16_3.xyz = in_COLOR0.xyz * vec3(0.0849710032,
            0.0849710032, 0.0849710032) + vec3(-0.000163029006, -0.000163029006,
            -0.000163029006);\n    u_xlatb0.xyz = lessThan(in_COLOR0.xyzx, vec4(0.0725490004,
            0.0725490004, 0.0725490004, 0.0)).xyz;\n    {\n        vec3 hlslcc_movcTemp
            = u_xlat16_2;\n        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_3.x
            : u_xlat16_2.x;\n        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_3.y
            : u_xlat16_2.y;\n        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_3.z
            : u_xlat16_2.z;\n        u_xlat16_2 = hlslcc_movcTemp;\n    }\n    u_xlat1.xyz
            = (int(_UIVertexColorAlwaysGammaSpace) != 0) ? u_xlat16_2.xyz : in_COLOR0.xyz;\n   
            u_xlat1.w = in_COLOR0.w;\n    u_xlat1 = u_xlat1 * _Color;\n    vs_COLOR0
            = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy
            * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy
            * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n   
            u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25)
            + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n   
            u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy
            = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy
            = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp
            vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvoid
            main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x
            = roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n   
            u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1
            + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0
            = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n   
            SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform
            \tfloat _UIMaskSoftnessY;\nuniform \tint _UIVertexColorAlwaysGammaSpace;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvec4 u_xlat0;\nbvec3 u_xlatb0;\nvec4 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat16_2.xyz
            = in_COLOR0.xyz * vec3(0.265884995, 0.265884995, 0.265884995) + vec3(0.736584008,
            0.736584008, 0.736584008);\n    u_xlat16_2.xyz = in_COLOR0.xyz * u_xlat16_2.xyz
            + vec3(-0.00980184041, -0.00980184041, -0.00980184041);\n    u_xlat16_2.xyz
            = in_COLOR0.xyz * u_xlat16_2.xyz + vec3(0.00319697009, 0.00319697009,
            0.00319697009);\n    u_xlat16_3.xyz = in_COLOR0.xyz * vec3(0.0849710032,
            0.0849710032, 0.0849710032) + vec3(-0.000163029006, -0.000163029006,
            -0.000163029006);\n    u_xlatb0.xyz = lessThan(in_COLOR0.xyzx, vec4(0.0725490004,
            0.0725490004, 0.0725490004, 0.0)).xyz;\n    {\n        vec3 hlslcc_movcTemp
            = u_xlat16_2;\n        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_3.x
            : u_xlat16_2.x;\n        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_3.y
            : u_xlat16_2.y;\n        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_3.z
            : u_xlat16_2.z;\n        u_xlat16_2 = hlslcc_movcTemp;\n    }\n    u_xlat1.xyz
            = (int(_UIVertexColorAlwaysGammaSpace) != 0) ? u_xlat16_2.xyz : in_COLOR0.xyz;\n   
            u_xlat1.w = in_COLOR0.w;\n    u_xlat1 = u_xlat1 * _Color;\n    vs_COLOR0
            = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy
            * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy
            * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n   
            u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25)
            + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n   
            u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy
            = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy
            = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4
            u_xlat1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nbool u_xlatb3;\nfloat
            unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x ==
            0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x
            = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3
            unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x
            = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n   
            u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n   
            u_xlat16_2 = u_xlat16_0.w * u_xlat1.w + -0.00100000005;\n    u_xlatb3
            = u_xlat16_2<0.0;\n    if(u_xlatb3){discard;}\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n   
            u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n   
            SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform
            \tfloat _UIMaskSoftnessX;\nuniform \tfloat _UIMaskSoftnessY;\nuniform
            \tint _UIVertexColorAlwaysGammaSpace;\nin highp vec4 in_POSITION0;\nin
            highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4
            vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout
            highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nbvec3 u_xlatb0;\nvec4 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat16_2.xyz
            = in_COLOR0.xyz * vec3(0.265884995, 0.265884995, 0.265884995) + vec3(0.736584008,
            0.736584008, 0.736584008);\n    u_xlat16_2.xyz = in_COLOR0.xyz * u_xlat16_2.xyz
            + vec3(-0.00980184041, -0.00980184041, -0.00980184041);\n    u_xlat16_2.xyz
            = in_COLOR0.xyz * u_xlat16_2.xyz + vec3(0.00319697009, 0.00319697009,
            0.00319697009);\n    u_xlat16_3.xyz = in_COLOR0.xyz * vec3(0.0849710032,
            0.0849710032, 0.0849710032) + vec3(-0.000163029006, -0.000163029006,
            -0.000163029006);\n    u_xlatb0.xyz = lessThan(in_COLOR0.xyzx, vec4(0.0725490004,
            0.0725490004, 0.0725490004, 0.0)).xyz;\n    {\n        vec3 hlslcc_movcTemp
            = u_xlat16_2;\n        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_3.x
            : u_xlat16_2.x;\n        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_3.y
            : u_xlat16_2.y;\n        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_3.z
            : u_xlat16_2.z;\n        u_xlat16_2 = hlslcc_movcTemp;\n    }\n    u_xlat1.xyz
            = (int(_UIVertexColorAlwaysGammaSpace) != 0) ? u_xlat16_2.xyz : in_COLOR0.xyz;\n   
            u_xlat1.w = in_COLOR0.w;\n    u_xlat1 = u_xlat1 * _Color;\n    vs_COLOR0
            = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy
            * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy
            * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n   
            u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25)
            + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n   
            u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy
            = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy
            = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0)
            uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp
            vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4
            u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump
            float u_xlat16_2;\nbool u_xlatb3;\nvoid main()\n{\n    u_xlat16_0.x =
            vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = roundEven(u_xlat16_0.x);\n   
            u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat16_1 = texture(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n   
            u_xlat16_2 = u_xlat16_0.w * u_xlat1.w + -0.00100000005;\n    u_xlatb3
            = u_xlat16_2<0.0;\n    if(u_xlatb3){discard;}\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n   
            u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n   
            SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform
            \tfloat _UIMaskSoftnessY;\nuniform \tint _UIVertexColorAlwaysGammaSpace;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvec4 u_xlat0;\nbvec3 u_xlatb0;\nvec4 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat16_2.xyz
            = in_COLOR0.xyz * vec3(0.265884995, 0.265884995, 0.265884995) + vec3(0.736584008,
            0.736584008, 0.736584008);\n    u_xlat16_2.xyz = in_COLOR0.xyz * u_xlat16_2.xyz
            + vec3(-0.00980184041, -0.00980184041, -0.00980184041);\n    u_xlat16_2.xyz
            = in_COLOR0.xyz * u_xlat16_2.xyz + vec3(0.00319697009, 0.00319697009,
            0.00319697009);\n    u_xlat16_3.xyz = in_COLOR0.xyz * vec3(0.0849710032,
            0.0849710032, 0.0849710032) + vec3(-0.000163029006, -0.000163029006,
            -0.000163029006);\n    u_xlatb0.xyz = lessThan(in_COLOR0.xyzx, vec4(0.0725490004,
            0.0725490004, 0.0725490004, 0.0)).xyz;\n    {\n        vec3 hlslcc_movcTemp
            = u_xlat16_2;\n        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_3.x
            : u_xlat16_2.x;\n        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_3.y
            : u_xlat16_2.y;\n        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_3.z
            : u_xlat16_2.z;\n        u_xlat16_2 = hlslcc_movcTemp;\n    }\n    u_xlat1.xyz
            = (int(_UIVertexColorAlwaysGammaSpace) != 0) ? u_xlat16_2.xyz : in_COLOR0.xyz;\n   
            u_xlat1.w = in_COLOR0.w;\n    u_xlat1 = u_xlat1 * _Color;\n    vs_COLOR0
            = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy
            * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy
            * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n   
            u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25)
            + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n   
            u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy
            = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy
            = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float
            u_xlat16_1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump float u_xlat16_4;\nfloat
            unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x ==
            0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x
            = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3
            unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.xy
            = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy,
            0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_4 =
            vs_COLOR0.w * 255.0;\n    u_xlat16_4 = unity_roundEven(u_xlat16_4);\n   
            u_xlat16_0.w = u_xlat16_4 * 0.00392156886;\n    u_xlat10_2 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat2 = u_xlat10_2 + _TextureSampleAdd;\n   
            u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat2;\n   
            u_xlat16_1 = u_xlat16_1 * u_xlat0.w;\n    SV_Target0.xyz = u_xlat0.xyz
            * vec3(u_xlat16_1);\n    SV_Target0.w = u_xlat16_1;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform
            \tfloat _UIMaskSoftnessX;\nuniform \tfloat _UIMaskSoftnessY;\nuniform
            \tint _UIVertexColorAlwaysGammaSpace;\nin highp vec4 in_POSITION0;\nin
            highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4
            vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout
            highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nbvec3 u_xlatb0;\nvec4 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat16_2.xyz
            = in_COLOR0.xyz * vec3(0.265884995, 0.265884995, 0.265884995) + vec3(0.736584008,
            0.736584008, 0.736584008);\n    u_xlat16_2.xyz = in_COLOR0.xyz * u_xlat16_2.xyz
            + vec3(-0.00980184041, -0.00980184041, -0.00980184041);\n    u_xlat16_2.xyz
            = in_COLOR0.xyz * u_xlat16_2.xyz + vec3(0.00319697009, 0.00319697009,
            0.00319697009);\n    u_xlat16_3.xyz = in_COLOR0.xyz * vec3(0.0849710032,
            0.0849710032, 0.0849710032) + vec3(-0.000163029006, -0.000163029006,
            -0.000163029006);\n    u_xlatb0.xyz = lessThan(in_COLOR0.xyzx, vec4(0.0725490004,
            0.0725490004, 0.0725490004, 0.0)).xyz;\n    {\n        vec3 hlslcc_movcTemp
            = u_xlat16_2;\n        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_3.x
            : u_xlat16_2.x;\n        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_3.y
            : u_xlat16_2.y;\n        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_3.z
            : u_xlat16_2.z;\n        u_xlat16_2 = hlslcc_movcTemp;\n    }\n    u_xlat1.xyz
            = (int(_UIVertexColorAlwaysGammaSpace) != 0) ? u_xlat16_2.xyz : in_COLOR0.xyz;\n   
            u_xlat1.w = in_COLOR0.w;\n    u_xlat1 = u_xlat1 * _Color;\n    vs_COLOR0
            = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy
            * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy
            * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n   
            u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25)
            + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n   
            u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy
            = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy
            = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform
            \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD2;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump
            float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump float
            u_xlat16_4;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n   
            u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy
            * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n   
            u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_4 = vs_COLOR0.w * 255.0;\n   
            u_xlat16_4 = roundEven(u_xlat16_4);\n    u_xlat16_0.w = u_xlat16_4 *
            0.00392156886;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n   
            u_xlat2 = u_xlat16_2 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n   
            u_xlat0 = u_xlat16_0 * u_xlat2;\n    u_xlat16_1 = u_xlat16_1 * u_xlat0.w;\n   
            SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    SV_Target0.w =
            u_xlat16_1;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform
            \tfloat _UIMaskSoftnessY;\nuniform \tint _UIVertexColorAlwaysGammaSpace;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4
            vs_TEXCOORD2;\nvec4 u_xlat0;\nbvec3 u_xlatb0;\nvec4 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat16_2.xyz
            = in_COLOR0.xyz * vec3(0.265884995, 0.265884995, 0.265884995) + vec3(0.736584008,
            0.736584008, 0.736584008);\n    u_xlat16_2.xyz = in_COLOR0.xyz * u_xlat16_2.xyz
            + vec3(-0.00980184041, -0.00980184041, -0.00980184041);\n    u_xlat16_2.xyz
            = in_COLOR0.xyz * u_xlat16_2.xyz + vec3(0.00319697009, 0.00319697009,
            0.00319697009);\n    u_xlat16_3.xyz = in_COLOR0.xyz * vec3(0.0849710032,
            0.0849710032, 0.0849710032) + vec3(-0.000163029006, -0.000163029006,
            -0.000163029006);\n    u_xlatb0.xyz = lessThan(in_COLOR0.xyzx, vec4(0.0725490004,
            0.0725490004, 0.0725490004, 0.0)).xyz;\n    {\n        vec3 hlslcc_movcTemp
            = u_xlat16_2;\n        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_3.x
            : u_xlat16_2.x;\n        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_3.y
            : u_xlat16_2.y;\n        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_3.z
            : u_xlat16_2.z;\n        u_xlat16_2 = hlslcc_movcTemp;\n    }\n    u_xlat1.xyz
            = (int(_UIVertexColorAlwaysGammaSpace) != 0) ? u_xlat16_2.xyz : in_COLOR0.xyz;\n   
            u_xlat1.w = in_COLOR0.w;\n    u_xlat1 = u_xlat1 * _Color;\n    vs_COLOR0
            = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy
            * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy
            * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n   
            u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25)
            + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n   
            u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy
            = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy
            = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp
            vec4 u_xlat10_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump
            float u_xlat16_5;\nfloat unity_roundEven(float x) { float y = floor(x
            + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2
            a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a;
            }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y);
            a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a)
            { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z);
            a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x
            = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n   
            u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n   
            u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n   
            u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy
            + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n   
            u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y
            * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2 + -0.00100000005;\n   
            u_xlat16_2 = u_xlat0.w * u_xlat16_2;\n    SV_Target0.xyz = u_xlat0.xyz
            * vec3(u_xlat16_2);\n    SV_Target0.w = u_xlat16_2;\n    u_xlatb1 = u_xlat16_5<0.0;\n   
            if(u_xlatb1){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _Color;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform
            \tfloat _UIMaskSoftnessX;\nuniform \tfloat _UIMaskSoftnessY;\nuniform
            \tint _UIVertexColorAlwaysGammaSpace;\nin highp vec4 in_POSITION0;\nin
            highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4
            vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout
            highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nbvec3 u_xlatb0;\nvec4 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat0
            = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0
            = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat16_2.xyz
            = in_COLOR0.xyz * vec3(0.265884995, 0.265884995, 0.265884995) + vec3(0.736584008,
            0.736584008, 0.736584008);\n    u_xlat16_2.xyz = in_COLOR0.xyz * u_xlat16_2.xyz
            + vec3(-0.00980184041, -0.00980184041, -0.00980184041);\n    u_xlat16_2.xyz
            = in_COLOR0.xyz * u_xlat16_2.xyz + vec3(0.00319697009, 0.00319697009,
            0.00319697009);\n    u_xlat16_3.xyz = in_COLOR0.xyz * vec3(0.0849710032,
            0.0849710032, 0.0849710032) + vec3(-0.000163029006, -0.000163029006,
            -0.000163029006);\n    u_xlatb0.xyz = lessThan(in_COLOR0.xyzx, vec4(0.0725490004,
            0.0725490004, 0.0725490004, 0.0)).xyz;\n    {\n        vec3 hlslcc_movcTemp
            = u_xlat16_2;\n        hlslcc_movcTemp.x = (u_xlatb0.x) ? u_xlat16_3.x
            : u_xlat16_2.x;\n        hlslcc_movcTemp.y = (u_xlatb0.y) ? u_xlat16_3.y
            : u_xlat16_2.y;\n        hlslcc_movcTemp.z = (u_xlatb0.z) ? u_xlat16_3.z
            : u_xlat16_2.z;\n        u_xlat16_2 = hlslcc_movcTemp;\n    }\n    u_xlat1.xyz
            = (int(_UIVertexColorAlwaysGammaSpace) != 0) ? u_xlat16_2.xyz : in_COLOR0.xyz;\n   
            u_xlat1.w = in_COLOR0.w;\n    u_xlat1 = u_xlat1 * _Color;\n    vs_COLOR0
            = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy +
            _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy
            * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy
            * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n   
            u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25)
            + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n   
            u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n   
            u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy
            = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy
            = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define
            UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define
            UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform
            \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD2;\nlayout(location
            = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump
            float u_xlat16_5;\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n   
            u_xlat16_0.x = roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x
            * 0.00392156886;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n   
            u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n   
            u_xlat0 = u_xlat16_0 * u_xlat1;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n   
            u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy
            * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n   
            u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2
            + -0.00100000005;\n    u_xlat16_2 = u_xlat0.w * u_xlat16_2;\n    SV_Target0.xyz
            = u_xlat0.xyz * vec3(u_xlat16_2);\n    SV_Target0.w = u_xlat16_2;\n   
            u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: CanUseSpriteAtlas
            Value: true
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: PreviewType
            Value: Plane
          - Key: QUEUE
            Value: Transparent
          - Key: RenderType
            Value: Transparent
        DefinedKeywords:
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - UNITY_UI_ALPHACLIP
        - UNITY_UI_CLIP_RECT
        - _
        KeywordGroups:
        - Keywords:
          - _
          - UNITY_UI_CLIP_RECT
          hasDiscard: 1
        - Keywords:
          - _
          - UNITY_UI_ALPHACLIP
          hasDiscard: 1
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 9
          shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 5
          shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
        - shaderCompilerPlatform: 9
          shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
        - shaderCompilerPlatform: 5
          shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 9
          shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 5
          shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
        - shaderCompilerPlatform: 9
          shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: CanUseSpriteAtlas
          Value: true
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: PreviewType
          Value: Plane
        - Key: QUEUE
          Value: Transparent
        - Key: RenderType
          Value: Transparent
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
      Tags:
      - Key: CanUseSpriteAtlas
        Value: true
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: PreviewType
        Value: Plane
      - Key: QUEUE
        Value: Transparent
      - Key: RenderType
        Value: Transparent
    Shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - _
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 9
      shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 5
      shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
    - shaderCompilerPlatform: 9
      shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
    - shaderCompilerPlatform: 5
      shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 9
      shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 5
      shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
      - UNITY_UI_CLIP_RECT
    - shaderCompilerPlatform: 9
      shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords:
      - UNITY_UI_ALPHACLIP
      - UNITY_UI_CLIP_RECT
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - Shader: {fileID: 10752, guid: 0000000000000000f000000000000000, type: 0}
        ShaderVariants:
        - ShaderCompilerPlatform: 5
          NoShaderVariant: 0
          VertexProgram: "\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nlowp vec3 u_xlat10_0;\nvoid main()\n{\n   
            u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz
            = u_xlat10_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: RenderType
            Value: Opaque
        - ShaderCompilerPlatform: 9
          NoShaderVariant: 0
          VertexProgram: "\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS
            0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define
            UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION
            0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location
            = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define
            UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nout
            highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "\n#version 300 es\n\nprecision highp float;\nprecision
            highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define
            UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding
            = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x)
            layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin
            highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump
            vec3 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex,
            vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: RenderType
            Value: Opaque
        DefinedKeywords:
        - FOG_EXP
        - FOG_EXP2
        - FOG_LINEAR
        - STEREO_CUBEMAP_RENDER_ON
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        - UNITY_SINGLE_PASS_STEREO
        - __
        KeywordGroups:
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
          hasDiscard: 1
        KeywordsMinimalCardinality: 0
        ContainsInvalidVariant: 0
        VariantStructures:
        - shaderCompilerPlatform: 5
          shader: {fileID: 10752, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        - shaderCompilerPlatform: 9
          shader: {fileID: 10752, guid: 0000000000000000f000000000000000, type: 0}
          passType: 0
          passId: 0
          subShaderIndex: 0
          upToDate: 0
          keywords: []
        CompilationErrors: []
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: RenderType
          Value: Opaque
        UsePass:
          shader: 
          pass: 
        GrabPassTextureName: 
        PlatformMask: -1
      Shader: {fileID: 10752, guid: 0000000000000000f000000000000000, type: 0}
      Tags:
      - Key: RenderType
        Value: Opaque
    Shader: {fileID: 10752, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - FOG_EXP
    - FOG_EXP2
    - FOG_LINEAR
    - STEREO_CUBEMAP_RENDER_ON
    - STEREO_INSTANCING_ON
    - STEREO_MULTIVIEW_ON
    - UNITY_SINGLE_PASS_STEREO
    - __
    fallbackShader: {fileID: 0}
    CompilationErrors: []
    Variants:
    - shaderCompilerPlatform: 5
      shader: {fileID: 10752, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
    - shaderCompilerPlatform: 9
      shader: {fileID: 10752, guid: 0000000000000000f000000000000000, type: 0}
      passType: 0
      passId: 0
      subShaderIndex: 0
      upToDate: 0
      keywords: []
  _modifiedShaders: []
  invalidShaders: 0
  _sceneLightData:
    PointLightCount: 0
    SpotLightCount: 0
    DirectionalLightCount: 0
    LightmapOn: 0
    DirlightmapCombined: 0
    DirectionalCookieExists: 0
    PointCookieExists: 0
    SpotCookieExists: 0
    AddiitonalLightsKeywordRequired: 0
